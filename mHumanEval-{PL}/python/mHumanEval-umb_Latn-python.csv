task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,umb_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Sanda nda volonduko via tukuiwa ndeti, pali atendelo avali a lisetahãla okuti, a likuata lekalo lio vepuluvi liaco.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,umb_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ocimunga caco ci kuete olonepa via litepa (olonepa viosi via tepiwa) kuenda ka vi kuete olonepa via litepa. Ka ku ka kapiwe olonduko vimue.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,umb_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Nda tua tenda etendelo limue li kuete ondimbukiso ya velapo, tu pondola oku li tepa lolondimbukiso vi kuete ondimbukiso ya velapo kuenda olondimbukiso vi kuete ondimbukiso ya velapo.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,umb_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""O pondola oku sanga ulala wovina via kapiwa vokasia yolombongo ale vi tepisiwa, vi fetika lolombongo ka vi kuete esilivilo. O sukila oku kũlĩhĩsa nda o kuete olombongo vialua ale sio, oco o kuate olombongo vialua.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,umb_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Oco tu kũlĩhe etendelo liovilinga, tu sukila oku tenda etendelo lietepiso li kasi pokati kovilinga kuenda etendelo lietepiso li kasi pokati kovilinga.""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,umb_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""O "" delimitador "" yi kapiwa pokati kovipama vivali vi kuãimo vi kuete olonduko via litepa.""""""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,umb_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ocicapa ci lekisa etendelo lia velapo liolocapa viocindekaise. Ocicapa ci lekisa etendelo lia velapo liolocapa viocindekaise.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,umb_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,umb_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Ku lisetahãiso liolohuasi, tiula ocimalẽho cimue ci kuete etendelo kuenda ocimalẽho cosi ci sangiwa vo lisetahãiso.""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,umb_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Oku tunda kolonduko viosi via tukuiwa, ci lekisa etendelo lia velapo li sangiwa vocinimbu cimue. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,umb_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Sanga ocimalẽho cimue ci fetika lolondaka via tukuiwa. Ocisimĩlo co algoritmo ca leluka: - Sanga ocimalẽho ca velapo cocimalẽho ca tukuiwa okuti palindromo. - Sanga ocimalẽho cimue ci fetika lolondaka via tukuiwa okuti palindromo.""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Seteka nda ocisonehua caco cocili nda ca sonehiwa lonjila yimue ya suapo.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,umb_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ocisonehua ci sangiwa volondimbukiso vi kuete olonduko via litepa. Ocisonehua ci sangiwavo volondimbukiso vi kuete olonduko via litepa.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,umb_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Nda ocimalẽho caco ka ci kuete etendelo liolonjanja, o sukila oku tiuka tete, kuenda oku tiuka tete nda o kuete etendelo liolonjanja vialua. Nda ocimalẽho caco ka ci kuete etendelo, o sukila oku tiuka tete.""""""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,umb_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Tiukila ketendelo lioloñei vivali a kuenda b >>> ketendelo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo lia velapo""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,umb_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Ocilondokua ci pondola oku tiuka, nda wa sanga olonduko vimue via sonehiwa velimi lio Helasi, ale kelimi lio Helasi.""""""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,umb_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Tioka ketendelo liolo atendelo a fetika 0 toke n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,umb_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Nda wa sanga ondimbukiso yimue, tala ketendelo liolonjila (ale olonduko vikuavo) vi sangiwa ketendelo liaco.""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,umb_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ocisungo caco ci kuete olonduko via litepa, pole, ca litepa la vikuavo ndeci: 'o' - note, lasts beats 'oce' - half note, lasts two beats 'ce' - quater note, lasts one beat >>> parse_music. 'oce . . . oce
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,umb_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Sanga etendelo liolowola via tukuiwa vocinimbu cimue. Tenda etendelo liolowola via tukuiwa vocinimbu caco. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,umb_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""O pondola oku nõla ololetala ndeci, '0', '1', '2', '3', '4', '5', '6', '7', '8' kuenda '9'. O pondola oku nõla ololetala vimue ndeci, '0', '1', '2', '3', '4', '5', '6', '7', '8' kuenda '9'. O pondola oku tiuka lololetala via tepisiwa ale vievi ka via tepisiwile, pole via tepisiwa ale vievi ka via tepisiwile, oco o tiuke lotelefone yove ale lotelefone yikuavo.""""""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,umb_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Oku sanga atosi a velapo (ale a tĩla) kuenda oku a pitulula, sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla) oku sanga atosi a velapo (ale a tĩla)""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,umb_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Poku tukula etendelo lioloñei, (lia velapo ale avali), linga etepiso lioloñei, oco etendelo litito li linge 0 kuenda etendelo linene li linge 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,umb_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,umb_Latn,python,"

def strlen(string: str) -> int:
    """"""Olio li lekisavo okuti, nda tu yongola oku kuata elomboloko liulandu umue Wembimbiliya, tu sukila oku u tanga loku u konomuisa ciwa.""""""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,umb_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Oco tu sange etendelo limue lia velapo, tu sukila oku li tepa lolonepa vivali.""""""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,umb_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Ocivalu ci kasi oku tangiwa ci sukila oku tendiwa olonjanja vialua. Ocivalu ci kasi oku tangiwa ci sukila oku tendiwa olonjanja vialua. Ocivalu ci kasi oku tangiwa ci sukila oku tendiwa olonjanja vialua.""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,umb_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Ku ka kape vali olonduko viosi vo aplikativo. Ku ka kape vali olonduko viosi vo aplikativo. Ku ka kape vali olonduko viosi vo aplikativo.""""""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,umb_Latn,python,"

def flip_case(string: str) -> str:
    """"""Oco o tale olonduko vimue, soneha olonduko via velapo levi vitito. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,umb_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Konakatela olonduko viololetala via velapo vionduko yimue ya velapo.""""""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,umb_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Oku kapa vo Filter list olonduko viololetala via litepa, oco o tale lika nda via fetika lolonduko via litepa.""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,umb_Latn,python,"

def get_positive(l: list):
    """"""O pondola oku tiuka lika lolombongo vi kasi vokalivulu kaco.""""""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,umb_Latn,python,"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,umb_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs olonepa vio polinomio. find_zero sanga x okuti poly ((x) = 0. find_zero o tiuka lika lika nolonepa yimue, ndaño okuti kuli vialua. find_zero o tambula lika olonepa vi kuete olonepa vialua kuenda olonepa vina okuti ka vi kuete olonepa, momo vi eca etambululo. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ocivaluisa polinomio yi kuete ondimbukiso xs kocitumãlo x. yi tiuka xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,umb_Latn,python,"

def sort_third(l: list):
    """"""Ocikele eci ci tambula ulala l kuenda ceca ulala l' okuti l' yimuamue l l olondimbukiso ka vi teliwa lolonepa vitatu, osimbu okuti olondimbukiso vi kuete olondimbukiso vi teliwa lolonepa vitatu vi soka ndolondimbukiso vi kuete olondimbukiso vi soka l l, pole via kapiwa lonjila yimue ya sunguluka. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,umb_Latn,python,"

def unique(l: list):
    """"""Olio li lekisavo okuti, nda tu yongola oku kuata elomboloko liasuapo, tu sukila oku yuvula oku tanga ovinimbu viosi Viembimbiliya.""""""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,umb_Latn,python,"

def max_element(l: list):
    """"""O pondola oku tiuka londaka yimue yi kasi ndondimbukiso.""""""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,umb_Latn,python,"

def fizz_buzz(n: int):
    """"""Tioka ketendelo liolonjanja ocisonehua 7 ci moleha voviengele vitito vi sule, okuti ci teyiwa leci ci soka 11 ale 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,umb_Latn,python,"

def sort_even(l: list):
    """"""Ocina eci ci ka kuata ulala l kuenda ci ka eca ulala l' okuti l' yi lisetahãla l londimbukiso ka ya siatele, osimbu okuti olondimbukiso vi kuete ulala waco vi lisetahãla lolondimbukiso vi kuete ulala waco, pole via kapiwa lonjila yimue ya sunguluka. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,umb_Latn,python,"

def encode_cyclic(s: str):
    """"""yi tambula o encoded string yi kuete encode_cyclic yi tiuka o encoded string.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""yi tiuka yi sindika ocingungu cokuti ocimunga colondimbukiso vitatu.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,umb_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib yi tiula etendelo li tukuiwa hati, n-th, okuti olio etendelo lia Fibonacci kuenda olio li kuete esilivilo lia velapo. >>> prime_fib ((1) 2 >>> prime_fib ((2) 3 >>> prime_fib ((3) 5 >>> prime_fib ((4) 13 >>> prime_fib ((5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,umb_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero yi tambula olonepa vialua violohũlũkãi ndondimbukiso. yi tiuka londimbukiso yokuti True nda kuli ovina vitatu via litepa vi kuete ondimbukiso yokuti, sum oku zero, kuenda False nda ka kuli. >>> triples_sum_to_zero (([1, 3, 5, 0]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,umb_Latn,python,"

def car_race_collision(n: int):
    """"""Sokolola ndeci okuti, ekãlu limue li kasi oku enda oku pita kovaso, pole, ka li piti vonjila. N, akãlu a kasi oku enda oku pita kovaso, pole, a kasi oku enda oku pita kovaso.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,umb_Latn,python,"

def incr_list(l: list):
    """"""Olio li lekisavo okuti, nda tu yongola oku kuata elomboloko liulandu umue Wembimbiliya, tu sukila oku u tanga loku u sokolola lutate.""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,umb_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero yi tambula ulala wolonduko viosi ndetendelo. yi tiuka ku True nda kuli olonduko vivali via litepa vi kuete etendelo limuamue, kuenda ku False nda ka kuli. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,umb_Latn,python,"

def change_base(x: int, base: int):
    """"""Ku pongolola ocimalẽho cocimalẽho x oco ci linge ocimalẽho cocimalẽho. Ku pongolola ocimalẽho cocimalẽho x oco ci linge ocimalẽho cocimalẽho.""""""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,umb_Latn,python,"

def triangle_area(a, h):
    """"""Nda tua tenda etendelo lioloneleho kuenda liokilu lia velapo liocina cimue ci soka ndutatu, tu pondola oku popia tuti: >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,umb_Latn,python,"

def fib4(n: int):
    """"""Ocihandeko ci tukuiwa hati, Fib4 ci lomboloka ocimalẽho cimue ci kuete ondimbukiso yi lekisa oku pitĩla ku Fibbonacci, ci lomboloka okuti: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Soneha ocimalẽho cimue ci lekisa oku pitĩla kuocimalẽho ci tukuiwa hati, fib4 (n). Ku ka pitulule.""""""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,umb_Latn,python,"

def median(l: list):
    """"""Oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,umb_Latn,python,"

def is_palindrome(text: str):
    """"""O ka limbuka nda ocisonehua caco cocili ale sio. O ka limbuka nda ocisonehua caco cocili ale sio.""""""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,umb_Latn,python,"

def modp(n: int, p: int):
    """"""Tiukila ko 2^n modulo p (kuenda limbuka atendelo). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,umb_Latn,python,"

def encode_shift(s: str):
    """"""yi tambula ndondimbukiso ya kapiwa locimalẽho coku semũlula. yi tiuka ndondimbukiso ya kapiwa.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Olio li eca olondimbukiso vi kuete ololetala vitãlo, vi lomboloka okuti, omunu o tanga olondaka viaco, o kuete oku vi pitulula olonjanja vitãlo.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,umb_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels upange umue u tambula olongusu kuenje u tiula olongusu ka vi kuete olongusu. >>> remove_vowels (('') ' ' >>> remove_vowels (('abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,umb_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True nda atendelo osi a sangiwa vo listas a kasi vemẽhi lio t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,umb_Latn,python,"

def add(x: int, y: int):
    """"""Omo liaco, tu vokiyako atendelo avali, x kuenda y, oco tu vokiye etendelo liaco okuti, 2, 3, 5 kuenda 12""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,umb_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Tala nda olondaka vivali vi kuete olonduko via lisetahãla. >>> same_chars ((('eabcdzzzz', 'dddzzzzzzzddeddabc') Ocili >>> same_chars ((('abcd', 'dddddddddabc') Ocili >>> same_chars ((('dddddddabc', 'abcd') Ocili >>> same_chars ((('eabcd', 'dddddddddabc') Uhembi >>> same_chars ((('abcd', 'dddddddabddce') Uhembi >>> same_chars (((abcdzzzz', 'dddzzzzzzzddabc') Uhembi """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,umb_Latn,python,"

def fib(n: int):
    """"""Tiukila ketendelo lio Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,umb_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yi lomboloka olumbombo lua ""<"" kuenda "">"". return True nda olumbombo lu fetika lu kuete olumbombo lua sulako. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,umb_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,umb_Latn,python,"

def common(l1: list, l2: list):
    """"""Olio li eca olonepa vivali via lisetahãla.""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,umb_Latn,python,"

def largest_prime_factor(n: int):
    """"""Tioka ketendelo lia velapo lioloñei via velapo vi soka n. Sokolola okuti, etendelo liaco li soka n > 1 kuenda ka li sokisiwa letendelo liatete. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,umb_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n, upange umue u kongela atendelo okupisa ku 1 toke ku n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,umb_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,umb_Latn,python,"

def derivative(xs: list):
    """"""xs yi lomboloka olonepa viocitunda cimue. xs[0] + xs[1] * x + xs[2] * x^2 + .... Tioka kelomboluilo lietepiso li kasi pokati kovitunda viaco. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,umb_Latn,python,"

def fibfib(n: int):
    """"""Ocihandeko ci tukuiwa hati, FibFib ci lomboloka ocimalẽho cimue ci kuete esilivilo lia velapo ci tukuiwa hati, Fibbonacci. Ocihandeko caco ci kuete esilivilo lia velapo.""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,umb_Latn,python,"
FIX = """"""Soneha onduko yondaka yimue yi kuete ocisonehua kuenda yi lekisa etendelo liololetala vi sangiwa vocisonehua. Vokakasia kaco, mu sangiwa olonduko ndeci: 'a', 'e', 'i', 'o', 'u'. Palo, 'y' yi lombolokavo ocisonehua pole, yi lomboloka lika ocisonehua ci sangiwa kesulilo liondaka yaco.""""""

def vowels_count(s):
    """"""Seteka oku vi linga olonjanja vialua. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,umb_Latn,python,"
def circular_shift(x, shift):
    """"""Nda ocimalẽho caco ci kuete ololetala vialua, ci lekisa okuti, ocimalẽho caco ci kuete ololetala vialua.""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,umb_Latn,python,"
def digitSum(s):
    """"""Ocikele Coku soneha ocindekaise cimue ci lekisa ondimbukiso yociluvialuvia kuenda oku yi soneha oco yi lekise etendelo liondimbukiso yaco.""""""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,umb_Latn,python,"
def fruit_distribution(s,n):
    """"""Vupange owu, ove o ka tambula ondimbukiso yi lekisa etendelo liava va panga olomema kuenda olonelẽho via kapiwa vocimbutika colombuto vi sangiwa vocimbutika caco. Ondimbukiso yaco yi lekisa etendelo liosi liolonelẽho kuenda olonelẽho kuenda etendelo liosi liapako a sangiwa vocimbutika caco. Kuami ongangu eyi: fruit_distribution""5(ovilinga kuenda 6 olombuto"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apako kuenda 1 olombuto"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apako kuenda 3 olombuto"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apako kuenda 1 olombuto"") "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,umb_Latn,python,"
def pluck(arr):
    """"""""Nda ocimalẽho cimue ci lomboloka ocanja cimue ca kuata olonepa vivali ka via suilepo, o sukila oku nõla onepa yimue kuenda oku yi tiula. Ocina cimue ci tiula ci sukila oku kala onepa yimue yitito ya kuata olonepa vivali via suilepo. Nda ocimalẽho cimue ci kuete olonepa vivali via suilepo, o sukila oku tiula onepa yimue yi kuete olonepa vitito via suilepo. Ocina cimue ci tiula ci sukila oku tiula onepa yimue ya kuata olonepa vivali via suilepo. Nda ocimalẽho cimue ka ci kuete olonepa vivali via suilepo, o sukila oku tiula ocimalẽho catete.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,umb_Latn,python,"
def search(lst):
    '''O pondola oku sanga atendelo osi a velapo okuti o-o a velapo kuenda o-o a lisoka. Atendelo osi a velapo a kuete esilivilo, a kuete esilivilo lia velapo okuti, ka a lisokele la-o. Atendelo a velapo a kuete esilivilo, a kuete esilivilo lia velapo.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,umb_Latn,python,"
def strange_sort_list(lst):
    '''Ocicapa ci lekisa etendelo liolohuasi, pole, oku ci soneha ci lekisa okuti, etendelo liaco ka li kuete esilivilo.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,umb_Latn,python,"
def triangle_area(a, b, c):
    '''Nda osi yatatu yi kuete olonepa vivali, yi linga ocindekaise. Nda osi yatatu yi kuete olonepa vivali, yi linga ocindekaise.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,umb_Latn,python,"
def will_it_fly(q,w):
    '''Soneha ocindekaise cimue ci ka tiuka ku True nda ocikuata q ci ka palãlã, kuenda ku False nda ocikuata q ci ka palãlã nda ca li kuata (ci lomboloka ulala umue u kuete ocimalẽho cimuamue) kuenda etendelo liovina viaco ka li ka lisokele ale li ka kuata etendelo lia velapo li pondolo w. Ongangu: will_it_fly (([1, 2], 5) â -> False # 1+2 yi kasi posi ya velapo, pole ka yi kuete etendelo lia velapo. will_it_fly (([3, 2, 3], 1) â -> False # yi kuete etendelo lia velapo, pole 3+2+3 yi kuete etendelo lia velapo. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 yi kasi posi ya velapo, pole ka yi kuete etendelo lia velapo. will_it_fly ((([3], 5) â -> True # 3 yi kasi posi ya velapo pole ka yi kuete etendelo lia velapo kuenda yi kuete etendelo lia velapo. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,umb_Latn,python,"
def smallest_change(arr):
    """"""Ocimunga cimue colombongo ci tukuiwa okuti, arr, ci kuete etendelo lia suapo liolohuasi. Ocimunga cimue colombongo ci tukuiwa hati, palindroma, ci lomboloka okuti, ocina cimue ci pondola oku pongoluiwa oku upisa konẽle yikuavo, toke konẽle yikuavo.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,umb_Latn,python,"
def total_match(lst1, lst2):
    '''Soneha upange umue u tava olondimbukiso vivali kuenje o tiula ondimbukiso yimue yi kuete etendelo litito liolondimbukiso viosapi yociluvialuvia. Nda olondimbukiso viaco vi kuete etendelo limuamue liolondimbukiso, tiula ondimbukiso yatete.'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,umb_Latn,python,"
def is_multiply_prime(a):
    """"""Soneha ocindekaise cimue ci lekisa okuti, nda tu yongola oku tenda etendelo limue, tu sukila oku li pitulula olonjanja vitatu.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,umb_Latn,python,"
def is_simple_power(x, n):
    """"""Ocikele cove oku soneha ondimbukiso yi ku lekisa okuti, nda etendelo x li kuete unene umue wa leluka u tukuiwa hati, n, pole, nda etendelo li kuete unene umue wa leluka u tukuiwa hati, false.""""""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,umb_Latn,python,"
def iscube(a):
    '''Soneha ocindekaise cimue ci lekisa etendelo liosimbu lia velapo, kuenje o tiula, o linga o ku: (a) (b) (c) (d) (e) (f) (g) (g) (h) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) ('''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,umb_Latn,python,"
def hex_key(num):
    """"""Olio li tukula etendelo li soka 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Olombinga viatete vi lomboloka 2, 3, 5, 7, 11, 13, 17,... Omo liaco, o sukila oku nõla etendelo liolombinga vikuãimo: 2, 3, 5, 7, B (= ocimalẽho 11), D (= ocimalẽho 13). Kũlĩhĩsa: O pondola oku sima okuti ocimalẽho ci kasi ciwa ale ka ci kasi ciwa, kuenda olondimbukiso A,B,C,D,E,F, vi kasi ño londaka yitito.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,umb_Latn,python,"
def decimal_to_binary(decimal):
    """"""Ocicapa ci ka ku kuatisa oku pongolola ocimalẽho caco oco ci kale ocimalẽho cimuamue. Ocicapa ci ka ku kuatisa oku tiuka kuolombongo, kuenje ci ka ku ĩha ocimalẽho cimuamue. Ocicapa ci ka ku kuatisa oku tiuka kuolombongo, kuenje ci ka ku ĩha ocimalẽho cimuamue. Ocicapa ci ka ku kuatisa oku tiuka kuolombongo, ci ka ku ĩha ocimalẽho cimuamue.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,umb_Latn,python,"
def is_happy(s):
    """"""O pondola oku sanga ocisonehua cimue ci kuete ololetala vialua, pole, ci sukila oku kũlĩhĩsa nda ocisonehua caco ci kuete atosi atatu. O pondola oku sanga ocisonehua cimue ci kuete atosi atatu okuti, a litepa.""""""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,umb_Latn,python,"
def numerical_letter_grade(grades):
    """"""Olio li lekisa okuti, omunu o pondola oku kuata elomboloko liasuapo liulandu umue, nda o yongola oku kuata elomboloko liaco, o sukila oku konomuisa lutate. O pondola oku kuata elomboloko liulandu waco poku kuama olonumbi vi sangiwa vovipama vi kuãimo.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,umb_Latn,python,"
def prime_length(string):
    """"""Soneha ocindekaise cimue ci lekisa etendelo liololetala kuenda o tiuka londuko ya True nda etendelo liaco li kuete etendelo liokaliye ale False nda etendelo liaco ka li kuete etendelo liokaliye.""""""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,umb_Latn,python,"
def starts_one_ends(n):
    """"""Nda tu kuete etendelo limue liwa li tu kuatisa oku kuata elomboloko liulandu waco, tu sukila oku pitulula etendelo liolohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,umb_Latn,python,"
def solve(N):
    """"""Nda tu kuete ovalanduku vakuãla, tu sukila oku nõla ovalanduku ava va soka 1. Ovalanduku ava va soka 1. Ovalanduku ava va soka 2. Ovalanduku ava va soka 3. Ovalanduku ava va soka 4. Ovalanduku ava va soka 5. Ovalanduku ava va soka 6. Ovalanduku ava va soka 7. Ovalanduku ava va soka 8. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10. Ovalanduku ava va soka 10.""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,umb_Latn,python,"
def add(lst):
    """"""Kuopiwa olonduko viosi viocina cimue ka ci kuete etendelo liosimbu, lst. ongolola olonduko viosi viocina cimue ci kuete etendelo liokaliye.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,umb_Latn,python,"
def anti_shuffle(s):
    """"""Ocisonehua ci lekisa okuti, olondaka viosi via tukuiwa vi kuete elomboloko limuamue. Pole, olondaka viosi via tukuiwa vi kuete elomboloko limuamue. Ocisonehua ci lekisavo okuti, olondaka viosi via tukuiwa vi kuete elomboloko limuamue.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,umb_Latn,python,"
def get_row(lst, x):
    """"""O pondola oku sanga ocitumãlo cimue ci kuete olonduko vialua, pole, ka ci sokisiwa lovitumãlo vikuavo. O pondola oku sanga olonduko vimue ndeci, (x1, y1, y2)... oco o limbuke nda ocitumãlo caco ci kuete olonduko vialua. O pondola oku sangavo olonduko vimue ndeci: (x1, y1, y2)... (x2, y2)... (x2, y2)... (x2, y3)... (x2, y2)... (x2, y2)... (x2, y3)... (x2, y4)... (x2, y5)... (x2, y5)... (x2, y6)... (x2, y7)... (x2, y7)... (x2, y8)... (x2, y8)... (x2, y9)... (x2, y9)... (x2, y1)... (x2, y2)... (x2, y1)... (x2, y2)... (x2, y1)... (x2, y2)... (x2, y1)... (x2, y2)... (x2, y3)... (x2, y2)... (x2, y2)... (x2)... (x3)... (x2, y2)... (x2)...).""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,umb_Latn,python,"
def sort_array(array):
    """"""Nda wa sanga etendelo limue liosimbu, o sukila oku li soneha velimi lio Helasi. * Nda wa sanga etendelo liokaliye, o sukila oku li soneha velimi lio Helasi.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,umb_Latn,python,"
def encrypt(s):
    """"""Ociwimbu ci ka pongoluiwa lonjila yimue okuti ololetala viñamiñami viñamiñami viñamiñami viñamiñami viñamiñami viñamiñami viñamiñami.""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,umb_Latn,python,"
def next_smallest(lst):
    """"""O pondola oku sanga atendelo osi a velapo. O pondola oku soneha okalivulu kaco ale oku tioka pondimbukiso yi kuãimo. O ka kuatavo atendelo a velapo nda ka a kuete.""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,umb_Latn,python,"
def is_bored(S):
    """"""O pondola oku sanga olondaka vialua, kuenje ci ku kuatisa oku tenda olonjanja via litepa o fetika oku vangula. Ocisimĩlo ci lomboloka olondaka vi fetika lolondaka ""Ame"". Olondaka viaco vi fetika lolondaka ""Ame"".""""""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,umb_Latn,python,"
def any_int(x, y, z):
    '''Seteka oku linga ondimbukiso yimue yi kuete olonduko vitatu. O pondola oku tiuka nda umue pokati kolonduko viaco o lisoka lovilinga vikuavo vivali, kuenda olonduko viosi via tukuiwa vi lomboloka etendelo liokaliye. O pondola oku tiuka nda ka kua kaile olonduko vikuavo.'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,umb_Latn,python,"
def encode(message):
    """"""Soneha ocindekaise cimue ci lekisa esapulo, noke soneha ocindekaise caco lonjila yimue yi lekisa okuti, o pongolola ololetala viosi kuenda o kapa vokalivulu kaco, oco mu tukuiwe ololetala vi molẽha kovaso yaco.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,umb_Latn,python,"

def skjkasdkd(lst):
    """"""O sukila oku sanga etendelo lia velapo liolohuita kuenda o sukila oku tiula etendelo liolohuita. O sukila oku sanga etendelo lia velapo liolohuita kuenda o sukila oku tiula etendelo liolohuita. O sukila oku sanga etendelo liolohuita kuenda oku tiula etendelo liolohuita.""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,umb_Latn,python,"
def check_dict_case(dict):
    """"""Nda ocimalẽho caco ci kuete olonduko vialivulu osi, ci ka tiuka londuko yokuti True nda olonduko viosi vialivulu osi vialivulu osi vialivulu osi a kuete olonduko vialivulu osi, ale nda olonduko viosi vialivulu osi vialivulu osi a kuete olonduko vialivulu osi a kuete olonduko vialivulu osi, ci ka tiuka londuko yokuti False.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,umb_Latn,python,"
def count_up_to(n):
    """"""Ocivalu ci ka kuata atendelo a tete a velapo kuenda atendelo atete a velapo. Ocivalu ci ka kuata atendelo a tete a velapo kuenda atendelo atete a velapo.""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,umb_Latn,python,"
def multiply(a, b):
    """"""Oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola o pitolola o pitolola o pitolola o pitolola o pitisa o pitisa o pitisa o pitisa o pitisa o pitisa o pitisa o pitisa o pitisa o pitisa o pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,umb_Latn,python,"
def count_upper(s):
    """"""Nda ocimalẽho cimue ci kuete ocimalẽho cimuamue, tenda etendelo liololetala vinene vi kuete olonduko via litepa.""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,umb_Latn,python,"
def closest_integer(value):
    '''Seteka oku linga ocindekaise cimue ci lekisa esilivilo (ocimalẽho) ci lomboloka etendelo kuenje o tiula atendelo a kasi ocipepi. Nda etendelo li kasi ocipepi leliyulo, li pitulula oku lisokisa la 0. Ovolandu >>> closest_integer (((""10"") 10 >>> closest_integer (((""15.3"") 15 Tala: Oku pitulula oku lisokisa la zero ci lomboloka okuti, nda etendelo li kasi ocipepi leliyulo, o sukila oku tiula etendelo li kasi ocipepi leliyulo.'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,umb_Latn,python,"
def make_a_pile(n):
    """"""Nda tua sanga etendelo limue liasuapo, tu sukila oku li kongela oco li linge omapa. Omapa yatete yi kuete etendelo liovawe. Etendelo liovawe a sangiwa vocinyi, li lomboloka:""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,umb_Latn,python,"
def words_string(s):
    """"""O pondola oku sanga olondaka via litepa vovinimbu vimue, kuenje o sukila oku vi pitulula. O pondola oku sanga olondaka via litepa vovinimbu vialua, oku vi pitulula, kuenda oku vi soneha.""""""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,umb_Latn,python,"
def choose_num(x, y):
    """"""Ocivalu caco ci kuata ololetala vivali, x kuenda y kuenje o ka tiula ocimaleho ca velapo ci sangiwa vepuluvi [x, y] kuenda o ka tiula ocimaleho ca velapo ci sangiwa vepuluvi [x, y].""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,umb_Latn,python,"
def rounded_avg(n, m):
    """"""O pondola oku sanga atambululo a suapo poku linga o seteko yimue yoku linga o seteko yaco. Nda o yongola oku sanga atambululo a suapo, kuama onjila yavali: (1) o pondola oku sanga atambululo a suapo poku linga o seteko yaco. (2) o pondola oku sanga atambululo a suapo poku linga o seteko yaco. (3) o pondola oku sanga atambululo a suapo poku linga o seteko yaco.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,umb_Latn,python,"
def unique_digits(x):
    """"""Nda tua sanga etendelo limue liokaliye, tu sukila oku tioka ketendelo liokaliye lia kapiwa ale oku tioka ketendelo liokaliye lia kapiwa.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,umb_Latn,python,"
def by_length(arr):
    """"""Ocilala ci lekisa olonduko violo atendelo osi, oku upisa 1 toke 9, o ka pongolola olonduko violo atendelo osi, kuenda o ka pongolola olonduko violo atendelo osi, oku upisa 1 toke 9. Ocilala ci lekisa olonduko violo atendelo osi, oku upisa 1 toke 9. Ocilala ci lekisa olonduko violo atendelo osi, oku upisa 1 toke 9.""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,umb_Latn,python,"
def f(n):
    """"""Ocivalu cokuti, ci kuata ocimaho cokuti, nda ocimaho caco ci kuete atendelo a soka, ci kuata atendelo a soka, kuenje, ci kuata atendelo a soka, ci kuata atendelo a soka, kuenje, ci kuata atendelo a soka, ci kuata atendelo a soka, kuenje, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci kuata atendelo a soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, ci soka, pamue ci soka, ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci soka, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue ci, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue, pamue,""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,umb_Latn,python,"
def even_odd_palindrome(n):
    """"""Ocicapa 1: Ocicapa 3: Ocicapa 2: Ocicapa 12: Ocicapa 4: (4, 6) Ocicapa: Ocicapa 1: (4, 5) Ocicapa 4: (5, 6) Ocicapa 4: (6, 7) Ocicapa 6: (6, 7) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Ocicapa: (8, 9) Oci: (9, 10) Ocicapa: (9, 10) Oci: (9, 10) Oci: (9, 10) Oci: (9, 10) Oci: (9,) (9, (9,) (9,) (9,) (9,) (9,) (9,) (9,) (""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,umb_Latn,python,"
def count_nums(arr):
    """"""Soneha upange count_nums u tambula etendelo liolohute kuenda u tiula etendelo liovikuata vi kuete etendelo liolondimbukiso > 0. Nda etendelo limue ka li kuete esilivilo, ondimbukiso yatete yi ka kalavo ka yi kuete esilivilo.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,umb_Latn,python,"
def move_one_ball(arr):
    """"""Ocina ca sulako vociseleko caco, ci ka pongoluiwa kuenje ci ka kala pocitumãlo a tunda tete. Nda ociseleko caco ka ci kuete etendelo, ci ka pongoluiwa hati True. Tala: Ociseleko caco ci ka kuata etendelo liololetala via litepa.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,umb_Latn,python,"
def exchange(lst1, lst2):
    """"""Vupopi wocindekaise, o ka linga o seteko yimue yi ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka ecelela okuti o linga ocindekaise cimue ci ka eca ocindekaise cimue ci ka lekisa ocindekaise cimue ci ka lekisa ocindekaise cimue ci ka lekisa ocindekaise cimue ci ka lekisa ocindekaise cimue ci ka lekisa ocindekaise cimue ci ka lingiwa.""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,umb_Latn,python,"
def histogram(test):
    """"""Nda ocisonehua cimue ci kuete ololetala vitito, o sukila oku tiuka lolondaka vimue via li soka. Nda ocisonehua cimue ci kuete ololetala vialua, o sukila oku tiuka lolondaka viaco.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,umb_Latn,python,"
def reverse_delete(s,c):
    """"""Ocina cimue ci ku kuatisa oku sanga ocimaho caco, oku limbuka nda ocimaho caco cocili ale sio. Ocina caco, oku sanga ocimaho cimue ci ku kuatisa oku sanga etambululo lia suapo. Ocina caco, oku sanga atambululo a suapo atiamẽla kocina cimue wa soneha.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,umb_Latn,python,"
def odd_count(lst):
    """"""Nda tua tambula ulala wolondimbukiso okuti, vovikanda viaco mu sangiwa lika etendelo liolondimbukiso, tu sukila oku tiuka londimbukiso yaco. Ondimbukiso yaco yi lomboloka ""etendelo liovina viosi vi kuete etendelo limuamue"".""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,umb_Latn,python,"
def minSubArraySum(nums):
    """"""Nda tua eca etendelo limue liosimbu, tu sukila oku kũlĩhĩsa etendelo liosimbu lia velapo.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,umb_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ocimano ci kuete olonepa vialua, kuenje ovava a kasi oku iñila vocimbaluku. Ocimano ci kuete olonepa vialua, pole, ovava a kasi oku iñila vocimbaluku, a tunda volonepa vialua. Ocimbaluku ci kuete olonepa vialua, pole, ovava a tunda volonepa vialua.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,umb_Latn,python,"
def sort_array(arr):
    """"""Oci linga poku sokiya olonepa viosi viocimalẽho, oku upisa konele ya tete toke konele ya sulako, oku linga ndoco: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,umb_Latn,python,"
def select_words(s, n):
    """"""Nda ocimalẽho caco ci kuete ocileñi cimue, o sukila oku ci kapa vocicapa caco. O pondola oku ci kapa vocicapa caco, pole, o sukila oku ci kapa vocicapa caco.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,umb_Latn,python,"
def get_closest_vowel(word):
    """"""O pondola oku sanga ondaka yimue ya sonehiwa lololetala vinene, pole, ka yi kuata elomboloko liolondaka viosi via sonehiwa velimi lioputu. O pondola oku sanga ondaka yimue ya sonehiwa lololetala vinene pole, ka yi kuete elomboloko liolondaka viosi via sonehiwa velimi lio Helasi.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,umb_Latn,python,"
def match_parens(lst):
    '''O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga ocimalẽho caco. O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga ocimalẽho caco. O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga ocimalẽho caco. O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga ocimalẽho caco.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,umb_Latn,python,"
def maximum(arr, k):
    """"""Ocicapa caco ci kuete etendelo liolo atendelo osi, kuenje ci lekisa etendelo liolo atendelo osi a sangiwa vocipete. Ocapa 1: Oku iñila: arr = [-3, -4, 5], k = 3 Oku tunda: [-4, -3, 5] Ocapa 2: Oku iñila: arr = [4, -4, 4], k = 2 Oku tunda: [4, 4] Ocapa 3: Oku iñila: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Oku tunda: [2] Ocisonehua: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,umb_Latn,python,"
def solution(lst):
    """"""Nda tua sanga etendelo limue okuti ka li kuete atendelo, tu sukila oku tiula etendelo liaco.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,umb_Latn,python,"
def add_elements(arr, k):
    """"""Nda tua sanga etendelo limue ka li kuete atendelo, tu sukila oku pitulula etendelo liaco.""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,umb_Latn,python,"
def get_odd_collatz(n):
    """"""Oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitulula oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola oku pitolola o pitolola o pitolola o pitolola o pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit pit""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,umb_Latn,python,"
def valid_date(date):
    """"""O sukila oku soneha upange u ka ecelela okuti eteke liosãi li kuata eteke limuamue, kuenje eteke liaco li ka kuata eteke limuamue. O pondola oku soneha upange u ka ecelela okuti eteke li likuata leli li kasi, kuenje o ka eca eteke liokaliye. O pondola oku soneha upange u ka ecelela okuti eteke liokaliye li pitĩla, kuenje o ka eca eteke liesanda.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,umb_Latn,python,"
def split_words(txt):
    '''Nda kua molẽha olondaka vimue, pitulula olondaka via litepa, nda ka vi kuete olondaka, pitulula olondaka via litepa, ale ',' nda ka vi kuete olondaka, pitulula etendelo liololetala via litepa viosapi ya tukuiwa.'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,umb_Latn,python,"
def is_sorted(lst):
    '''Nda o kuete olonepa vialua, o sukila oku tiuka lolonduko vimue via lisetahãla, pole, o sukila oku tiuka lolonduko vimue via lisetahãla. Nda o kuete olonepa vialua, o sukila oku tiuka lolonduko vimue via lisetahãla, pole, o sukila oku tiuka lolonduko vimue via lisetahãla.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,umb_Latn,python,"
def intersection(interval1, interval2):
    """"""Ocimunga caco ci kuete olonepa vivali, kuenje onepa yaco yi kuete olonepa vivali via litepa. Ocimunga caco ci kuete olonepa vivali via litepa okuti, onepa yatete yi kuete olonepa vivali via litepa, kuenda onepa yavali yi kuete olonepa vivali via litepa. Ocimunga caco ci kuete olonepa vivali via litepa okuti, onepa yatete yi kuete olonepa vivali via litepa.""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,umb_Latn,python,"
def prod_signs(arr):
    """"""O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga etendelo lioloñei via velapo, poku vi pitulula olonjanja vialua, kuenda oku vi sokisa lolondimbukiso viosi vi kuete etendelo limuamue.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,umb_Latn,python,"
def minPath(grid, k):
    """"""O pondola oku fetika oku talavaya lolombinga viosi, kuenje o nõla olombinga via lisoka ale. O pondola oku fetika oku talavaya lolombinga viosi, kuenje o nõla olombinga via lisoka ale. O pondola oku fetika oku talavaya lolombinga viosi, kuenje o nõla olombinga via lisoka ale. O pondola oku nõla olombinga via lisoka ale. O pondola oku nõla onjila yi kuamiwa. O pondola oku nõla onjila yi kuamiwa. O pondola oku nõla onjila yi kuamiwa. O pondola oku nõla onjila yi kuamiwa. O pondola oku nõla onjila yi kuamiwa.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,umb_Latn,python,"
def tri(n):
    """"""Ocina cimue ci komõhisa ceci okuti, omanu va siata oku lilongisa calua catiamẽla ketendelo lia Fibonacci. Pole, omanu ka va kũlĩhĩle ndomo etendelo liaco li lisoka. Etendelo liaco li sangiwa volondimbukiso vikuãimo ndeci: tri(1) = 3 tri(n) = 1 + n / 2, nda n yi kuete esilivilo. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), nda n yi kuete esilivilo.""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,umb_Latn,python,"
def digits(n):
    """"""Nda ocimalẽho cimue ci kuete atendelo alua, o sukila oku ci tenda okuti ca lisoka leci ci soka 0 (cikale 0 ale 1)""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,umb_Latn,python,"
def is_nested(string):
    '''Ocisimĩlo: Nda wa sanga onepa yimue ya velapo vovipama viosi, o sukila oku yi soneha velimi lio Helasi. Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo: Ocisimĩlo:'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,umb_Latn,python,"

def sum_squares(lst):
    """"""O sukila oku pitulula etendelo lioloñolosi via kapiwa vo listas, loku pitulula atosi osi a sangiwa vo listas.""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,umb_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Seteka oku soneha ondaka yimue yi popia hati, True nda onduko ya sulako yelimi ya sonehiwa lololetala via leluka, pole, ondaka yaco ka yi kuete upopi wa leluka. Kũlĩhĩsa ndoco: ""Olondaka"" vi lomboloka ocimunga colonduko via litepa.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,umb_Latn,python,"
def can_arrange(arr):
    """"""O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga atendelo osi a velapo ale a tĩla, pole, nda ka kuli atendelo aco, o pondola oku tiuka londaka yokuti -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,umb_Latn,python,"
def largest_smallest_integers(lst):
    '''Seteka oku linga ocindekaise cimue ci lekisa okuti, 'a' yi lomboloka etendelo litito lia velapo pokati katendelo osi, kuenda 'b' yi lomboloka etendelo litito lia velapo pokati katendelo osi. Nda ka kuli etendelo limue li sule, o sukila oku li seteka ndoco: None.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,umb_Latn,python,"
def compare_one(a, b):
    """"""Seteka oku linga ondimbukiso yimue yi lekisa etendelo liololetala, ale olondimbukiso vikuavo vi lekisa etendelo liociña cimue, kuenje o tioka kondimbukiso ya velapo.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,umb_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Seteka nda etendelo lia tukuiwa li pondola oku sonehiwa ndetendelo lioloñei vikuãla.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,umb_Latn,python,"
def special_factorial(n):
    """"""Ocivalu co Brazil ci lomboloka ndoco: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! pi n > 0 Ndeci: >>> special_factorial ((4) 288 Ocivalu ci tambula etendelo liosimbu li kasi ndetendelo liokaliye kuenje ci sukila oku tiula ocimalẽho cocivalu caco. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,umb_Latn,python,"
def fix_spaces(text):
    """"""_Ocindekaise-3isonehua cimue ci kuete olonepa vialua, kapa apa pa sangiwa olonepa viosi vi kuete olonduko via velapo. Nda ocisonehua cimue ci kuete olonepa vialua, kapa apa pa sangiwa olonepa viosi vi kuete olonduko via velapo.""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,umb_Latn,python,"
def file_name_check(file_name):
    """"""Ocisonehua ci lekisa onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi osi. Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi osi. Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi osi. Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia ci kuete atosi atatu (0-9), pole, ka ci kuete atosi atatu (0-9). Onduko yocikasia yi kuete atosi atatu (0-9). Onduko yocikasia yi kuete atosi atosi atosi atosi atosi avali (0-9).""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,umb_Latn,python,"


def sum_squares(lst):
    """""""" Ocikele eci ci ka kuata ulala wolonduko viosi. Kuosi kua sonehiwa olonduko, upange waco u ka lingiwa lolonduko violohuasi nda olonduko viaco via li vokiya okuti 3 ka vi li vokiya. Ocikele caco ka ci ka pongolola olonduko viosi via sonehiwa.""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,umb_Latn,python,"
def words_in_sentence(sentence):
    """"""O pondola oku sanga ocindekaise cimue ci lekisa ulala wolondaka vondaka yaco, kuenje o sukila oku tiuka londaka yaco, oco o tẽle oku lombolola ulala wolondaka via tukuiwa vocinimbu caco.""""""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,umb_Latn,python,"
def simplify(x, n):
    """"""Ocina caco ci lomboloka okuti, nda tu yongola oku tenda etendelo limue, tu sukila oku linga etepiso li kasi pokati ketendelo liaco kuenda etendelo li kasi konele yikuavo. Tu sukila oku linga etepiso li kasi pokati ketendelo liaco kuenda etendelo li kasi konele yikuavo.""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,umb_Latn,python,"
def order_by_points(nums):
    """"""Soneha ocindekaise cimue ci lekisa ndomo tu pondola oku tenda etendelo lioloñolosi, loku vi tenda lonjila yimue ya sunguluka.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,umb_Latn,python,"
def specialFilter(nums):
    """"""Soneha ocindekaise cimue ci lekisa etendelo liolo atendelo a velapo 10 kuenda atendelo atete kuenda atendelo a sulako a soka (1, 3, 5, 7, 9).""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,umb_Latn,python,"
def get_max_triples(n):
    """"""O pondola oku sanga ocimalẽho cimue ci lekisa etendelo liolohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa violohuluwa""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,umb_Latn,python,"
def bf(planet1, planet2):
    '''Kuli eci ci soka olombungululu ecelãla: yimue yi kasi ocipepi Lekumbi, yikuavo yi kasi ocipepi lunene wociwe, yikuavo yi kasi ocipepi longongo, yikuavo yi kasi ocipepi longongo, yikuavo yi kasi ocipepi longongo, yikuavo yi kasi ocipepi longongo, yikuavo yi kasi ocipepi longongo, yikuavo yi kasi ocipepi longongo.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,umb_Latn,python,"
def sorted_list_sum(lst):
    """"""Soneha ocimalẽho cimue ci tava okuti ci kuata olondondimbukiso violohaku vimue, pole ka ci kuata olondimbukiso violohaku vialua, kuenje o sanga ulala wolondimbukiso violohaku viosi via kapiwa. Ocina caco ci lomboloka okuti, olonjanja viosi o sukila oku soneha olondimbukiso violohaku vimue, pole lalimue eteke o sukila oku soneha olondimbukiso violohaku vialua.""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,umb_Latn,python,"
def x_or_y(n, x, y):
    """"""O programa yimue ya leluka yi sukila oku tiula ondando y y nda n yi kuete etendelo liokaliye kuenda yi sukila oku tiula ondando y y.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,umb_Latn,python,"
def double_the_difference(lst):
    '''Ocicapa ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, ci lekisa etendelo lioloñei vi kuamiwa, kuenda ci lekisa etendelo lioloñei vi kuamiwa.'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,umb_Latn,python,"
def compare(game,guess):
    """"""Nda omunu wa linga epulilo limue, o sukila oku kũlĩhĩsa ciwa nda omunu waco wa eca etambululo lia sunguluka. O sukila oku kũlĩhĩsa nda omunu wa eca etambululo lia sunguluka, nda wa kuata elomboloko liovina a popia, kuenda nda wa nõla onjila ya sunguluka. O pondola oku linga epulilo eli: [1,2,3,4,5,1] [1,2,3,4,2,]) -> [0,0,0,0,3,3] [0,0,5,0,4] [4,1,0,1] -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,umb_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""O pondola oku sanga onduko yocimalẽho (ocimalẽho cimue) kuenda olonduko violohundo. Olohundo viaco vi ka kuamiwa poku kapa olonduko vikuavo vocimalẽho caco. Onduko yocimalẽho yi ka kuamiwa poku pitulula olonduko violohundo. Onduko yocimalẽho yi ka kuamiwa poku pitulula olonduko violohundo. Onduko yocimalẽho yi ka kuamiwa poku pitulula olonduko violohundo. O pondola oku sanga onduko yocimalẽho kuenda oku tiuka londuko yocimalẽho. O pondola oku sanga onduko yocimalẽho kuenda oku tiuka londuko yocimalẽho. Nda kuli olonduko vivali ale vialua vi kuete olonduko violohundo, o sukila oku nõla onduko yatete.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,umb_Latn,python,"
def cycpattern_check(a , b):
    """"""O sukila oku tiuka ku True nda ondaka yavali ale oku ñualapo kuayo ku kuete ocimalẽho cimue ci kasi vocinimbu catete. cycpattern_check{""abcd"",""abd"") => False cycpattern_check{""hello"",""ell"") => True cycpattern_check{""whassup"",""psus"") => False cycpattern_check{""abab"",""baa"") => True cycpattern_check{""efef"",""eeff"") => False cycpattern_check{""hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,umb_Latn,python,"
def even_odd_count(num):
    """"""Nda tua sanga etendelo limue lia suapo, tu sukila oku tiula etendelo liokaliye li kuete ololetala via litepa.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,umb_Latn,python,"
def int_to_mini_roman(number):
    """"""Nda wa sanga etendelo limue liwa, linga etepiso li kasi pokati ketendelo lio ko Roma, kuenda li tiuka lolonduko via velapo.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,umb_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Nda osi yatatu yi kuete olonepa vitatu, yi linga ocindekaise cokuti, o tetuluila olonepa vitatu via tetuluiwa, kuenje, o kuata elomboloko liaco.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,umb_Latn,python,"
def find_max(words):
    """"""Soneha ocindekaise cimue ci tava oku sanga ulala wolonduko via litepa. Ocisonehua ci kuete olondaka via litepa. Tioka londaka yi kuete etendelo liololetala via litepa. Nda ovinimbu vialua vi kuete etendelo liololetala via litepa, tioka londuko ya tete yi sangiwa vocisonehua.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,umb_Latn,python,"
def eat(number, need, remaining):
    """"""Ove o kasi lonjala kuenje wa lia ale etendelo limue liolo carapace, pole cilo o sukila oku lia vali carapace oco o tẽlise okulia kueteke. o sukila oku tiuka lo array [etendelo liolo carapace via liwa noke lioku lia, etendelo liolo carapace via siala noke lioku lia ] nda ka kua kaile o carapace ya supapo, o lia ol carapace viosi via siala, pole handi o kuata onjala. Ongangu: * lia ((5, 6, 10) -> [11, 4] * lia ((4, 8, 9) -> [12, 1] * lia ((1, 10, 10) -> [11, 0] * lia ((2, 11, 5) -> [7, 0] Olondimbukiso: @number: etendelo liolo carapace wa lia. @need: etendelo liolo carapace o sukila oku lia. @remaining: etendelo liolo carapace via siala vo stock: Constrain: *= 0 = <= 0 * 1000 <= 0 * resting: <= 1000 <= 1000 Have fun = = 1000 :)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,umb_Latn,python,"
def do_algebra(operator, operand):
    """"""Oku pitulula (+) oku tepulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (-)) oku pitulula (- (-)) oku pitulula (-)) oku pitulula (- (-)) oku pitulula (-)) oku pitulula (-o-pitulula (-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,umb_Latn,python,"
def solve(s):
    """"""O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga atosi osi a velapo. O pondola oku sanga ocimalẽho cimue ci ku kuatisa oku sanga atosi osi a velapo.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,umb_Latn,python,"
def string_to_md5(text):
    """"""Nda ocimalẽho caco ci kuete ocimalẽho cimue, o sukila oku tiuka locimalẽho caco. Nda ocimalẽho caco ka ci kuete ocimalẽho, o sukila oku tiuka locimalẽho caco.""""""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,umb_Latn,python,"
def generate_integers(a, b):
    """"""Nda tu kuete olonduko vivali via velapo, tu sukila oku soneha olonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka lolonduko vi soka.""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
