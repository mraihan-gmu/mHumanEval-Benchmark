[
    {
        "task_id": "HumanEval/0",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Njaɓɓo to nder limngal limɗe, woodi limɗe ɗiɗi ɓadiinde ha nder ko ɓuri limgal je ɗum hokki. Misal: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Wattinol kuugal ndu'u woni limngal je mari geeɓeji ɗuɗɗi je mari ɓakkeji je ɗon nder ɓakke. Kuɗe je ɗon nder ɓakkeji ɗon sendira nder limngal je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji je ɗon nder ɓakkeji\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"Limoore limngal je ɗon ɓesda, ɗum footi fe \" a nder be limngal je limngal (limngal je ɓuri famɗugo ɓuri limngal je ɗum hokki) be limngal je sappo (jum lutti ɗon famɗugo ko ɓuri 1). Limoore limngal je sappo. Misal: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"A hokki limtol kujeji nastol be ittuki ha limgal banki je fuɗɗata be limgal meere. kuugal ma woni heɓugo to to wakkati feere limgal limgal ɗon les ceede meere, e ha wakkere man kujeji sey warta True. To naa non sey warta False. Misal: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Ngam limgal limɗe je ɗum hokki, limta Mean Absolute Deviation ha nder je ɗon nder dataset ndu. Mean Absolute Deviation woni feerootiral je ɗon caka koode be caka-haande (mean ha nder haala ndu): MAD = average. x - x_mean. Example: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Wurtin limngal 'delimeter' ha hakkunde kujeji ɗiɗi je ɗon tokkata nder limngal input `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Wattinol kuugal ndu woni fiilol je darna matotiralji ngam parenteesji je ɗon nder babal je ɗon nder babal. Ngam kala matotiral, wurtina darnde je ɓurdi ɓadugo parenteesji. Misalu (() (()) mari darndeji ɗiɗi ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo ɓadugo\"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filtir limngal nastol limgal limɗe tan ngam je mari limgal substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Ngam limngal limɗe je ɗon, hokku limngal je hawti be limngal be ko ɗum waɗata ha limɗe je ɗon nder limngal. Limngal je wala haandi be 0 be ko ɗum waɗata haandi be 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"Ha limngal limɗe je ɗum hokki, wurtina limngal limle je ɓuri ɗuuɗugo je ɗum heɓti ha wakkati je ɗum hokki nder tokkere. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Njaɓu palindrom ɓurɗum seɗɗa je fuɗɗata be senndol je ɗum hokki. Njum algorithm e peewɗum: - Njaɓu ɓurɗum juutugo ɓaawo senndol je ɗum hokki je ɗum palindrom. - Wurtin to keerol senndol je fuɗɗata yeeso senndol palindromic. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Njaɓɓo to string je ɗum hokki woni palindrome \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Wattinolji ɗi'i e' limɗe ɗiɗi a be b je mari 1 be 0 tan. Ngaɗee XOR binary ha nder limɗe ɗi'i e' hoosa wurtinol bo limngal. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Ha nder limgal limgal, hokku go'o ɓurɗo juutugo. Hoosugo arandejum ha to limgal limgal je ɗon ɗuuɗa je juutugo. Hoosugo Walaa to limgal limgal je ɗon wala. >>> ɓurɗo juutugo ((([]) >>> ɓurɗo juutugo ((['a', 'b', 'c']) 'a' >>> ɓurɗo juutugo ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Waylitin limngal je ɓuri sendugo je limɗe je ɗiɗi a be b >>> biggest_common_divisor ((3, 5) 1 >>> biggest_common_divisor ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Wurtinol limtol ko'e fuɗɗorde diga ɓurɗum seɗɗa yaaki ɓurɗum juutugo nder limngal ko'e nastugo >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"Wurtinugo string je mari limɗe je ɗon mari keerol-wonnde je fuɗɗama diga 0 yaaki n hawti. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"Wattinol ngol, andin limgal limɗe feere-feere (ba jaangol) ngol ɗon nder >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Wattinol ndu'u woni dabare darnugo dabareji fijirde nder dabare ASCII. Kuugal maaɗa woni faaruki dabareji fijirde nder limngal integers je ɗon fotta be beats ɗuɗɗi. Ɗo'o ɗo'o e darnde: 'o' note, lasts beats 'o, beats four, lasts two beats, lasts one, lasts one >>> parse_music. 'o o.\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"Njaɓu no ɗuuɗal nde substring je ɗum hokki heɓata nder asli. Limta ko hawti. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Wattinol woni limngal je limngal je limngal je 'zero' ha 'nine'. 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' e 'nine' je laatii. Wattinol limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal\"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"Ha limgal limɗe (ɓurɗe ɗiɗi) suɓo nden lorna limɗe ɗiɗi je ɓadi ha nder ko'e maɓɓe nden lorna ɗe nder no ɓe ɗo lorna (ɗatal pamaral, limngal mawɗum). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Limgal limɗe (ɓo ɓurna kujeji ɗiɗi), waɗu jaɓɓol limngal, ngam limngal ɓurngal famɗugo warta 0 e ɓurɗum mawnugo warta 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter hokki limgal ko laatii nder Python ngam intejairji tan >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"Luttugo wurtinol string >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"Ngam limgal n, taw limgal ɓurngal mawnugo je sendata n bana woore, je ɓuri n >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Limoore limtol mawɗum limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal limngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal ngal\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"Ha nder limgal limɗe je limgal, itta kuuje je ɗon ɓurna nde woore. Ndima kuje je ɗon ɗon bana nder ko wurtini. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"Ngam string je ɗum hokki, wayla ɗerewol pamaro ha ɗerewol mawɗum be ɗerewol mawɗum ha ɗerewol pamaro. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter ɗatal ko nastinol ngol strings tan ngam je fuɗɗata be prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Wurtin limɗe je ɗon nder limgal. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Wurtin goonga to limgal je ɗum hokki woni limgal arandejum, be fewre to naa non. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"x's woni coefficients polynomial. find_zero heɓii x bana poly ((x) = 0. find_zero hokkata tan koode zero, koo to woodi ɗuuɗal. Nden maa, find_zero hoosi limgal x's je mari limgal koefficients je mari koefficient je wala wala wala ngam ɗum ɗon tabbitina dabare. >>> round (((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"Njaɓɓoto polynomial be coefficients xs ha wakkere x. hokkitirgo xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"Kuugal ndu hoosi limtol l e hokkata limtol l' bana l' ɗon nandi be l ha indeji je footi sendira bee tati, ha nde limtol ma'a ha indeji je footi sendira bee tati fotti be limtol indeji je fotti be l, amma je ɗon feere. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Waylitin kuuje feere-feere nder limngal >>> feere-feere (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Luttino ko ɓuri ɗuuɗugo nder limngal. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Luttino limgal nde limngal 7 ɗon laara nder limɗe je lesdi n je footi sendira bee 11 mala 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"Kuugal ndu hoosi limtol l e hokkata limtol l' bana l' ɗon nandi be l ha indeji je ɗon feere, ha nde limtol ma'a ha indeji je ɗon feere je ɗon fotti be limtol indeji je ɗon feere je l, amma je ɗon feere. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"jaɓan bana ko nastinol wurtinol je ɗon wurtina be kuje encode_cyclic. Wurtinol wurtinol wurtinol je ɗon wurtina.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"wartirta string je ɗon mari kode be geeɓe je ɗon yahra be limɗe tati.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib hokkata limngal n-ɓam je limngal Fibonacci nden bo'o dum prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero hoosi limngal limɗe je limgal ngal. ɗum hokkata True to woodi kuuje tati je limgal ngal limata to wala, be False to wala non. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"Njaɓu laawol je ɗon laaɓi haa timmoode. mootaji n ɗon yahra wala haa nyaamo; ha wakkere man, mootaji feere n ɗon yahra nyaamo haa nano. mootaji ɗiɗi fuɗɗii be woɗɗitaaki. mootaji fu ɗon yahra bee jaawal gootol. mootaji ɗiɗi ɗon wi'a ɓe ɗon saɗdo to mootaji je yahra nano haa nyaamo ɗon saɗdo moota je yahra nyaamo haa nano. seini, mootaji ɗin ɗon cembiɗɗi haa timmoode; ngam maajum, ɓe ɗon yahra nder laawol maɓɓe bana to ɓe saɗdaayi. kuugal man ɗon wurtina limgal saɗdoji bana non.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Listi je ɗon hoosa be kujeji je ɓeydake 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ɗon hoo'a limngal limɗe je limgal je limgal. ɗum hokkata True to woodi kujeji ɗiɗi je limgal je limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal maɓɓe limgal\"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Waylitin lamba lamba lamba limngal limngal x ha lamba. wartira darol limngal ɓaawo waylitol. limɗe lamba limngal les 10 >>> waylitin_lamngal ((8, 3) '22' >>> waylitin_lamngal ((8, 2) '1000' >>> waylitin_lamngal ((7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Luttugo be juutol be babal je ɗon hooti ngam triangle. >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Lammol limɗe Fib4 woni limol nanndi be limol Fibbonacci ngol ɗo mari tinndol bana ni: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Winda kuugal ngam limtugo limol n-ɓre nder limol limol fib4. Naftirtaa jaɓɓol. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Luttol ko woni nder limngal l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"Hittinugo to string je ɗum hokki woni palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Waylitin 2^n modulo p (hakki limɗe). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"jaɓan bana string je ɗum wurtini be kuje encode_shift. Wurtinugo string je ɗum wurtini.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"wartirta string je ɗon ɓadda ta'alugo kala ɗerewol be 5 ha nder ɗerewol alphabet.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels woni kuugal je hoosi string be hokkata string bila vowels. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True to be all numbers in the list l are below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Wattin limɗe ɗiɗi x e y >>> ɓesdugo ((2, 3) 5 >>> ɓesdugo ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"Njaɓɓo to kalimaaji ɗiɗi mari kalimaaji nanndirɗi. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Luttino limgal Fibonacci n-ɓam. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets woni string \"<\" e \">\". return True to be kala bracket fuɗɗam woodi bracket timmugo. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Wurtinugo kujeji je hawti je limɗe ɗiɗi. >>> hawti (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> hawti (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Hokkitugo ɓurɗo mawnugo nder ɓurna ɓurna n. Hokkitugo n > 1 nden naa ɓurna. >>> ɓurɗo mawnugo nder ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓurna ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ\"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n woni kuugal je limta limɗe daga 1 ha n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets woni string \"(\" e \")\". return True to be be bracket je fuɗɗata mari bracket je timmi. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() \") True >>> correct_bracketing(\")\"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs holla coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"Lammol limgal FibFib woni limgal nanndi be limgal Fibbonacci je ɗon mari tinndol bana ni'i: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Winda kuugal ngam limtugo limgal n-ɓre nder limgal limgal fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"Windi kuugal vowels_count je ɗon jaɓa string je hollata kalima bana ko nastinetee nden ɗon lorna limgal vowels ha string. Vowels ha nder haala ndu'u je 'a', 'e', 'i', 'o', 'u'. Ha ɗo, 'y' bo'o vowel, amma to ɗum ha ragare kalima ndu. Misal: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"Ɓeyda doolugoji foondolji.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift dijitji inteja x, shift dijitji nyaamo be shift be warti jahol bana string. To shift > limgal dijitji, return dijitji wayli. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Kuugal Windi kuugal je hoosi string bana nastugo e hokkata limtol koode ASCII je ɓurna fu. Misal: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"Nder kuugal ndu, a hokkay a string je hollata limgal apples be orangeji je ɗon sendira nder ngesa je ɗon mari apples, orangeji, be mango. Ha tawde string je hollata limgal orangeji be apples be integer je hollata limgal ɓikkoy je ɗon nder ngesa soɓi limgal ɓikkoy mango je ɗon nder ngesa. ngam misaalu: fruit_distribution\"5(apples be 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples be 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples be 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples be 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"To a hokki matotiral je hollata laral lekki je mari nodes je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe limɗe je wala limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe lim\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''A hokkaa limngal limɗe je wala wala limgal. Wurtin limngal je ɓuri ɗuuɗal je ɓuri wala, be limngal je ɓuri limngal je limngal je limngal je limngal je limngal je limngal je limngal je limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal lim'''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''Listi limɗe je ɗon nder limɗe je ɗon nder limɗe je wala limngal, je ɗon nder limɗe je wala limngal. Limngal je wala limngal, je fuɗɗata be limngal je wala limngal, nden je limngal je wala limngal je ɗon nder limɗe je ɗon nder limngal, nden je wala limngal je wala limngal. Misaalu: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''Ko ɗum juutal be pecce tati je triangle. Wurtin pecce tati je triangle je ɗon hauti be pecce 2 to be pecce tati je ɗon hauti be triangle je ɗon boɗɗum. To naa non, hokkitin -1 Be pecce tati je ɗon boɗɗum to limtol pecce ɗiɗi je ɗon ɓuri pecce tataɓre. Misal: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''Windi kuugal je hokkata True to kuje q foofta, be False to wala non. Kuje q foofta to ɗum je mari njayri (ɗum limte palindromic) be limtol kujeji ma'a je les mala je fotti be je mari ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓurna ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ ɓ'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"E nder limngal ngal, limngal limngal ngal, limngal limngal ko ɓuri ɗuuɗal nder limɗe je haani waylita ngam waɗugo limngal ngal palindromic. Limngal palindromic dum dum limngal je ɗon jaɓa ko wo'oto yeeso e ɓaawo. Nder waylitaare woore, a waaway waylita limngal go'o ha go'o. Misalu: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''Windi kuugal je jaɓay limɗe ɗiɗi je limɗe je ɗon mari limgal limɗe nder limɗe je limɗe je lesdi. to limɗe ɗiɗi je mari limɗe limɗe je ɗon mari limɗe je ɗon lesdi, hokku limngal arandejum. Misaluji total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Windi kuugal je hokkata goonga to limngal ngal hokkaa woni kawtal limɗe arandeeje 3 nden boo ɗum fewre to naa non.\"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Kuugal maaɗa woni wurtinugo kuugal je hokkata goonga to limgal x woni semmbe n be fewre ha nder wakkereji feere. x woni semmbe n to n**int=x Misal: is_simple_power(1, 4) => goonga woni_simple_power(2, 2) => goonga woni_simple_power(8, 2) => goonga woni_simple_power(3, 2) => fewre woni_simple_power(3, 1) fewre => woni_simple_power(5, 3) => fewre \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''Winda kuugal je hoosi limngal a je ɗon hoosa True to inde nde woni cube je limngal je ɗon hoosa. Njaɓu: a footi tammi ko je nastinol ngol je ɗon hoosa. Misalu: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"\"A heɓii kuugal je jaɓata limngal je hexadecimal bana string e limta limngal je hexadecimal je laatii prime (number prime, ko prime, woni limngal je ɓuri 1 je wala product je limɗe natural je ɓuri famarde ɗiɗi). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So on lati andina limngal je limɗe je ɗo'o: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Note: on footi tammi ko nastata e goonga koo bo wala, e alaamaji A,B,C,D,E,F, e ɗo'o e mawɗum. Example: For num \"AB\" the output should be num = 1. For num = 1077E the output should be 2. For num \"AB\" should be num = 1.331EDA\" the num should be num = 4. \"ABC\" should be num = 4.123ABCD 6.06745DEF \"For the output should be num = 2.2020\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"On heɓay limgal nder ɗatal decimal be kugal mon woni waylugo man ha ɗatal binary. Kugal man haani warta string, be kala ɗatal darnugo limgal binary. Kole ɗatal nder string be '0' mala '1'. Wodi ɗatalji feere 'db' ha fuɗɗam be timma string. Ɗatalji feere ɗon ngam wallugo be ɗatal. Misal: decimal_to_binary ((15) # wartay \"db1111db\" decimal_to_binary32) # wartay \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"A hokki on string s. kugal ma'a woni foondu to string ɗon be happy mala naa non. string ɗon be happy to juutal ma'a ɗon be 3 be kala ɗerewol 3 je ɗon ferɗoodirɗi Misal: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"Ɗo woni jaahargal sakkitol e jaanginoowo on haani hokkugo limte to jaangoɓe. Jaanginoowo on ɗon waɗa algoritma maako ngam limte. Ɗun tan woni, o majjini ko o huwtiniri ngam limte. O hokki ma limte limte limte jaangoɓe feere-feere, nden a haani winda kuugal je footi wurtina limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte limte lim\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Winda kuugal je hoosi string je hokkata True to string man woni lamba prime ko False to wala non Misal prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"Wattinol limngal pottidal n, hokkitir limngal limɗe limɗe pottidal n-digit je fuɗɗata ko timmi be 1. \"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"\"To a hokki limngal je ɗon je ɗon je N, hokku limngal je ɗon je limɗe je nder binary. Misaalu To N = 1000, limngal je ɗon je limɗe je ɗon 1 output be \"1\". To N = 150, limngal je ɗon je limɗe je ɗon je limɗe je ɗon je 6 output be \"110\". To N = 147, limngal je ɗon je limɗe je ɗon je limɗe je ɗon je limɗe je ɗon je 12 output be \"1100\". Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"Woni limngal ngal wala limɗe je wala wala limgal lst. hawtu limɗe je ɗon mari limɗe je wala limngal. Misalu: hawtu (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"Windi kuugal je hoosi string e hokkata bayanu je ɗum waɗi. Bayanu je ɗum waɗi string, je kalimawolji fuu (je sendira bee space) ɗon waylita bee kalimawol kesol je kalimawolji fuu ɗon larni nder darnde je ɗon ɓesda do darnde ascii. Njaɓɗum: A haani aynugo darnde kalimawolji be wakkereji je wala nder wolde. Misalu: anti_shuffle ((('Hi') hokkata 'Hi' anti_shuffle ((('hello') hokkata 'ehllo' anti_shuffle (('Hello World!!!') hokkata 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"A hokkata limngal 2 dimensional, bana limngal je ɗon nder, je ɗon nandi be matrix, sai ni, wala matrixji, kala laral footi mari limngal kolte feere. To en hokki lst, be integer x, ɗaɓɓu integerji x nder limngal, nden en lorna limngal tuples, [(x1, y1), (x2, y2) ...] non non ngam kala tuple je ɗon coordinate - (row, columns), fuɗɗugo be 0. Sort coordinates arande bee laral nder laawol ɓesdugo. Ɗonmaa, sort coordinates of the row by columns in descending order. Misalu: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(], 1) [] == == row [1, 2, 3, 2], == row [2, 3]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"Woni matotiral limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe limɗe limɗe limɗe je wala limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe lim\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Wurtin kuugal encrypt je hoosi string bana daliilaji nden warti string je ɗon ɓurna be alphabet je ɗon waylita. Alphabet haani waylita be laabi je ɗerewolji ɗon waylita les ha ɗiɗo ɓesda ha wakkere ɗiɗi. Misalu: encrypt (('hi') warti 'lm' encrypt (('asdfghjkl') warti 'ewhjklnop' encrypt (('gf') warti 'kj' encrypt (('et') warti 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"On hokkaa limgal limɗe je limgal. Winda kuugal next_smallest (() je hokkata limngal ɗiɗaɓal nder limgal. Return None to wala limngal non. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\"A hokkay ma woldeji, be kugal ma woni limugo limgal bolle je ɗon mari ɓernde. Ɓernde je ɗon mari ɓernde woni wolde je fuɗɗata bee wolde \"I\". Woldeji ɗon mari keerol be '.', '?' mala '!'. Misalu: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''Wurtinugo kuugal je jaɓata limɗe 3. Wurtinugo goonga to limngal go'o je fotti be limɗe je lutti ɗiɗi, e limɗe fuu ɗe limɗe je wala limgal. Wurtinugo fewre ha nder wakkere feere. Misalji any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"Windi kuugal je hoosi habaruuji, e ɓoorna nder laabi je ɗon waylita ɗerewolwol, e waylita ɗerewol je ɗon ɓoorna ɗerewol je ɗon ɓadake ɗerewol ngol nder ɗerewol English. Misalu: >>> ɓoorna (('test') 'TGST' >>> ɓoorna (('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"On hokkaa limngal limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe limɗe je limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe lim\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"To ɗum hokki majaliiru, hokku True to majaliiruji fuu ɗo mari ɗerewol nder ɗerewol pamaro malla majaliiruji fuu ɗo mari ɗerewol pamaro, to naa non hokku False. Kuugal man sey hokku False to majaliiru ndu walaa. Misaalu: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) sey hokku True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) sey hokku False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) sey hokku False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) sey hokku False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) sey hokku True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Wurtin kuugal je hoosi limngal je wala limngal je wala limngal je ngal jaɓata nden je hokkata limngal je limɗe je aranɗe je n je laatii limɗe je fuɗɗi be je lesɗe n. Misal: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Wurtin kuugal je hoosi limɗe je ɗiɗo je ɗon hoosa e hokkata ko ɗum waɗata ha limɗe je go'o. Misal: ko ɗuuɗi be 148, 412) hokkata 16. ko ɗuuɗi be 19 28, 72. ko ɗuuɗi be 2020, 1851) hokkata 0. ko ɗuuɗi be 14, 15 hokkata 20.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"Woni string s, limta limgal vowels mawɓe nder indeces je ɗon. Misalu: count_upper (('aBCdEf') hokkata 1 count_upper (('abcdefg') hokkata 0 count_upper (('dBBE') hokkata 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''Wurtin kuugal je hoosi daraja (string) je hollata limngal e je hokkata intejaar je ɓadi maagal. To limngal je ɗon hauti be intejaarji ɗiɗi, soɓin ɗum diga wala. Misal >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 Njaɓo: Soɓinugo diga wala ma'ana to limngal je hokkaa je ɗon hauti be intejaarji ɗiɗi, limngal je haani hoosugo woni limngal je ɓadi maagal diga wala. Misal: nearest_integer ((\"14.5\") haani hoosugo 15 e closest_integer ((\"-14.5\") haani hoosugo -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"Woni limngal ngal n, sey ngaɗa dabareji kaa'e n. Dabare arandejum woodi kaa'e n. Limgal kaa'e nder dabare je ɗon ɓaawo ɗon woni: - limngal je ɗon ɓaawo ɗon je wala limngal je wala limngal je ɗon ɓaawo ɗon je wala limngal je ɗon ɓaawo ɗon je wala limngal je ɗon ɓaawo ɗon je wala limngal je ɗon ɓaawo ɗon. Wurtin limgal kaa'e nder kala dabare nder limngal, to kuje je ɗon nder inde i hollata limgal kaa'e nder dabare (i+1). Misalu: >>> make_a_pile ((3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"On heɓay wolde je ɗon nder wolde je sendira bee commas ko bo'o. kuugal mon woni senduki wolde je nder woldeji nden lorna woldeji je ɗon nder wolde. Misalu: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"Kuugal ngal hoosi limɗe ɗiɗi je ɗon mari ɓesdugo x be y nden hokkata limngal je ɓuri ɗuuɗugo je ɗon nder limngal [x, y] hawti be man. To wala limngal non, kuugal ngal hoosan -1. Misalu: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"On hokkaa limɗe je ɗiɗo je ɗon ɓura n be m, be kuugal mon je limugo limɗe je ɗon ɓura n be m (ha nder man n be m). Lonndi jaabol man ha limngal je ɓadake e wartira ngol binary. To n ɓuri m, lorna -1. Misal: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b11\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Bindol limɗe je ɗon mari ko woni nder limɗe je ɗon mari ko woni nder limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe limɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe ɗe\"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"\"To ɗum hokki maɓɓorde limɗe je ɗon nder hakkunde 1 be 9, sey a suɓɓa limɗe je ɗon hakkunde 1 be 9, sey a suɓɓa maɓɓorde je ɗon nder maɓɓorde nden, nden a suɓɓa kala lamba bee innde maɓɓorde je ɗon nder maɓɓorde nden. Misalu: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> suɓɓa maɓɓorde -> [1, 1, 2, 2, 3, 4, 5, 8] -> suɓɓa maɓɓorde -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] To maɓɓorde nden wala ko mari, so maɓɓorde nden wala ko mari, a suɓɓa maɓɓorde: arr = [] return [] If the array has any odd number ignore it: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55, return - 1] - 'One' \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"Naftirgo kuugal f je hoosi n bana parameter, e hokkata limngal manngu n, bana daraja kuuje je inde i woni factorial i to i woni even ko sum limɗe daga 1 yaaki i to naa non. i fuɗɗii daga 1. factorial i woni kawtal limɗe daga 1 yaaki i (1 * 2 * ... * i). Misal: f(5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"Woni limngal je ɗon naftirta n, hokku limngal je ɗon mari limngal palindrom je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon limngal je ɗon limngal je ɗon limngal je ɗon limngal je ɗon limngal limngal limngal je ɗon limngal limngal limngal je ɗon limngal limngal limngal je ɗon limngal limngal je ɗon limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"Winda kuugal count_nums je hoosi limngal ngal limɗe je ɗon mari limgal ko mari limɗe je limgalji je mari limɗe je limgalji je ɓuri 0. To limngal je wala, nden limngal arandejum je mari limɗe je limgalji je wala: misalu, -123 mari limɗe je limgalji -1, 2, be 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums (([1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"E woodi array 'arr' je limɗe N je ɗon nder array je ɗum jaɓay ha nder random. Kuugal maaɗa woni tabbitinugo to ɗum waaway heɓugo array je ɗum jaɓay ha nder non-diminirating order ta waɗugo kuugal ndu'u ha nder array: A heɓii jaɓugo kuugal shift je lawol. Ɗun e go'o e shift je lawol ma'ana jaɓugo ko'e elementji array je ha nder go'o ha nder laawol je lawol. Element je ragare nder array je jaɓay ha nder position je fuɗɗam ha nder array i.e. 0th index. To ɗum waaway heɓugo array je ɗum jaɓay ta waɗugo kuugal ndu'u ha dow nden bo ɗum warti True else return False. To array je ɗum hokki wala, nden bo ɗum warti True. Note: The given list is guaranteed to have unique elements. For example: move_one_(ball[3, 4, 5, 2]True Explanation: By performining right 2 operations, non-diminirating order can be achieved for the array. [1, 3, 4, 5, 2]It is not possible to perform right-decreasing order for the array.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"Nder kuugal ndu, a waɗay kuugal je hoosi limɗe ɗiɗi, nden bo'o hollata ko ɗum waaway waɗugo sendirki kuuje hakkude maaje ngam waɗugo lst1 limngal limɗe je mari limɗe je ɗon. Wala limgal limgal kuuje je sendirteeji hakkude lst1 e lst2. To ɗum waaway sendirki kuuje hakkude lst1 e lst2 ngam waɗugo kuuje lst1 je mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon mari limɗe je ɗon ɗon mari limɗe je ɗon ɗon mari limɗe je ɗon ɗon ɗon mari limɗe je ɗon.\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"To ɗum hokki a string je hollata ɗerewol je ɗon sendira bee wakkere, hokku ɗerewol je ɗon limta be limtol je ɗon hawta. To ɗerewolji feere ɗon mari ko hawti, hokku fuu. Misaalu: histogram ((a b c) == {'a': 1, 'b': 1, 'c': 1} histogram ((a b b a') == {'a': 2, 'b': 2} histogram ((a b c a b') == {'a': 2, 'b': 2} histogram ((b b a') == {'b 4}: histogram ((a b a') == {'b 4}) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Kuugal Min hokki ɗerewolwol ɗiɗwol s e c, sey a itta kala ɗerewol nder s je fotti e kala ɗerewol nder c nden a foonda to ɗerewol ngol heɓata ɗum palindrom. Ɗerewol ngol noddete palindrom to ngol jaŋgi bana ko yahata yeeso. A haani wartugo ɗerewol ngol heɓata ɗerewol ngol heɓata e True/False ngam foonda. Misal ngam s = \"abcde\", c = \"ae\", ko heɓata haani wonte ('bcd',False) Ngam s = \"abcdef\", c = \"b\" ko heɓata haani wonte ('acdef',False) Ngam s = \"abcdedcba\", c = \"ab\", ko heɓata haani wonte ('cdedc',True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"\"Nder limgal limɗe, to kala limngal hawti e limɗe tan, hokku limngal. Koleedi i nder ko wurtata haani \"jum limgal limɗe je wala limngal nder limngal i nder ko wurtata\". ɗo'o i's fuu haani waylinaa bee limgal limɗe je wala limngal nder limngal i'th nder ko wurtata haani. >>> odd_count['1234567']) [\"jum limgal limɗe je wala limngal 4n nder str4ng 4 nder 4nput.\"] >>> odd_count['3',\"111111\"]) [\"jum limgal limɗe je wala limngal 1n nder str1ng 1 nder 1nput.\", \"jum limgal limɗe je wala limngal 8n nder str8ng 8 nder 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"Woni matotiral limɗe je limɗe, taw limtol ko ɓuri famɗugo nder matotiral je limɗe je wala wala. Misal minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"On hokkaa dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji je ɗon nder dabareji\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"Nder ɗerewol Kata, a haani tawtoreeki limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe je wala limɗe limɗe limɗe je wala limɗe limɗe je wala limɗe limɗe limɗe limɗe limɗe je wala limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe lim\"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"\"To a hokki string s be limngal asli n, a heɓii kuugal je hokkata limngal bolle fuu diga string s je mari bolle n, ngam bolle ɗen wonan nder string s. To string s wala ko mari, nden bo kuugal je hokkata limngal wala ko mari. Njaɓaa: a footi tammi string je nastin ɗon mari bolle bee jaɓɓorɗe tan. Misalu: select_words ((\"Mary had a little lamb\", 4) ==> [\"little\"] select_words ((\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words\" simple white space\", 2) ==> [] select_words ((\"Hello world\", 4) ==> [\"world\"] select_words ((\"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"On hokki wolde. kuugal mon woni heɓugo wolde ɓadake wonugo hakkunde konsonanteji ɗiɗi diga nyaamo wolde (ka'a e ɓadake). Wolde ha fuɗɗam e timmoode wala limgal. Wurtin wolde wala wolde to on heɓayi wolde je ɗon dow. On waaway tammi wolde je ɗon nder wolde ɗon e woodi ɗerewol Engelewal tan. Misal: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''A hokkaa limtol limtol limtol ɗiɗo, limtol ɗiɗo fuu hawti e '(' ko ') ' tan. Kuugal maaɗa woni laarugo to ɗum waaway hawtuki limtol ɗiɗo nder laawol feere, ngam ɗum waɗa limtol ngol wooɗi. Limtol S hoosi wooɗi to e to limtol S fuu ɗon fotti. Misalu: limtol '((()) ' wooɗi, to limtol '()) ' wooɗaa. Wurtin 'Yes' to woodi laawol waɗugo limtol wooɗi, nden wurtin 'No' to naa non. Misalu: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"Ngam limngal ngal e woodi limɗe je ɗon nder limngal ngal, hokki limngal je ɗon nder limngal ngal, hokki limngal je ɗon nder limngal ngal. Misaalu 1: Njaɓɓorgal: arr = [-3, -4, 5], k = 3 Njaɓɓorgal: [-4, -3, 5] Misaalu 2: Njaɓɓorgal: arr = [4, -4, 4], k = 2 Njaɓɓorgal: [4, 4] Misaalu 3: Njaɓɓorgal: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Njaɓɓorgal: [2] Njaɓɓorgal: 1. Duuɗe limngal ngal laato nder limngal [1, 1000]. 2. Kujeji nder limngal ngal laato nder limngal [-1000, 1000].\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"Woni limngal ngal wala limɗe je wala wala limgal, hokku limtol ko woni nder limle je wala limgal je ɗon nder darnde je ɗon. Misalji soluction (([5, 8, 7, 1]) ==> 12 soluction (([3, 3, 3, 3, 3]) ==> 9 soluction (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"Ngam ɓe hokki matotiral ngal wala wala limɗe je ɗon nder aranndeere e limɗe je ɗon nder aranndeere, hokku limtol limɗe je ɗon nder aranndeere je ɗon nder aranndeere. Misaalu: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"To ɗum hokki limngal n je ɗon naftirta, hokku limngal je limɗe je wala limngal nder collatz. Collatz je ɗon naftirta nder limle je ɗon naftirta nder limle je limɗe wala limngal je limngal je limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"On lati windi kuugal je ɗon tabbitina tamre nde a hokki on nden ɗon hoosa goonga to tamre nden ɗon tabbitina to naa non Nyalɗum. Tamre ɗon tabbitina to kala dookaaji je ɗon ɗo ɗo ɗo ɗo ɗo ɗo ɗo: 1. Tamre nde wala wala wala. 2. Limgal balɗe naa les 1 malla ɓura balɗe 31 ngam lebbi 1,3,5,7,8,10,12. E limgal balɗe naa les 1 malla ɓura balɗe 30 ngam lebbi 4,6,9,11. E, limgal balɗe naa les 1 malla ɓura balɗe 29 ngam lewru 2. 3. Balɗe naa les 1 malla ɓura 12. 4. Tamre haani nder dabare: mm-dd-yy-yy misalu: valid_date (('03-11-2000') => True_valid_date (('15-01-2012') => False valid_date (('04-040-20') => False_valid_date (('06-04-2020') => True_valid_date (('06/04/2020') => False\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''Ngam limgal kalimaaji, hokku limgal kalimaaji je sendake ha dow babal je wala babal je wala nder deftere je haani sendugo ha dow commas ',' to wala commas je haani sendugo limgal ɗerewol je ɗon nder ɗerewol je wala nder ɗerewol alphabet, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Misal split_words ((\"Hello world!\") â -> [\"Hello\", \"world!\"] split_words ((\"Hello,world!\") â -> [\"Hello\", \"world!\" split_words\" ((abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''Woni limngal limɗe, hokku ko ɓe nder limngal, hokku ko ɓe nder limngal je ɗon ɓesda. To limngal ɗon mari limɗe je ɗon ɓesda, hokku False. Ndima limɗe je wala wala je ɗon ɓesda be limɗe je ɗon laatii. Misaluji is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"\"Nder ko ɗum hokki on wakkatiiji ɗiɗi, to wakkatiiji kala woni ɗiɗo limɗe. Misalu, wakkatiiji = (fuɗɗam, timmoode) = (1, 2). Wakkatiiji ɗi'i maɓɓitiiɗum e maani wakkatiiji ɗi'i (fuɗɗam, timmoode) hawti fuɗɗam e timmoode. Wakkatiiji kala, ɗum tammi fuɗɗam maajum ɓuri ko fotti e timmoode maajum. Kuugal ma ɗum andugo to juutal keerol wakkatiiji ɗi'i ɗo limngal arandewol. Misalu, keerol wakkatiiji ɗi'i (1, 3), (2, 4) woni (2, 3) je juutal ma'a woni 1, je wala limngal arandewol. To juutal keerol ngol woni limngal arandewol, hokku \"YEE\", to naa non, hokku \"Naa\". To wakkatiiji ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi'i ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi ɗi\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"A hokkaa limngal ngal limɗe fuu, nden a haani wartugo limngal limɗe fuu hawti e ko ɗum waɗata ngam ko limɗe ɗen hollata, darniraaɗum 1, -1, ko bo 0.\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"E nder grid je mari rowji N be columnji N (N >= 2) be ko woni integer k, kala cellji je grid je ɗon mari daraja. Ko woni integerji je nder range [1, N * N] hawti be man ɗon don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don don\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"Yimɓe fuu anndi tokke Fibonacci, limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle limle lim\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"Wattinol limngal n, hokkitirgo ko limɗe je ɗon nder limngal ngal. Wattinol 0 to limɗe fuu ɗon nder limngal ngal. Misalu: limɗe ((1) == 1 limɗe ((4) == 0 limɗe ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''Wurtin kuugal je hoosi string bana nastugo je mari ɓakkeji kare. Kuugal man haani wartugo True to be be tan to woodi ɓakkeji je ɗon mari ɓakkeji je ɗon mari ɓakkeji je ɗon mari ɓakkeji je ɗon mari ɓakkeji. is_nested (('[[]]') â -> True is_nested (('[]]]]]]]]] [[[[[[[]') â -> False is_nested (('[][]') â -> False is_nested (('[]') â -> False is_nested (('[[]]') â -> True is_nested (('[[]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"A hokki limngal limɗe. A yiɗi wartugo limngal limɗe je ɗiɗawre nder limngal ngal, a timmini koode limngal nder limngal haa dow. Misalu: Ngam lst = [1,2,3] output sey laato 14 Ngam lst = [1,4,9] output sey laato 98 Ngam lst = [1,3,5,7] output sey laato 84 Ngam lst = [1.4,4.2,0] output sey laato 29 Ngam lst = [-2.4,1,1] output sey laato 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''Wurtin kuugal je hokkata True to a'alaji ragare nder limngal ɗon limngal alphabetical be wala nder wolde, be False to naa non. Njaɓɗum: \"wolde\" woni kawtal limɗe je sendira bee wakkere. Misal: check_if_last_char_is_a_letter\" \"apple pie\") â -> False check_if_last_char_is_a_letter\" \"apple pi e\") â -> True check_if_last_char_is_a_letter\" \"apple pi e\") â -> False check_if_last_char_is_a_letter\" \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Wurtin kuugal je hokkata inde je ɓuri ɗuuɗugo je element je wala ɓurɗum ko je fotti be element je ɗon yeeso ma. To wala element je ɗon ɗon to hokkata -1. Array je ɗum hokki wala limtol je ɗon ɗon duppi. Misalu: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''Wurtin kuugal je hokkata aadi (a, b), to 'a' woni mawɗum nder limɗe je wala ko je holli, e' 'b' woni famarde nder limɗe je ɗon mari ko je holli nder limngal. To wala limɗe je wala ko je wala ko je ɗon mari ko je ɗon mari, hokkuɗe bana Wala. Misalu: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"Wurtin kuugal je hoosi limɗe je ɗon nder, ko bo limɗe je ɗon nder, ko bo limɗe je ɗon nder, ko bo limɗe je ɗon nder, e je hokkata limngal je ɓuri mawɗum nder limngal je ɗum hokki. Wurtinol Wala to limɗe je ɗon nder ɗon ɗon fotti. Njaɓɗum: To limngal je ɗon nder, limngal je ɗon nder, limngal je ɗon nder, limngal je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder je ɗon nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder nder\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Lartin limngal n footi winda be limngal limngal 4 limɗe je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon mari limgal je ɗon ɗon ɗon limgal je ɗon mari limgal je ɗon ɗon ɗon limgal je ɗon ɗon ɗon ɗon limgal je ɗon limgal je ɗon je ɗon limgal je ɗon je ɗon limgal limgal je ɗon je ɗon limgal je ɗon je ɗon limgal je ɗon je ɗon limgal je\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"Factoryal Brazil ɗon anndina bana: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! to n > 0 Misalu: >>> special_factorial ((4) 288 Kuugal jaɓay intejair bana nastugo nden haani warjinta special factorial intejair ndu. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_L'alaama-3l bindol, wayla bo'oji fuu nder ma bee ko ɓurdi nder, to bo'owal mari bo'oɗe je ɗon tokki, sey wayla bo'oɗe je ɗon tokki bee - fix_spaces ((\"L misaal\") == \"L misaal\" fix_spaces ((\"L misaal1\") == \"L misaal1\" fix_spaces ((\"L misaal2\") == \"L misaal_2\" fix_spaces ((\"L misaal 3\") == \"L misaal-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Wurtin kuugal je hoosi string je hollata inde file, nden warti 'Yes' to inde file ɗon nafo, nden warti 'No' to naa non. Innde file ɗon hoosi bana je ɗon nafo to e tan to ko larni ɗo'o fu ɗo hebbi: - Wala limɗe tati ɓurɗe ('0'-'9') nder inde file. - Innde file ɗon mari toɓɓere go'o '.' - Substring je yeeso toɓɓere haani laataaki wala, nden fuɗɗam be ɗerewol alphapet latin ('a'-'z' be 'A'Z'). - Substring je gaɗa toɓɓere haani laataago go'o nder ɗerewol alphapet latin: ['txt', 'exe', 'lld'] Misaalu: file_name_check\"{example.txt.} # => 'Yes'name_file_check\"{example.dll1} => 'No' => '#' (innde inde haani fuɗɗam be ɗerewol alphapet latin)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" Kuugal ndu hoosan limngal limɗe je limgal. Ngam kujeji je limgal, kuugal ndu footi sukkita limngal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal limgal je limgal je limgal limgal je limgal limgal je limgal je limgal je limgal limgal je limgal je limgal limgal je limgal limgal je limgal je limgal limgal je limgal je limgal limgal je limgal je limgal je limgal je limgal je limgal je limgal limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal je limgal\"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"On hokki on string je hollata wolde, wolde ndu mari kalimaaji feere feere je sendiraama bee space, nden on mari warugo string je mari kalimaaji je wolde aranere, je juutɗe ma'a je limɗe prime, dabare wolde ha nder wolde kesre haani laato bana je wolde aranere. Misal 1: Input: sentence = \"This is a test\" Output: \"is\" Misal 2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Kuugal maaɗa woni waɗugo kuugal je foondinan ngol ngol ngol limngal x * n. Kuugal ngol hoosi True to x * n foondata limngal gootal be False to naa non. X be n, fuu ɗi'i, ɗi kolligo limngal peccal, e mari ɗatal ndu'u, <numerator>/<denominator> to limtol be limtol fuu woni limɗe goɗɗe. A waaway tammi x, be n ɗon laatii peccal je ɗon laatii, be wala wala wala bana limtol. simplify \"1/5\", \"5/1\") = True simplify \"1/6\", \"2/1\") = False simplify \"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"Windi kuugal je ɗon laara limgal limɗe je ɗum hokki nder limngal je ɗon ɓesda be limgal limɗe maɓɓe. Njaɓu: to woodi kujeji je mari limgal limɗe maɓɓe je ɗon nandi, sey a laara ɗi bana limgal limɗe maɓɓe nder limngal aranal. Misalu: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Winda kuugal je ɗon jaɓo limɗe je ɗon nder matotiral bana ko nastinata nden je ɗon hokkata limgal kuuje je ɗon nder matotiral je ɓuri 10 be limɗe arandeje be ragare limɗe je ɗon nder matotiral je wala limgal (1, 3, 5, 7, 9). Misalu: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"A hokki ma limngal je ɗon naftirta. A waɗay a array limngal je ɗon naftirta je juutal n. Ngam kala i (1 ‰¤ i ‰¤ n), limngal a[i] = i * i - i + 1. Hoosinta limgal tripleji (a[i], a[j], a[k]) je a to i < j < k, be a[i] + a[j] + a[k] je ɗuuɗal 3. Misal: Input: n = 5 Output: 1 Bayanu: a = [1, 3, 7, 13, 21] Tripleji je ɗon naftirta tan woni (1, 7, 13). \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''E woodi koode joweetati nder koode naange: koode ɓadiinde naange woni Mercury, koode ɓadiinde naange woni Venus, nden Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Winda kuugal je hoosi inɗe koode ɗiɗi bana koode planet1 e planet2. Kuugal man sey hokkata tappol je mari koode je orbitji ma'ako ɗon hakkunde orbitji planet1 e orbitji planet2, je ɗon nder ɓadiinde naange. Kuugal man sey hokkata tappol je wala koode to planet1 mala planet2 naa inɗe koode je wooɗaa. Misaluji bf\"(Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") bf(\"Earth\", \"Mercury\") ==> (\"Venus\") bf\"(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sn\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Winda kuugal je jaɓata limgal ɗerewol bana parameter, itta ɗerewol je mari juutal je wala ferotiral, nden warti limgal je ɗum heɓti be no ɗum larti, Lista je ɗon fu limgal ɗerewol je wala limgal limɗe, nden footi hawti be ko ɗon feere. Limtol limgal je haani ɓesda be juutal kala kalima, nden sey on warti limgal je larti be dooka. To kalimaaji ɗiɗi mari juutal je ɗon feere, sey on larti limgal je ɗon feere. Kuugal je haani warti limgal ɗerewol je larti be no ɗum larti. On footi tammi kalimaaji fuu mari juutal je ɗon feere. Misalu: assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"Ɗatal je ɗon hoosa daraja x to n woni limngal arandejum nden hoosa daraja y to naa non. Misaalu: ngam x_or_y(7, 34, 12) == 34 ngam x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''Woni limngal limɗe, hokku limngal limɗe nder limngal ngal je wala limngal. Wonda limɗe je wala limɗe je wala limɗe je wala limɗe je wala limngal. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 To limngal ngol wala limngal, hokku 0. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"Mi tammi en fuu en ɗon siftora no ɗum waɗata to ɗum anndi ko waɗi ha ragare ko ɗum neeɓi. Ɓernde e numolji ɗi on mari ha wakkatiiji ɗin ɗon haani ɗum andina e ɓe foonda. Kuugal mon woni andugo to goɗɗo foondaama ko waɗi ha ragare matching. On hokkaa matotiralji ɗi limtol e tammbe je ɗon fotti, to koode fu ɗon holla match. Hoosuki matotiral je ɗon fotti je hollata no ko woni. To ɓe foondaama, limtol woni 0, to boo, limtol woni feerootiral hakkunde tammbe e limtol. misaalu: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"On heɓay inde jaangirde (jewol) be limtol jaangirdeji. Jaangirdeji hauti be jaangirdeji feere ha jaangirde. Jabbu jaangirde ndu bana ni: Let CAP be limtol ɗereeji mawɗi nder inde jaangirde, be let SM be limtol ɗereeji pamari nder inde jaangirde, jaangirde ndu hokkata ha CAP - SM. A haani heɓugo jaangirde je ɓuri sembe be warjugo jaangirde nder format ndu: ClassName.StrongestExtensionName. To woodi jaangirdeji ɗiɗi ko ɓuri je ɗon mari jaangirdeji go'o, a haani suɓugo je ɗon arande ha limtol. Misalu, to a hokkaa \"Slices\" bana jaangirde be limtol jaangirdeji: ['SEviRNGLISCES', 'Cheese', 'StuFfed'] nden a haani warjugo 'Slices.SEviRNGLISCES' 'SliRNGLISCES' 'my']) ngam jaangirde je ɓuri sembe, misaalu: 'AA_Beast' => 'Beast' => 'Class' => 'Class_Strongest',\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"On hokki kalimawolji 2. On haani wartugo True to kalimawol ɗiɗaɓol mala ko woni nder ko ɗum wayli ɗum ɗo laral nder kalimawol aranol cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Wurtinugo limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal je ɗon mari limngal limngal limngal je ɗon mari limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal limngal lim\"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"Woni limngal je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je ɗon je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je je\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''Ko ɗum juutal be pecce tati be triangle. Return True to be pecce tati be pecce tati be pecce tati be reetangel, False otherwise. A reetangel be reetangel be triangle be pecce tati be go'o be reetangel ko be pecce tati be reetangel ko be pecce tati be reetangel. Example: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"Windi kuugal je jaɓay limgal ɗerewol. Limtol ngol mari kalimaaji feere-feere. Wurtina kalimaaji je mari limgal ɗerewol feere-feere. To ɗerewolji feere-feere mari limgal ɗerewol feere-feere, wurtina go'oto je arano nder limngal. find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"On mari nyaamdu, on nyaami limgal kareeji feere, ammaa jooni on mari haaje nyaamugo kareeji feere ngam timmina nyaamdu nyalawma. on haani wartugo dabareji [ limgal kareeji nyaamdu ɓaawo nyaamdu ma, limgal kareeji luttuɗi ɓaawo nyaamdu ma ] to wala kareeji luttuɗi je ɗon heɓa, on nyaaman kareeji luttuɗi fuu, amma on ɗon nana weelo. Misaalu: * nyaamdu ((5, 6, 10) -> [11, 4] * nyaamdu ((4, 8, 9) -> [12, 1] * nyaamdu ((1, 10, 10) -> [11, 0] * nyaamdu ((2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need:: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots in stock Constrain: * 0= <= 0 * 1000 <= 0 * 0 = <= 1000 <= 0 = 0\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"Limooɓe limngal arandejum ɗon mari kujeji aljebira, nden limngal ɗiɗaɓum ɗon mari limngal limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe je limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe limɗe\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"To a hokki on string s. to s[i] woni ɗerewol, wayla ɗerewol man diga les yaaki dow, to boo waylaaki, to naa non, sey a sala ɗum bana non. To string wala ɗerewol, wayla string. Kuugal man wartay string ngol ɗum heɓti. Misal solve ((\"1234\") = \"4321\" (((\"ab\") = \"AB\" (((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"'Text' hokki string, hokku md5 hash equivalent string. To 'text' wala string, hokku None. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "fuv_Latn",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"Woni limɗe je ɗon aadi je ɗiɗo a be b, hokku limɗe je ɗon aadi hakkunde a be b, nder laawol je ɗon ɓesda. Misalu: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]