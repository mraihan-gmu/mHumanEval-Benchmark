task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ace_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Uji peu lam daftar angka nyang geubri, na dua angka nyang leubeh rab nibak ambang batas nyang geubri. Contoh: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Palsu >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Beutoi """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ace_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input keu fungsi nyo adalah string nyang meuasoe le kelompok kurung yang dilampirkan. Tujuan droeneuh adalah untuk meupeucre kelompok nyan jeut keu string teupisah dan geuwoe daftar jih. Grup teupisah seimbang (tiap kurung terbuka ditutup dengan benar) dan hana dilampirkan dalam saboh sama laen. Han peu perhatikan ruang dalam string masukan. Contoh: >>> separate_paren_groups' ((( ) (() (()))))) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ace_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Meunurot bilangan floating point positif, jih jeut dipeucah jeut keu bagian bulat (jumlah bulat paleng rayek leubeh ubit dari bilangan yang dipeutunyok) dan decimal (bagian sisa sabe ubit dari 1). Kembalikan bagian decimal bilangan. Contoh: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ace_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Anda diberi daftar operasi deposit dan penarikan pada rekening bank yang dimulai dengan saldo nol. Tugas anda adalah untuk mendeteksi jika pada titik tertentu saldo rekening jatuh di bawah nol, dan pada titik itu fungsi harus mengembalikan True. Jika tidak, ia harus mengembalikan False. Contoh: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ace_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Untuk daftar angka masukan yang diberikan, hitung Mean Absolute Deviation sekitar rata-rata dari dataset ini. Mean Absolute Deviation adalah perbedaan rata-rata mutlak antara setiap elemen dan titik pusat (rata-rata dalam kasus ini): MAD = rata-rata │ x - x_mean │ Contoh: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ace_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Masukan angka 'delimeter' antara tiep-tiep elemen berturut-turut dari daftar masukan `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ace_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input keu fungsi nyo adalah string yang mewakili le kelompok untuk kurung yang dilampirkan yang dipisahkan oleh spasi. Untuk setiap kelompok, output tingkat terdalam dari kurung kurung. Misal jih (() (()) na maksimal dua tingkat kurung sedangkan ((())) na lhee. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ace_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ace_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Untuk daftar bilangan bulat yang diberikan, kembalikan tuple yang terdiri dari jumlah dan hasil perkalian dari semua bilangan bulat dalam daftar. jumlah kosong harus sama dengan 0 dan hasil perkalian kosong harus sama dengan 1. >>> jumlah_produk (([]) (0, 1) >>> jumlah_produk (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ace_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Dari daftar bilangan bulat, peuget daftar elemen maksimum meugulong nyang meurumpok sampoe saat nyang teubri dalam urutan. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ace_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Tumeu'ek palindrom paleng paneuk nyang meu'en ngon string nyang na. Ide algoritma mudah: - Tumeu'ek postfix terpanjang dari string nyang na nyang palindrom. - Tameu'ek bak ujong string reverse dari string prefix nyang teuka seugolom suffix palindromik. >>> make_palindrome' ((('') ' ' >>> make_palindrome' ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Uji coba peu string nyan palindrom """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ace_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input adalah dua string a dan b yang hanya terdiri dari 1 dan 0. Peuget XOR biner bak input nyoe dan peuriwang hase jih cit seubagoe string. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ace_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Dari daftar string, puwoe yang paleng panyang. Puwoe yang phon lam kasus na le string nyang panyang saban. Puwoe Hana lam kasus daftar masukan kosong. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ace_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Kembalikan pembagi biasa terhebat dari dua bilangan bulat a dan b >>> pembagi biasa terhebat ((3, 5) 1 >>> pembagi biasa terhebat ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ace_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Kembali daftar dari semua awalan dari terpendek ke terpanjang dari string input >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ace_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Geupeugisa string nyang meuasoe angka nyang ji watè nibak 0 sampo n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ace_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Geupeuturi string, mita padum boh karakter nyang berbeda (hana peuglah nibak kasus) nyang na lam jih >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ace_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Here is a legend: 'o' note, lasts four beats 'o' dakes - half note, lasts two beats 'o' - quater note, lasts one beat >>> parse_music. 'o' o . o' dakes o 'o' dakes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ace_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Cari berapa kali substring tertentu dapat ditemukan dalam string asli. Hitung kasus tumpang tindih. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ace_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input adalah string bilangan yang terbatas spasi dari 'nol' hingga 'sembilan'. pilihan yang valid adalah 'nol', 'satu', 'dua', 'tiga', 'empat', 'lima', 'enam', 'tujuh', 'delapan' dan 'sembilan'. mengembalikan string dengan bilangan yang disortir dari terkecil ke terbesar >>> sort_numbers (('tiga satu lima') 'satu tiga lima' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ace_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Dari daftar angka yang dipeutunyok (seureuta panyang jih minimal dua) pileh dan peugisa dua nyang paleng to sidroe ngon nyang laen dan peugisa awak nyan lam urutan (angka nyang leubeh ubit, angka nyang leubeh rayeuk). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ace_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Geubri daftar angka (seutidak jih dua elemen), peuget transformasi linier keu daftar nyan, lage angka ubit jeut keu 0 dan angka rayek jeut keu 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ace_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ace_Latn,python,"

def strlen(string: str) -> int:
    """"""Panyang pawai nyang geubri >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ace_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Untuk bilangan n, cari bilangan terbesar yang membagi n secara merata, lebih kecil dari n >>> terbesar_pembagi ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ace_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Kembali daftar faktor prima dari bilangan bulat tertentu dalam urutan dari terkecil ke terbesar. Masing-masing faktor harus tercantum jumlah kali yang sesuai dengan berapa kali muncul dalam faktorisasi. Angka masukan harus sama dengan hasil perkalian dari semua faktor >>> faktorisasi ((8) [2, 2, 2] >>> faktorisasi ((25) [5, 5] >>> faktorisasi ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ace_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Dari daftar bilangan bulat, hapus mandum elemen nyang na leubeh dari sigoe. Jaga urutan elemen nyang tinggai sama lagee lam input. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ace_Latn,python,"

def flip_case(string: str) -> str:
    """"""Untuk string yang diberikan, ubah karakter huruf kecil ke huruf besar dan huruf besar ke huruf kecil. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ace_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ace_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter daftar input string hanya untuk yang dimulai deungen prefiks yang diberikan. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ace_Latn,python,"

def get_positive(l: list):
    """"""Kheun lom bilangan positif lam daftar. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ace_Latn,python,"

def is_prime(n):
    """"""Kembali true jika bilangan prima, dan false jika bilangan prima. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ace_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs adalah koefisien dari polinomial. find_zero menemukan x sedemikian rupa sehingga poly ((x) = 0. find_zero hanya mengembalikan titik nol, bahkan jika ada banyak. Selain itu, find_zero hanya mengambil daftar xs yang memiliki bilangan genap koefisien dan koefisien non nol terbesar karena menjamin solusi. >>> bulat (((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> bulat (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Meuseukat polinomial deungen koefisien xs bak titek x. puwoe xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ace_Latn,python,"

def sort_third(l: list):
    """"""Fungsi nyo meucok daftar l dan meupeugisa daftar l' lage nyan bahwa l identik deungen l dalam indeks nyang han jeut dibagi le lhee, seudangkan nilai jih bak indeks nyang jeut dibagi le l sama deungen nilai indeks l nyang saban, teutapi disortir. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ace_Latn,python,"

def unique(l: list):
    """"""Kembalikan elemen unik yang di urati dalam daftar >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ace_Latn,python,"

def max_element(l: list):
    """"""Kheun lom elemen paleng rayek lam daftar. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ace_Latn,python,"

def fizz_buzz(n: int):
    """"""Kembalikan jumlah kali digit 7 muncul dalam bilangan bulat yang lebih kecil dari n yang habis dibagi 11 atau 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ace_Latn,python,"

def sort_even(l: list):
    """"""Fungsi nyo meucok daftar l dan meupeugisa daftar l' lage nyan bahwa l' identik deungen l dalam indeks ganjil, seudangkan nilai jih di indeks ganjil sama deungen nilai indeks ganjil dari l, teutapi disusun. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ace_Latn,python,"

def encode_cyclic(s: str):
    """"""Geu peugisa string nyang geu kode ngon fungsi encode_cyclic. Geu peugisa string nyang geu decode.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""geuwoe string nyang geu kode le kelompok siklus lhee boh karakter.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ace_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib geubalik angka keu-n nyang merupakan bilangan Fibonacci dan nyan cit bilangan prima. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ace_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero meuanggap saboh daftar bilangan bulat seubagoe input. jih meupeutron True meunyo na lhee elemen yang berbeda lam daftar nyan jumlah jih sama deungen nol, dan False meunyo hana. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ace_Latn,python,"

def car_race_collision(n: int):
    """"""Bayangkan sebuah jalan yang lurus sempurna garis yang panjangnya tak terhingga. n mobil mengemudi dari kiri ke kanan; secara bersamaan, satu set berbeda dari n mobil mengemudi dari kanan ke kiri. dua set mobil mulai dari jarak yang sangat jauh satu sama lain. semua mobil bergerak dengan kecepatan yang sama. dua mobil dikatakan bertabrakan ketika mobil yang bergerak dari kiri ke kanan menabrak mobil yang bergerak dari kanan ke kiri. namun, mobil-mobil tersebut sangat kokoh dan kuat; akibatnya, mereka terus bergerak dalam lintasan mereka seolah-olah mereka tidak bertabrakan. fungsi ini menghasilkan jumlah tabrakan seperti itu.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ace_Latn,python,"

def incr_list(l: list):
    """"""Daftar balik dengan elemen yang ditingkatkan 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ace_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero meuanggap daftar bilangan bulat seubagoe input. jih meupeutron True meunyo na dua elemen yang berbeda lam daftar yang jumlah jih sama deungen nol, dan False meunyo hana. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ace_Latn,python,"

def change_base(x: int, base: int):
    """"""Peubah basis numerik dari angka masukan x ke basis. kembalikan representasi string setelah konversi. angka basis kurang dari 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ace_Latn,python,"

def triangle_area(a, h):
    """"""Diberi panyang sisi ngen lubeh lubeh lubeh lubeh tinggi untuk segitiga. >>> segitiga_luwah""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ace_Latn,python,"

def fib4(n: int):
    """"""Urutan bilangan Fib4 adalah urutan nyang sama deungen urutan Fibbonacci nyang didefinisikan lagee nyoe: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Neutuléh saboh fungsi untuk meuhase meuhitung elemen keu-n nibak urutan bilangan fib4. Hana peuguna rekursi. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ace_Latn,python,"

def median(l: list):
    """"""Meuligoe median elemen lam daftar l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ace_Latn,python,"

def is_palindrome(text: str):
    """"""Geu cek peu jih string yang geubri adalah palindrom >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ace_Latn,python,"

def modp(n: int, p: int):
    """"""Kembali 2^n modulo p (perhatikan angka). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ace_Latn,python,"

def encode_shift(s: str):
    """"""Geu peugisa string nyang ka geu kode ngon fungsi encode_shift. Geu peugisa string nyang ka geu decode.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""geubi string geu kode le geu ubah setiap karakter le 5 dalam abjad.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ace_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels nakeuh saboh fungsi nyang geucok string ngon geuwoe string hana vokal. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ace_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Kembali True jika semua bilangan dalam daftar l di bawah ambang batas t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ace_Latn,python,"

def add(x: int, y: int):
    """"""Tamah dua angka x ngen y >>> tambahkan ((2, 3) 5 >>> tambahkan ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ace_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Periksa peu dua kata na karakter nyang saban. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ace_Latn,python,"

def fib(n: int):
    """"""Kheun lom bilangan Fibonacci keu-n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ace_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket adalah string ""<"" dan "">"". return True jika setiap bracket pembuka memiliki bracket penutupan yang sesuai. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ace_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ace_Latn,python,"

def common(l1: list, l2: list):
    """"""Kembalikan elemen umum unik yang diurut untuk dua daftar. >>> umum (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> umum (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ace_Latn,python,"

def largest_prime_factor(n: int):
    """"""Kembalikan peubah prima terbesar dari n. Asumsikan n > 1 dan bukan bilangan prima. >>> peubah prima terbesar (largest_prime_factor) 13195) 29 >>> peubah prima terbesar (largest_prime_factor) 2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ace_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n adalah fungsi yang jumlahkan bilangan dari 1 hingga n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ace_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket adalah string ""("" dan "")"". return True jika setiap bracket pembuka memiliki bracket penutupan yang sesuai. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ace_Latn,python,"

def derivative(xs: list):
    """"""xs meucantumkan koefisien dari polinomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Peuriwang turunan polinomial nyoe lam bentuk nyang sama. >>> turunan (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> turunan (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ace_Latn,python,"

def fibfib(n: int):
    """"""Urutan bilangan FibFib adalah urutan yang serupa dengan urutan Fibbonacci yang didefinisikan sebagai berikut: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Tuliskan fungsi untuk menghitung elemen ke-n dari urutan bilangan fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ace_Latn,python,"
FIX = """"""Tuliskan fungsi vowels_count yang mengambil string yang mewakili kata sebagai input dan mengembalikan jumlah vokal dalam string. Vokal dalam kasus nyoe adalah 'a', 'e', 'i', 'o', 'u'. Di sini, 'y' juga merupakan vokal, tetapi hanya ketika berada di akhir kata yang diberikan. Contoh: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Tamah lom kasus uji coba.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ace_Latn,python,"
def circular_shift(x, shift):
    """"""Geubah bulat digit bilangan bulat x, geubah kan digit-digit nyan ngen geubah laju dan geujok hase jih seubagoe string. Jika shift > jumlah digit, geujok angka jih terbalik. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ace_Latn,python,"
def digitSum(s):
    """"""Tugas Tuleh fungsi nyang geucok string seubagoe input ngon geuwoe jumlah dari karakter ateuh mantong' kode ASCII. Contoh: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ace_Latn,python,"
def fruit_distribution(s,n):
    """"""Dalam tugaih nyo, droeneuh akan geubri string yang mewakili jumlah apel dan jeruk yang didistribusikan dalam saboh keranjang buah keranjang nyo na apel, jeruk, dan buah mangga. Dibri string yang mewakili jumlah total jeruk dan apel dan bilangan bulat yang mewakili jumlah total buah di keranjang mengembalikan jumlah buah mangga di keranjang. untuk contoh: fruit_distribution""5( apel dan 6 jeruk"", 19) -> 19 - 5 - 6 = 8 buah_distribusi""0 apel dan 1 jeruk"",3) -> 3 - 0 - 1 = 2 buah_distribusi""2 apel dan 3 jeruk"", 100) -> 100 - 2 - 3 = 95 buah_distribusi""100 apel dan 1 jeruk"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ace_Latn,python,"
def pluck(arr):
    """"""""Dibri array yang mewakili cabang dari pohon yang memiliki node integer non-negatif tugas anda adalah untuk mengambil salah satu node dan mengembalikannya. node yang diambil haruslah node dengan nilai genap terkecil. jika ditemukan beberapa node dengan nilai genap terkecil yang sama, kembalikan node yang memiliki indeks terkecil. node yang diambil harus dikembalikan dalam daftar, [small_value, indeksnya], jika tidak ada nilai genap atau array yang diberikan kosong, kembalikan []. Contoh 1: Input: [4,2,3] Output: [2, 1] Penjelasan: 2 memiliki nilai genap terkecil, dan 2 memiliki indeks terkecil. Contoh 2: Input: [1,2,3] Output: [2, 1] Penjelasan: 2 memiliki nilai terkecil, dan 2 memiliki indeks genap terkecil. Contoh 3: Input: [] Output: [] Input: [4: 5, 3, 4, 2] Output: [0, 0] Penjelasan: 1 node terkecil, tetapi indeksnya nol. Jadi kita akan memilih node pertama, yang memiliki nilai nol.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ace_Latn,python,"
def search(lst):
    '''Peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peut peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peuget peut peuget peuget peuget peuget peuget peuget peuget peuget peut peut peuget peuget peut peuget peuget peut peuget peuget peut peuget peuget peuget peuget peuget peuget peut peut peuget peut peuget peuget peuget peuget peuget peuget peut peut peuget peuget peuget peuget peuget peuget peuget peuget peut peuget peut peuget peuget peuget peuget peuget peuget peuget peuget peut peuget peuget peut peut peuget peuget peuget peuget'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ace_Latn,python,"
def strange_sort_list(lst):
    '''Geupeujeut daftar bilangan bulat, daftar pulang dalam urutan aneh. Peusortingan aneh, adalah wate awak mulai deungen nilai minimum, lheuh nyan maksimum dari bilangan bulat yeng tinggai, lheuh nyan minimum ngen seutera jih. Contoh: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ace_Latn,python,"
def triangle_area(a, b, c):
    '''Diberi panjang dari tiga sisi segitiga. Kembalikan luas segitiga yang diringkeskan ke 2 titik desimal jika tiga sisi membentuk segitiga yang valid. Jika tidak, kembalikan -1 Tiga sisi membuat segitiga yang valid jika jumlah dua sisi lebih besar dari sisi ketiga. Contoh: segitiga_area{3,4,5) == 6.00 segitiga_area{1,2,10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ace_Latn,python,"
def will_it_fly(q,w):
    '''Tulis fungsi yang mengembalikan True jika objek q akan terbang, dan False jika tidak. Objek q akan terbang jika seimbang (ini adalah daftar palindrom) dan jumlah elemen-elemennya kurang dari atau sama dengan bobot maksimum yang mungkin w. Contoh: will_it_fly (([1, 2], 5) â -> False # 1+2 kurang dari bobot maksimum yang mungkin, tapi tidak seimbang. will_it_fly (([3, 2, 3], 1) â -> False # seimbang, tapi 3+2+3 lebih dari bobot maksimum yang mungkin. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 kurang dari bobot maksimum yang mungkin, dan seimbang. will_it_fly ((([3], 5) â -> True # 3 kurang dari bobot maksimum yang mungkin, dan seimbang.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ace_Latn,python,"
def smallest_change(arr):
    """"""Meunurot array arr bilangan bulat, mita bilangan minimum elemen nyang haroh geu ubah keu peuget array palindromik. array palindromik adalah array nyang geu baca saban keu likot ngon keu ukeu. lam saboh perubahan, droeneuh jeut geu ubah saboh elemen keu elemen laen. miseu jih: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ace_Latn,python,"
def total_match(lst1, lst2):
    '''Tulislah fungsi yang menerima dua daftar string dan mengembalikan daftar yang jumlah total karakter di semua string daftarnya kurang dari daftar yang lain. jika kedua daftar memiliki jumlah karakter yang sama, kembalikan daftar pertama. Contoh total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ace_Latn,python,"
def is_multiply_prime(a):
    """"""Tuliskan fungsi yang akan mengembalikan true jika bilangan yang diberikan adalah perkalian 3 bilangan prima dan false jika tidak. Mengetahui bahwa (a) adalah kurang dari 100. Contoh: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ace_Latn,python,"
def is_simple_power(x, n):
    """"""Tugas droeneuh adalah untuk tuleh fungsi yang akan meubalik true jika bilangan x adalah pangkat sederhana dari n dan false dalam kasus laen. x adalah pangkat sederhana dari n jika n**int=x Contoh: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ace_Latn,python,"
def iscube(a):
    '''Tulislah fungsi yang mengambil bilangan bulat a dan mengembalikan True jika ingeger ini adalah kubus dari beberapa bilangan bulat. Catatan: anda dapat menganggap input selalu valid. Contoh: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ace_Latn,python,"
def hex_key(num):
    """"""Peurlehan peuniléh peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneugöt peuneug""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ace_Latn,python,"
def decimal_to_binary(decimal):
    """"""Akan geubri angka dalam bentuk desimal dan tugas droeneuh adalah untuk meubah jih keu format biner. Fungsi nyan haroh geuwoe string, deungen tip saban mewakili angka biner. Tip tip dalam string akan '0' atau '1'. Akan na sepasang tambahan karakter 'db' di awai dan akhe string. Tip tip tambahan na untuk geubantu format. Contoh: decimal_to_binary ((15) # geuwoe ""db1111db"" decimal_to_binary32) # geuwoe ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ace_Latn,python,"
def is_happy(s):
    """"""Contoh: is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (b) => False is_happy (c) => False is_happy (d) => False is_happy (e) => False is_happy (f) => False is_happy (g) => False is_happy (h) => False is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ace_Latn,python,"
def numerical_letter_grade(grades):
    """"""Nyan adalah minggu terakhir dari semester dan guru harus memberikan nilai kepada siswa. guru telah membuat algoritma sendiri untuk memberi nilai. satu-satunya masalah adalah, dia telah kehilangan kode yang dia gunakan untuk memberi nilai. dia telah memberikan daftar nilai GPA untuk beberapa siswa dan anda harus menulis sebuah fungsi yang dapat menghasilkan daftar nilai huruf menggunakan tabel berikut: GPA. nilai huruf 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 Contoh: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ace_Latn,python,"
def prime_length(string):
    """"""Tuleh fungsi nyang geucok string ngon geuwoe True meunyoe string panyang jih adalah bilangan prima atawa False laenjih Contoh prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ace_Latn,python,"
def starts_one_ends(n):
    """"""Meunurot bilangan bulat positif n, meupeuturi jumlah bilangan bulat positif n-digit yeng dimulai atau di akhe deungen 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ace_Latn,python,"
def solve(N):
    """"""Diberi bilangan bulat positif N, kembalikan jumlah total digit-digitnya dalam biner. Contoh Untuk N = 1000, jumlah digit akan menjadi 1 output harus ""1"". Untuk N = 150, jumlah digit akan menjadi 6 output harus ""110"". Untuk N = 147, jumlah digit akan menjadi 12 output harus ""1100"". Variabel: @N bilangan bulat Keterbatasan: 0 â‰¤ N â‰¤ 10000. Output: string bilangan biner """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ace_Latn,python,"
def add(lst):
    """"""Meunurot daftar bilangan bulat yang hana kosong lst. peutamah elemen-elemen yang hana sama yang na di indeks ganjil. Contoh: peutamah (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ace_Latn,python,"
def anti_shuffle(s):
    """"""Peuget fungsi nyang geucok string dan geuwoe versi nyang ka tersusun. Versi string nyang ka tersusun, nakeuh string nyang mandum kata (geubeda deungon spasi) geu gantoe le kata barô nyang mandum karakter ka teu uroih lam urutan teubiet berdasarkan nilai ascii. Peuneujeut: Droeneuh haroh neujaga urutan kata dan spasi kosong lam kalimat. Miseu jih: anti_shuffle ((('Hi') geuwoe 'Hi' anti_shuffle ((('hello') geuwoe 'ehllo' anti_shuffle (('Hello World!!!') geuwoe 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ace_Latn,python,"
def get_row(lst, x):
    """"""Contoh: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 1, 4], 0 (2, 5), 2 (2, 0) get_(1), 1) [_] == row [1], [1,2, 3, 2, 3, 2], [2, 2]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ace_Latn,python,"
def sort_array(array):
    """"""Meunurot array bilangan bulat non-negatif, neubalek salin dari array nyang ka neubri lheuh neu peusortir, droeneuh akan neu peusortir array nyang ka neubri lam urutan jitingkat meunyo jumlah jih (nilai indeks phon, nilai indeks akhe) ganjil, atawa neu peusortir dalam urutan jitren meunyo jumlah jih (nilai indeks phon, nilai indeks akhe) genap. Catatan: * bék neuubah array nyang ka neubri. Contoh: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ace_Latn,python,"
def encrypt(s):
    """"""Peuget fungsi encrypt nyang geucok string seubagoe argumen dan geuwoe string nyang geu-encrypt ngon abjad nyang ji putar. Abjad haroh ji putar seucara nyang lagèe huruf-huruf nyan ji ubah keu dua ji kali dua. Miseu jih: encrypt (('hi') geuwoe 'lm' encrypt (('asdfghjkl') geuwoe 'ewhjklnop' encrypt (('gf') geuwoe 'kj' encrypt (('et') geuwoe 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ace_Latn,python,"
def next_smallest(lst):
    """"""Neubri saboh daftar bilangan bulat. Neutuleh fungsi next_smallest (() nyang geuwoe elemen keu-2 paleng ubit lam daftar. Neupeugisa none meunyoe hana elemen lagee nyan. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ace_Latn,python,"
def is_bored(S):
    """""""" 'Boseh "" ' nakeuh saboh kalimat nyang geupeu phon ngon "" I "" . kalimat nyan geuboh tanda "" '"", "" ' "" atawa "" ! "" . miseujih: >>> is_bored (("" halo dunia "") 0 >>> is_bored (("" langit biru. matahari bersinar. saya suka cuaca ini "") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ace_Latn,python,"
def any_int(x, y, z):
    '''Peuget fungsi yang meucok 3 angka. Meupeuriwang beutoi meunyo salah saboh angka sama deungen jumlah dua angka laen jih, dan mandum angka adalah bilangan bulat. Meupeuriwang salah dalam kasus laen jih. Contoh any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3, 6, -2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ace_Latn,python,"
def encode(message):
    """"""Tulislah fungsi yang mengambil pesan, dan mengkodekan sedemikian rupa sehingga ia menukar case dari semua huruf, menggantikan semua vokal dalam pesan dengan huruf yang muncul 2 tempat di depan vokal itu dalam alfabet bahasa inggris. Anggap saja huruf. Contoh: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ace_Latn,python,"

def skjkasdkd(lst):
    """"""Contoh: Untuk lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] outputnya harus 10 Untuk lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] outputnya harus 25 Untuk lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] outputnya harus 13 Untuk lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] outputnya harus 11 Untuk lst = [0,81,12,3,21,1] outputnya harus 3 Untuk lst = [1,8,1,2,1,7] outputnya harus 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ace_Latn,python,"
def check_dict_case(dict):
    """"""Meunurot kamus, puwoe True meunyo mandum kunci nakeuh string lam huruf ubit atawa mandum kunci nakeuh string lam huruf rayeuk, laen puwoe False. Fungsi nyan haroh puwoe False meunyo kamus nyan kosong. Contoh: check_dict_case{""a"":""apple"", ""b"":""banana""}) haroh puwoe True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) haroh puwoe False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) haroh puwoe False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) haroh puwoe False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) haroh puwoe True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ace_Latn,python,"
def count_up_to(n):
    """"""Meupeuget fungsi nyang geucok bilangan bulat han-negatif ngon meupeugisa array dari bilangan bulat n phon nyang merupakan bilangan prima ngon leubeh ubit nibak n. miseu jih: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ace_Latn,python,"
def multiply(a, b):
    """"""Contoh: perkalian 148, 412) akan mengembalikan 16. perkalian 19 , 28 akan mengembalikan 72. perkalian 2020 , 1851 akan mengembalikan 0. perkalian 14 , 15 akan mengembalikan 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ace_Latn,python,"
def count_upper(s):
    """"""Geupeuturi string s, itong jumlah vokal uppercase dalam indeks genap. miseu jih: count_upper (('aBCdEf') geuwoe 1 count_upper (('abcdefg') geuwoe 0 count_upper (('dBBE') geuwoe 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ace_Latn,python,"
def closest_integer(value):
    '''Peuget fungsi yang mengambil nilai (string) yang mewakili bilangan dan meubalek bilangan bulat yang paleng toe. Meunyo bilangan nyan sama jarak jih dari dua bilangan bulat, bulatkan dari nol. Contoh >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Catatan: Meubundok dari nol berarti bahwa meunyo bilangan yang diberikan sama jarak jih dari dua bilangan bulat, yang harus neubalek adalah yang paleng jioh dari nol. Contoh: closest_integer ((""14.5"") haroh meubalek 15 dan closest_integer ((""-14.5"") haroh meubalek -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ace_Latn,python,"
def make_a_pile(n):
    """"""Diberi bilangan bulat positif n, anda harus membuat tumpukan n tingkat batu. Tingkat pertama memiliki n batu. Jumlah batu di tingkat berikutnya adalah: - bilangan ganjil berikutnya jika n ganjil. - bilangan genap berikutnya jika n genap. Kembalikan jumlah batu di setiap tingkat dalam daftar, dimana elemen di indeks i mewakili jumlah batu di tingkat (i+1). Contoh: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ace_Latn,python,"
def words_string(s):
    """"""Contoh: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ace_Latn,python,"
def choose_num(x, y):
    """"""Fungsi nyo meucok dua bilangan positif x dan y dan meupeutron bilangan bulat pasangan paleng rayek yang na dalam rentang [x, y] termasok. Meunyo hana bilangan lage nyan, maka fungsi nyo haroh meupeutron -1. Misal: pilih_bilangan_12 , 15 = 14 pilih_bilangan_13 , 12 = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ace_Latn,python,"
def rounded_avg(n, m):
    """"""Meuse jih na dua bilangan bulat positif n dan m, dan tugaih droeneuh adalah untuk peuhitung rata-rata bilangan bulat dari n sampoe m (termasuk n dan m). Bulatkan jawaban nyan keu bilangan bulat teradep dan ubah keu bilangan biner. Meunyo n leubeh rayek dari m, puwoe kheueh -1. Contoh: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ace_Latn,python,"
def unique_digits(x):
    """"""Diberi daftar bilangan bulat positif x. mengembalikan daftar tersusun dari semua elemen yang tidak memiliki digit genap. Catatan: Daftar yang dikembalikan harus diurutkan dalam urutan meningkat. Contoh: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ace_Latn,python,"
def by_length(arr):
    """"""Diberi array bilangan bulat, atur bilangan bulat yang berada di antara 1 dan 9 termasuk, ubah array hasilnya, lalu ganti setiap digit dengan nama yang sesuai dari ""Satu"", ""Dua"", ""Tiga"", ""Empat"", ""Lima"", ""Enam"", ""Tujoh"", ""Lapan"", ""Sembilan"". Contoh: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> atur arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> atur arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Delapan"", ""Dua"", ""Lima"", ""Dua"", ""Dua"", ""Satu"", ""Satu""] Jika array kosong, atur return: arr = [] return [] Jika array memiliki bilangan ganjil abaikan: atur arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return = ['One' 1,] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ace_Latn,python,"
def f(n):
    """"""Implementasikan fungsi f yang mengambil n sebagai parameter, dan mengembalikan daftar ukuran n, sehingga nilai elemen di indeks i adalah faktoril dari i jika i genap atau jumlah bilangan dari 1 hingga i jika tidak. i dimulai dari 1. faktoril dari i adalah perkalian bilangan dari 1 hingga i (1 * 2 * ... * i). Contoh: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ace_Latn,python,"
def even_odd_palindrome(n):
    """"""Diberi bilangan bulat positif n, kembalikan sebuah tuple yang memiliki jumlah palindrom bilangan bulat genap dan ganjil yang berada dalam kisaran ((1, n), termasuk. Contoh1: Input: 3 Output: (1, 2) Penjelasan: Palindrom bilangan bulat adalah 1, 2, 3. salah satunya genap, dan dua di antaranya ganjil. Contoh2: Input: 12 Output: (4, 6) Penjelasan: Palindrom bilangan bulat adalah 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. empat di antaranya genap, dan 6 di antaranya ganjil. Catatan: 1. 1 <= n <= 10^3 2. tuple telah mengembalikan jumlah palindrom bilangan bulat genap dan ganjil masing-masing. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ace_Latn,python,"
def count_nums(arr):
    """"""Tulis fungsi count_nums yang mengambil array bilangan bulat dan mengembalikan jumlah elemen yang jumlah digitnya > 0. jika bilangan negatif, maka digit pertama yang ditandatangani akan negatif: contohnya -123 memiliki digit yang ditandatangani -1, 2, dan 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ace_Latn,python,"
def move_one_ball(arr):
    """"""Geutanyoe na array 'arr' dari N bilangan bulat arr[1], arr[2], ..., arr[N]. Angka-angka lam array akan disusun seucara acak. Tugas droeneuh adalah untuk menentukan peu kheueh mungken untuk mendapatkan array yang disusun dalam urutan yang hana menurun dengan melakukan operasi berikut nyoe bak array yang diberikan: Droeneuh diizinkan untuk melakukan operasi pergeseran kanan sebanyak-banyaknya. Satu operasi pergeseran kanan berarti menggeser semua elemen array dengan satu posisi di arah yang benar. Elemen terakhir array akan dipindahkan ke posisi awal dalam array yaitu indeks ke-0. Jika mungkin untuk mendapatkan array yang disusun dengan melakukan operasi di atas maka return True atau return False. Jika array yang diberikan kosong maka return True. Catatan: Daftar yang diberikan dijamin memiliki elemen unik. Contoh: move_one_(ball[3,4,5,== 1, 2>True Penjelasan: Dengan performin 2 operasi kanan, non-menurunnya urutan dapat dicapai untuk array yang diberikan. get_one_ move_{},=4,== 5,= False. Tidak mungkin untuk melakukan operasi pergeseran kanan dengan jumlah yang diberikan. get_one_{},=4,===False Penjelasan:""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ace_Latn,python,"
def exchange(lst1, lst2):
    """"""Dalam masalah nyo, droeneuh akan geupeuget saboh fungsi nyang geucok dua boh daftar angka, dan geupeutentei peu mungken untuk geupeuget pertukaran elemen antara awak nyan keu peuget lst1 saboh daftar angka yang sama. Hana batasan bak jumlah elemen yang di tukeran antara lst1 dan lst2. meunyo jeut ta tukeran elemen antara lst1 dan lst2 untuk peuget mandum elemen lst1 jeut keu sama, neuwoe ""YES"". meunyo hana, neuwoe ""NO"". miseu jih: tukeran[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" tukeran[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Geupike bahwa daftar masukan akan kon kosong.""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ace_Latn,python,"
def histogram(test):
    """"""Geupeutunyok string nyang meuwakili aksara ubit nyang teupisah ruang, geuwoe kamus nibak aksara nyang leubèh geuulang dan na jumlah nyang meuhubông. Meunyo na le aksara nyang na kejadian nyang saban, geuwoe mandum jih. Contoh: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4}: histogram (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ace_Latn,python,"
def reverse_delete(s,c):
    """"""Tugas Geubri keu kamoe dua string s dan c, droeneuh harus peuhapus mandum karakter dalam s nyang sama deungen karakter dalam c lheuh nyan periksa peu jih string hase jih palindrom. string dikheun palindrom meunyo jih baca sama deungen keue. Droeneuh haroh neuwoe saboh tuple nyang na string hase dan True/False untuk periksa. Contoh untuk s = ""abcde"", c = ""ae"", hase jih haroh jeut ('bcd',False) Untuk s = ""abcdef"", c = ""b"" hase jih haroh jeut ('acdef',False) Untuk s = ""abcdedcba"", c = ""ab"", hase jih haroh jeut ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ace_Latn,python,"
def odd_count(lst):
    """"""Geupeujeut saboh daftar string, di pat tiep string hanya terdiri dari angka, peuriwang saboh daftar. Tieb-tieb elemen i dari output haroh jeut keu ""jumlah elemen ganjil dalam string i dari input"". di pat mandum i haroh diganto le jumlah angka ganjil dalam string ke-i dari input. >>> odd_count['1234567']) [""jumlah elemen ganjil 4n str4ng 4 dari 4nput.""] >>> odd_count['3',""111111""]) [""jumlah elemen ganjil 1n str1ng 1 dari 1nput."", ""jumlah elemen ganjil 8n str8ng 8 dari 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ace_Latn,python,"
def minSubArraySum(nums):
    """"""Diberi sebuah array bilangan bulat n, cari jumlah minimal dari setiap sub-array bilangan yang bukan kosong. Contoh minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ace_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Contoh 1: Input: grid: [[0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1]] bucket_capacity: 2 Output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 * 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 11 * 11 * 11 * 11 * 11 * 11 * 12 * 12 * 13 * 14 * 15 * 15 * 15 * 15 * 16 * 16 * 17 * 18 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 21 * 21 * 21 * 21 * 21 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ace_Latn,python,"
def sort_array(arr):
    """"""Dalam Kata nyo, droeneuh harus neu peusortir array bilangan bulat non-negatif meunurot jumlah saboh dalam representasi biner jih dalam urutan meutahi. untuk jumlah saboh yang sama, peusortir berdasarkan nilai desimal. harus diimplementasikan lage nyoe: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ace_Latn,python,"
def select_words(s, n):
    """"""Meunurot string s dan bilangan asli n, droeneuh ka geupeuseuleusoe saboh fungsi nyang geuwoe saboh daftar mandum kata dari string s nyang na geuandong n konsonan, mangat kata-kata nyoe deuh lam string s. Meunyo string s kosong maka fungsi nyan haroh geuwoe saboh daftar kosong. Catatan: droeneuh jeut neukira string masukan hanya na huruf dan spasi. Contoh: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ace_Latn,python,"
def get_closest_vowel(word):
    """"""Neubri saboh kata. Tugas droeneuh adalah untuk neumeu'ek vokal nyang paleng rab nyang na di antara dua konsonan dari blah uneun kata (sensitif nibak huruf). Vokal bak awai ngon akhe hana geupeuteumeung. Neupeugisa string kosong meunyo droeneuh hana neumeu'ek vokal nyang na di ateuh syarat di ateuh. Droeneuh jeut neukira bahwa string nyang geubri na huruf basa Inggreh mantong. Contoh: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ace_Latn,python,"
def match_parens(lst):
    '''Contoh: string '((())' nyan ka jroh, sedangkan string '())' hana. Peugisa 'Yes' meunyoe na cara untuk peuget string nyang get, dan peugisa 'No' meunyoe hana. Contoh: match_parens[('() ', ') ']) == 'Yes' match_parens[('(') ') '== 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ace_Latn,python,"
def maximum(arr, k):
    """"""Diberi sebuah array arr bilangan bulat dan bilangan bulat positif k, kembalikan daftar tersusun panjangnya k dengan jumlah maksimum k bilangan di arr. Contoh1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Contoh2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Contoh3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Catatan: 1. panjang array akan berada di kisaran [1, 1000]. 2. elemen dalam array akan berada di kisaran [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ace_Latn,python,"
def solution(lst):
    """"""Diberi daftar bilangan bulat yang tidak kosong, kembalikan jumlah dari semua elemen ganjil yang berada di posisi genap. Contoh solusi (([5, 8, 7, 1]) ==> 12 solusi (([3, 3, 3, 3, 3]) ==> 9 solusi (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ace_Latn,python,"
def add_elements(arr, k):
    """"""Diberi array bilangan bulat arr dan bilangan bulat k, kembalikan jumlah elemen dengan maksimal dua digit dari k elemen pertama arr. Contoh: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # jumlah 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ace_Latn,python,"
def get_odd_collatz(n):
    """"""Meunurot bilangan bulat positif n, meuwoe daftar tersusun yang na bilangan ganjil dalam urutan collatz. Dueban Collatz adalah dueban dalam matematika yang menyangkut urutan yang didefinisikan lagee nyoe: mulai deungen bilangan bulat positif n. Lheuh nyan, tiep-tiep istilah dipeuteubiet dari istilah seugolom jih lagee nyoe: jika istilah seugolom jih genap, istilah seugolom jih adalah seuteungeh dari istilah seugolom jih. Jika istilah seugolom jih ganjil, istilah seugolom jih adalah 3 kali istilah seugolom jih ditambah 1. Dueban adalah bahwa hana peunteng nilai n, urutan akan sabe mencapai 1. Catatan: 1. Collatz (((1) adalah [1].""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ace_Latn,python,"
def valid_date(date):
    """"""Peuteubiet fungsi nyang geupeutentei string tanggai nyang teubri dan geuwoe True meunyoe tanggai nyan sah. Laen jih False. Tanggai nyan sah meunyoe mandum aturan nyoe geupeutentei: 1. string tanggai hana kosong. 2. jumlah uroe hana kureung leubeh dari 1 atawa leubeh dari 31 uroe keu buleun 1,3,5,7,8,10,12. dan jumlah uroe hana kureung leubeh dari 1 atawa leubeh dari 30 uroe keu buleun 4,6,9,11. dan, jumlah uroe hana kureung leubeh dari 1 atawa leubeh dari 29 keu buleun 2. 3. buleun han jeut kureung leubeh dari 1 atawa leubeh dari 12.4. tanggai nyan harus lam format: mm-dd-yyyy. miseu jih: valid_date (('03-11-2000') => true_date (valid) => false_date (valid) => '04-01-2012') => false_date (valid) => '04-040' => 'false_date (valid) => '06-04-2020' => true_date (valid) => '06-04/2020' => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ace_Latn,python,"
def split_words(txt):
    '''Meunurot string kata, puwoe daftar kata-kata dipeutapkan bak ruang kosong, meunyo hana ruang kosong lam teks, puwoelah bak koma ',' meunyo hana koma, puwoelah jumlah huruf ubit ngon urutan ganjil lam abjad, ord ((('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Contoh split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words (((abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ace_Latn,python,"
def is_sorted(lst):
    '''Contoh is_sorted ([1, 2, 3, 4, 5, 6]) â -> True is_sorted ([1, 2, 3, 4, 5, 6]) â -> False is_sorted ([1, 2, 3, 4, 5, 6]) â -> True is_sorted ([1, 2, 3, 4, 5, 6]) â -> True is_sorted ([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted ([1, 3, 4, 5, 6, 7]) â -> True is_sorted ([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ([1, 3, 2, 4, 5, 6, 7]) -> True is_sorted ([1, 2, 2, 3, 3, 4]) -> True is_sorted ([1, 2, 2, 2, 3, 4])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ace_Latn,python,"
def intersection(interval1, interval2):
    """"""Contoh, intersection dari interval (1, 3), (2, 4) adalah (2, 3) yang panjangnya adalah 1, yang bukan bilangan prima. jika panjang intersection adalah bilangan prima, kembalikan ""YA"", jika tidak, kembalikan ""NO"". jika dua interval tidak bersilang, kembalikan ""NO"". [input/output] contoh: intersection (((1, 2), (2, 3) ==> ""intersection (-1, 1) "" , intersection (-4) ==> ""intersection (-1, 4) "" , intersection (-2, 3) ==> ""intersection (-1, 4) "" , intersection (-1, 4) ==> ""intersection (-2, 4) "" , intersection (-1, 5) ==> "" (YES) "" , intersection (-2, 3) ==> ""intersection (-1, 4) "" , intersection (-1, 4) ==> "" , intersection (-2, 4) ==> "" intersection (-1, 4) "" , intersection (-2, 4) ==> "" intersection (-1, 4) "" , intersection (-2, 4) ==> "" intersection (-1, 5) "" , intersection (-1, 5) ==> "" (YES) "" ,""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ace_Latn,python,"
def prod_signs(arr):
    """"""Neubri array arr bilangan bulat dan neubri jumlah magnitudo bilangan bulat nyang ka ji kalikan deungen hase dari mandum tanda dari tieb-tieb angka dalam array, nyang diwakili le 1, -1 atawa 0. Catatan: neubri none untuk array kosong. Contoh: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ace_Latn,python,"
def minPath(grid, k):
    """"""Meunurot grid deungen N bareh dan N kolom (N >= 2) dan bilangan bulat positif k, tiep sel dari grid na nilai. tiep bilangan bulat dalam rentang [1, N * N] termasok deuh seucara tepat sekali bak sel-sel dari grid. Droeneuh harus meurumpok jalan minimal panyang k di grid. Droeneuh jeut neujak dari sel, dan bak tiep langkah droeneuh jeut neujak bak sel-sel tetangga, ngon kata laen, droeneuh jeut neujak bak sel-sel yang na sagoe sama deungen droeneuh sel saat nyo. Neuteupeue bahwa jalan panyang k berarti neujak bak sel-sel yang tepat (hana perle hana berbeda). Droeneuh hanjeut neujak dari grid. Jalan A (panjang k) dianggap kureng dari jalan B (panjang k) jika lheuh peuget daftar tersusun nilai-nilai bak sel-sel yang A dan B (bijak peugah jih lA_st dan lA_st), lA_st secara leksikal jih kureng dari jalan lA_st, ngon kata laen, indeks integer yang na bak grid. [A,A,A,A,A,A,B,B,B,A,B,B,A,B,A,B,B,A,B,B,C,A,B,D,D,D,E,F,F,F,G,F,G,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ace_Latn,python,"
def tri(n):
    """"""Seurutan Fibonacci dituri le mandum ureng, nyan ka geu peuruno le para matematikawan lam padum-padum abad nyang ka u likot. Namun, yang hana dituri le ureng adalah urutan Tribonacci. Urutan Tribonacci didefinisikan le pengulangan: tri(1) = 3 tri(n) = 1 + n / 2, jika n adalah genap. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), jika n adalah ganjil. Misal: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Droeneuh geubri bilangan bulat non-negatif n, droeneuh harus neuba daftar bilangan n + 1 phon dari urutan Tribonacci. Contoh: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ace_Latn,python,"
def digits(n):
    """"""Meunurot bilangan bulat positif n, meubalekkan hasil peuneubah dari angka ganjil. Meubalekkan 0 meunyo mandum angka na pasangan. Miseu jih: angka""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ace_Latn,python,"
def is_nested(string):
    '''Peuget fungsi nyang geucok string seubagoe input nyang hanya na kurung kuadrat. Fungsi nyan haroh geuwoe True meunyoe dan hanya meunyoe na sub-urutan kurung nyang sah di pat seutidak jih saboh kurung dalam sub-urutan nyan ka meusapat. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> True is_nested'[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ace_Latn,python,"

def sum_squares(lst):
    """"""Contoh: Untuk lst = [1,2,3] outputnya harus 14 Untuk lst = [1,4,9] outputnya harus 98 Untuk lst = [1,3,5,7] outputnya harus 84 Untuk lst = [1.4,4.2,0] outputnya harus 29 Untuk lst = [-2.4,1,1] outputnya harus 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ace_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Peuget fungsi nyang geuwoe True meunyoe karakter akhe nibak string nyang geubri nyan karakter abjad dan kon bagian dari saboh kata, dan False laen jih. Catatan: ""kata"" adalah saboh keulompok karakter nyang dipisahkan le spasi. Contoh: check_if_last_char_is_a_letter ((""apple pie"") â -> False check_if_last_char_is_a_letter (((apple pi e"") â -> True check_if_last_char_is_a_letter ((""apple pi e"") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ace_Latn,python,"
def can_arrange(arr):
    """"""Peuget fungsi yang akan meuwoe indeks paleng rayek dari elemen yang hana leubeh rayek dari atau sama deungen elemen seugera dilee. Meunyo hana elemen lagee nyan maka meuwoe -1. Array yang diberikan tidak akan berisi nilai duplikat. Contoh: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ace_Latn,python,"
def largest_smallest_integers(lst):
    '''Peuget fungsi nyang geuwoe tuple (a, b), di pat 'a' nakeuh bilangan bulat negatif nyang paleng rayek, ngon 'b' nakeuh bilangan bulat positif nyang paleng ubit lam saboh daftar. Meunyo hana bilangan bulat negatif atawa positif, peuriwangkan jih seubagoe None. Contoh: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ace_Latn,python,"
def compare_one(a, b):
    """"""Peuget fungsi nyang geucok bilangan bulat, float, atawa string nyang meuwakili bilangan nyata, dan meupeutron variabel nyang leubeh rayek lam tipe variabel jih nyang geubri. Peutilah Hana meunyo nilai-nilai nyan sama. Catatan: Meunyo bilangan nyata geuwakili seubagai string, titik meuganto jeut . atawa , bandingkan_saboh, 2.5) â -> 2.5 bandingkan_saboh, ""2,3"") â -> ""2,3"" bandingkan_saboh, ""5,1"", ""6"") â -> ""6"" bandingkan_saboh, ""1"", 1) â -> Hana """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ace_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Peutimbangkan peu angka n nyang teubri jeut ta tuleh seubagoe jumlah 4 bilangan bulat positif nyang sama. Contoh is_equal_to_sum_even (even) {4) == Palsu is_equal_to_sum_even (even) } == Palsu is_equal_to_sum_even (even) } == Benar """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ace_Latn,python,"
def special_factorial(n):
    """"""Faktorial Brasil didefinisikan sebagai: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! dimana n > 0 Contoh: >>> special_factorial ((4) 288 Fungsi akan menerima bilangan bulat sebagai input dan harus mengembalikan faktoril khusus dari bilangan bulat ini. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ace_Latn,python,"
def fix_spaces(text):
    """"""_Contoh-3eks, gantoe mandum spasi deungen tanda kurung, dan meunyo string na leubeh dari 2 spasi berturut-turut, maka gantoe mandum spasi berturut-turut deungen - fix_spaces ((""Contoh"") == ""Contoh"" fix_spaces ((""Contoh1"") == ""Contoh_1"" fix_spaces (((""Contoh2"") == ""_Contoh_2"" fix_spaces ((""Contoh 3"") == ""_Contoh-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ace_Latn,python,"
def file_name_check(file_name):
    """"""Peuget saboh fungsi nyang geucok string nyang meuwakili nan file, dan geuwoe 'Yes' meunyo nan file nyan valid, dan geuwoe 'No' meunyo hana. Nan file dianggap valid meunyo dan hanya meunyo mandum syarat-syarat nyoe geupeuturi: - Hana le leubeh nibak lhee angka ('0'-'9') lam nan file. - Nan file na saboh titik '.' - Substring seugolom titik hanjeut kosong, dan dimulai deungen haraf nibak huruf latin ('a'-'z' dan 'A'Z'). - Substring lheuh titik haroh salah saboh dari nyo: ['txt', 'exe', 'lld'] Contoh: file_name_check""(contoh.txt"") # => 'Yes' file_name_check""(contoh.ll1"") => 'No' (nan file haroh awai deungen huruf latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ace_Latn,python,"


def sum_squares(lst):
    """""""" Fungsi nyo akan meupeuget daftar bilangan bulat. Untuk mandum entri dalam daftar, fungsi akan dipeupusara entri bilangan bulat jika indeks jih leubèh dari 3 dan akan meu kubus entri bilangan bulat jika indeks jih leubèh dari 4 dan kon leubèh dari 3. Fungsi hana akan meu ubah entri dalam daftar yang indeks jih kon leubèh dari 3 atawa 4. Fungsi akan meupeutron jumlah mandum entri. Contoh: Untuk lst = [1,2,3] output jih harus 6 Untuk lst = [] output jih harus 0 Untuk lst = [-1,-5,2,-1,-5] output jih harus -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ace_Latn,python,"
def words_in_sentence(sentence):
    """"""Contoh1: Input: kalimat = ""Ini adalah tes"" Output: "" adalah"" Contoh2: Input: kalimat = ""biar berenang"" Output: ""go for"" Keterbatasan: * 1 <= len( kalimat) <= 100 * kalimat hanya berisi huruf """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ace_Latn,python,"
def simplify(x, n):
    """"""Fungsi nyo akan meupeutentei ekspresi x * n. Fungsi nyo akan meupeutentei True jika x * n meupeuteuntei bilangan bulat dan False jika hana. Mandua x dan n, adalah representasi string dari pecahan, dan na format berikut, <numerator>/<denominator> di pat pembilang dan penyebut adalah bilangan bulat positif. Droeneuh jeut meanggap bahwa x, dan n adalah pecahan yang valid, dan hana nol sebagai penyebut. simpliser "" 1/5 "", ""5/1"") = True simpliser "" 1/6 "", ""2/1"") = False simpliser "" 7/10 "", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ace_Latn,python,"
def order_by_points(nums):
    """"""Tuliskan fungsi yang menyortir daftar bilangan bulat yang diberikan dalam urutan naik sesuai dengan jumlah digitnya. Catatan: jika ada beberapa item dengan jumlah digit yang sama, aturlah berdasarkan indeksnya dalam daftar asli. Contoh: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ace_Latn,python,"
def specialFilter(nums):
    """"""Tulis fungsi yang mengambil array bilangan sebagai input dan mengembalikan jumlah elemen dalam array yang lebih besar dari 10 dan kedua digit pertama dan terakhir dari suatu bilangan adalah ganjil (1, 3, 5, 7, 9). Contoh: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ace_Latn,python,"
def get_max_triples(n):
    """"""Meunurot peundapat nyoe, jika bilangan bulat adalah bilangan bulat, maka bilangan bulat adalah bilangan bulat yang sama. Contoh: Input: n = 5 Output: 1 Penjelasan: a = [1, 3, 7, 13, 21] Satu-satunya bilangan bulat yang valid adalah (1, 7, 13).""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ace_Latn,python,"
def bf(planet1, planet2):
    '''Na lapan boh planet lam sistem mata uroe tanyoe: nyang paleng toe ngon mata uroe nakeuh Merkurius, nyang leubeh to nakeuh Venus, lheuh nyan bumoë, Mars, Yupiter, Saturnus, Uranus, Neptunus. Peuget saboh fungsi nyang geucok dua boh nan planet sibagoe string planet1 dan planet2. Fungsi nyan akan geuwoe saboh tuple nyang na mandum planet nyang orbit jih na di antara orbit planet1 ngon orbit planet2, geu uroih meunurot jarak jih bak mata uroe. Fungsi nyan akan geuwoe saboh tuple kosong meunyoe planet1 atawa planet2 kon nan planet nyang beutoi. Contoh bf ""(Jupiter"", ""Neptunus"") ==> (""Saturn"", ""Uranus"") bf ""(Bumoe"", ""Mercury"") ==> (""Venus"") bf ""(Mercury"", ""Uranus"") ==> (""Venus"", ""Bumoe"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ace_Latn,python,"
def sorted_list_sum(lst):
    """"""Tulislah fungsi yang menerima daftar string sebagai parameter, hapus string yang berpanjang ganjil, dan mengembalikan daftar hasil dengan urutan tersusun, daftar selalu merupakan daftar string dan tidak pernah merupakan array angka, dan dapat berisi duplikat. Urutan daftar harus menanjak menurut panjang setiap kata, dan anda harus mengembalikan daftar yang diurutkan menurut aturan tersebut. jika dua kata memiliki panjang yang sama, atur daftar secara alfabet. fungsi harus mengembalikan daftar string dalam urutan tersusun. anda dapat menganggap bahwa semua kata akan memiliki panjang yang sama. contoh: asert list_sort[""aa"", ""a"", ""aaa""]) => asert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ace_Latn,python,"
def x_or_y(n, x, y):
    """"""Saboh program sederhana yang akan meubalek nilai x jika n adalah bilangan prima dan akan meubalek nilai y jika tidak. Contoh: untuk x_atau_y ((7, 34, 12) == 34 untuk x_atau_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ace_Latn,python,"
def double_the_difference(lst):
    '''Meunurot daftar angka, meuriwang jumlah kuadrat angka lam daftar nyang ganjil. Hanjeut keu angka nyang negatif atawa kon bilangan bulat. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Meunyo daftar masukan kosong, meuriwang 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ace_Latn,python,"
def compare(game,guess):
    """"""Contoh: jika anda menebak dengan benar, nilai adalah 0, dan jika tidak, nilai adalah perbedaan mutlak antara tebakan dan skor. contoh: (([1,2,3,4,5,1], [1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ace_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Droeneuh akan geubri nan saboh kelas (saboh string) dan saboh daftar ekstensi. Ekstensi akan dipakek untuk geupasoe kelas tambahan keu kelas. Kekuatan ekstensi adalah lage nyoe: Bah CAP adalah jumlah huruf besar dalam nan ekstensi, dan bah SM adalah jumlah huruf kecil dalam nama ekstensi, kekuatan dipeutunyok le fraksi CAP - SM. Droeneuh haroh neumeu-untông ekstensi nyang paleng kuat dan neupuwoe string lam format nyoe: ClassName.StrongestExtensionName. Meunyo na dua atawa le ekstensi ngon kekuatan nyang saban, droeneuh haroh neuhidang nyang phon lam daftar. Miseu jih, meunyo droeneuh geubri ""Slices"" seubagoe kelas dan saboh daftar ekstensi: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] maka droeneuh haroh neupuwoe 'Slices.SEviRNGSliCes' 'SviRNGSliCes' 'mySviRNGSliCes' (mySviRNGSliCes' is the strongest extension), contoh: 'AA' = 'Beast_class' (_Extension_Strongest_class'), 'AA' = 'AA'_')""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ace_Latn,python,"
def cycpattern_check(a , b):
    """""""" 'Cicocococok_cek_ "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" {{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cycpattern_check}} "" '{{lang-en_cyctrue}} "" '{{lang-en_cyctrue}} "" '""""""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ace_Latn,python,"
def even_odd_count(num):
    """"""Diberi bilangan bulat. mengembalikan tuple yang memiliki jumlah digit genap dan ganjil. Contoh: genap_ganjil_bilangan(-12) ==> (1, 1) genap_ganjil_bilangan(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ace_Latn,python,"
def int_to_mini_roman(number):
    """"""Geupeuturi bilangan bulat positif, peuteumei seutidak bilangan Romawi jih seubagai string, dan peuriwang jih dalam huruf ubit.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ace_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Diberi panjang dari tiga sisi segitiga. Kembali True jika tiga sisi membentuk segitiga siku-siku, False sebaliknya. Segitiga siku-siku adalah segitiga di mana satu sudut adalah sudut lurus atau 90 derajat. Contoh: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ace_Latn,python,"
def find_max(words):
    """"""Tuliskan fungsi yang menerima daftar string. Daftar berisi kata-kata yang berbeda. Kembalikan kata dengan jumlah karakter unik yang maksimal. Jika beberapa string memiliki jumlah karakter unik yang maksimal, kembalikan yang pertama dalam urutan leksikografis.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ace_Latn,python,"
def eat(number, need, remaining):
    """"""Contoh: * makan(5, 6, 10) -> [11, 4] * makan(4, 8, 9) -> [12, 1] * makan(1, 10, 10) -> [11, 0] * makan(2, 11, 5) -> [7, 0] Variabel: @number: bilangan bulat bilangan wortel yang telah anda makan. @need: bilangan bulat bilangan wortel yang perlu anda makan. @remaining: bilangan bulat bilangan wortel yang tersisa di stok Constrain: * 0= <= 0 * 1000 = <= 0 * 0 = <= 1000 = <= 1000 Sekejap saja:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ace_Latn,python,"
def do_algebra(operator, operand):
    """"""Operasi aljabar dasar: Penjumlahan (+) Pengurangan (-)) Perkalian (*) Pembagian lantai (//) Eksponensi (**) Contoh: Operator['+', '*', '-'] array = [2, 3, 4, 5] hasil = 2 + 3 * 4 - 5 => hasil = 9 Catatan: Panjang daftar operator sama dengan panjang daftar operand dikurangi satu. Operand adalah daftar bilangan bulat non-negatif. Operator memiliki minimal satu operator, dan daftar operand memiliki minimal dua operand.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ace_Latn,python,"
def solve(s):
    """"""Anda diberi string s. jika s[i] adalah huruf, ubah hurufnya dari bawah ke atas atau sebaliknya, jika tidak, simpan saja. jika string tidak berisi huruf, ubah string. fungsi harus mengembalikan string hasilnya. contoh solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ace_Latn,python,"
def string_to_md5(text):
    """"""Jika string 'text' diberikan, kembalikan string md5 hash yang sama. Jika 'text' adalah string kosong, kembalikan None. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ace_Latn,python,"
def generate_integers(a, b):
    """"""Meunurot dua bilangan bulat positif a ngen b, puwoe angka-angka pasangan antara a ngen b, lam urutan meutahi. Miseu jih: peuget_bilangan bulat ((2, 8) => [2, 4, 6, 8] peuget_bilangan bulat ((8, 2) => [2, 4, 6, 8] peuget_bilangan bulat ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
