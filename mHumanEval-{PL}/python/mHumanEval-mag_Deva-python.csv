task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,mag_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""जांच करहो कि संख्या के देल गेल सूची में, कोनो दूगो संख्या देल गेल सीमा से एक-दूसर के करीब हई। उदाहरण: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,mag_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ई फलन के इनपुट एगो स्ट्रिंग हई जेकरा में नेस्टेड कोष्ठक के कैगो समूह होई हई। एकर उद्देश्य ई हई कि ऊ समूह के अलग-अलग स्ट्रिंग में अलग कैल जाए अउर ओकर सूची लौटाएल जाए। अलग-अलग समूह संतुलित हई (प्रत्येक खुलल ब्रैकेट ठीक से बंद हई) अउर एक दूसर के भीतर नेस्टेड ना होई हई। इनपुट स्ट्रिंग में कोनो स्थान के अनदेखा कर दी। उदाहरण: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ) ' ['() ', '(()) ', '(() ')) ]""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,mag_Deva,python,"

def truncate_number(number: float) -> float:
    """"""एगो सकारात्मक फ्लोटिंग पॉइंट संख्या देल गेल हई, एकरा पूर्णांक भाग (देल गेल संख्या से छोट सबसे बड़का पूर्णांक) अउर दशमलव (बाकी भाग हमेशा 1 से छोट) में विभाजित कैल जा सकई हई। संख्या के दशमलव भाग लौटाई। उदाहरण: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,mag_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""आपके पास एक बैंक खाता पर जमा और निकासी संचालन के एक सूची है जो शून्य शेष से शुरू होवो हय। आपका कार्य यह पता लगाना हय कि क्या किसी बिंदु पर खाता शेष शून्य से नीचे गिर जाता है, और उस बिंदु पर फ़ंक्शन को True लौटना चाहिए। अन्यथा इसे False लौटना चाहिए। उदाहरण: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,mag_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""इनपुट संख्याओं की दी गई सूची के लिए, इस डेटासेट के माध्य के आसपास औसत पूर्ण विचलन की गणना करें। औसत पूर्ण विचलन प्रत्येक तत्व और एक केंद्र बिंदु (इस मामले में माध्य) के बीच औसत पूर्ण अंतर हैः एमएडी = औसत । x - x_mean । उदाहरण: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,mag_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""इनपुट सूची के हर दो लगातार तत्वों के बीच एक संख्या 'डिलिमीटर' डालें `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,mag_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ई फलन के इनपुट एगो स्ट्रिंग हई जे नेस्टेड कोष्ठक के लेल अंतराल से अलग कैगो समूह के प्रतिनिधित्व करई हई। प्रत्येक समूह के लेल, कोष्ठक के नेस्टिंग के सबसे गहरा स्तर आउटपुट करई हई। उदाहरण के लेल (() (()) में अधिकतम दू स्तर के नेस्टिंग होई हई जबकि ((())) में तीन हई। >>> parse_nested_parens('((()) ((())) () ((()) ((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,mag_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""स्ट्रिंग के एगो इनपुट सूची के फ़िल्टर केवल ओई के लेल कैल जाई हई जे देल गेल सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,mag_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""पूर्णांक के एगो देल गेल सूची लागी, एगो योग आउर एगो सूची में सभे पूर्णांक के उत्पाद से बनल एगो ट्यूपल लौटाई. खाली योग 0 के बराबर होवे के चाहि आउर खाली उत्पाद 1 के बराबर होवे के चाहि। >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,mag_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""पूर्णांक के एगो देल गेल सूची से, अनुक्रम में देल गेल क्षण तक पाएल गेल रोलिंग अधिकतम तत्व के एगो सूची उत्पन्न कर। >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,mag_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""एगो देल गेल स्ट्रिंग के साथ शुरू होवे वाला सबसे छोटा पैलिंड्रोम खोजो। एल्गोरिथ्म विचार सरल हई: - देल गेल स्ट्रिंग के सबसे लंबा पोस्टफिक्स खोजो जे एगो पैलिंड्रोम हई। - पैलिंड्रोमिक प्रत्यय से पहिले आवे वाला स्ट्रिंग उपसर्ग के स्ट्रिंग रिवर्स के स्ट्रिंग रिवर्स के अंत में जोड़ो। >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""परीक्षण कि देल गेल स्ट्रिंग एगो पालिंड्रोम हई ।""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,mag_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इनपुट दूगो स्ट्रिंग हई a आउर b जे केवल 1 आउर 0 से बनल हई। येई इनपुट पर बाइनरी XOR निष्पादित करई हई अउर परिणाम के एगो स्ट्रिंग के रूप में वापस करई हई। >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,mag_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""स्ट्रिंग्स के सूची में से, सबसे लंबा लौटा दिही. एक ही लंबाई के कई स्ट्रिंग के मामले में पहला लौटा दिही. इनपुट सूची खाली होवे के स्थिति में कोई नहीं लौटा दिही. >>> सबसे लंबा ((([]) >>> सबसे लंबा ((['a', 'b', 'c']) 'ए' >>> सबसे लंबा ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,mag_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""दूगो पूर्णांक a आउर b के सबसे बड़का सामान्य भाजक के वापसी >>> सबसे बड़का_सामान्य_ भाजक ((3, 5) 1 >>> सबसे बड़का_सामान्य_ भाजक ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,mag_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""इनपुट स्ट्रिंग के सबसे छोट से सबसे लंबा तक के सभे उपसर्ग के सूची लौटाई >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,mag_Deva,python,"

def string_sequence(n: int) -> str:
    """"""एगो स्ट्रिंग लौटाई जे 0 से लेकर n तक के अंतरिक्ष-सीमित संख्या से शुरू होई हई। >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,mag_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""एगो स्ट्रिंग देल गेल हई, ई पता लगाईं कि केतना अलग-अलग वर्ण (केस के बावजूद) में ई >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 शामिल हई।""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,mag_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ई फलन में इनपुट एगो विशेष ASCII प्रारूप में संगीत नोट के प्रतिनिधित्व करे वाला स्ट्रिंग हई। आपके पास कई बीट्स के अनुरूप पूर्णांक स्ट्रिंग सूची के पार्स करे के हई। एगो कथा हई: 'o' नोट, अंतिम चार बीट्स 'o' क्रॉस - आधा नोट, अंतिम दो बीट्स 'o' - क्वार्टर नोट, अंतिम एक बीट्स >>> parse_music 'o' क्रॉस . o' क्रॉस . o' क्रॉस
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,mag_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""पता लगाउ कि मूल स्ट्रिंग में केतना बार एगो देल गेल सबस्ट्रिंग पावल जा सकई हई। ओवरलैपिंग केस के गिनती करई। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,mag_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""इनपुट 'शून्य' से 'नौ' तक संख्याओं के अंतरिक्ष-सीमित स्ट्रिंग हई। मान्य विकल्प 'शून्य', 'एक', 'दो', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' अउर 'नौ' हई। सबसे छोट से सबसे बड़ तक क्रमबद्ध संख्या के साथ स्ट्रिंग लौटाई >>> sort_numbers (('तीन एक पांच') 'एक तीन पांच' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,mag_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""संख्या के एगो आपूर्ति कैल गेल सूची से (कम से कम दू के लंबाई के) दू के चयन अउर वापसी करई हई जे एक दूसर के सबसे नजदीक हई अउर ओकरा क्रम में वापस करई हई (छोटका संख्या, बड़ संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,mag_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""संख्याओं के सूची (कम से कम दो तत्वों के), उस सूची में एक रैखिक परिवर्तन लागू करो, जैसे कि सबसे छोटी संख्या 0 बन जाएगी और सबसे बड़ी 1 बन जाएगी >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ।""""""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,mag_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""केवल पूर्णांक के लेल कोनो पायथन मान के देल गेल सूची के फ़िल्टर >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,mag_Deva,python,"

def strlen(string: str) -> int:
    """"""देल गेल स्ट्रिंग के रिटर्न लंबाई >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,mag_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""एगो देल गेल संख्या n के लेल, सबसे बड़ संख्या के खोजई जे n के समान रूप से विभाजित करई हई, n से छोट >>> सबसे बड़_डिवाइडर ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,mag_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""एगो देल गेल पूर्णांक के अभाज्य गुणनखंड के सूची सबसे छोट से लेके सबसे बड़ तक क्रम में लौटाई। प्रत्येक गुणनखंड के गुणनखंड के संख्या के बराबर सूचीबद्ध कैल जाए के चाहि। इनपुट संख्या सभे गुणनखंड के गुणनफल के बराबर होए के चाहि >>> कारकवांकित करे (,) [2, 2, 2] >>> कारकवांकित करे (,) [5, 5] >>> कारकवांकित करे (70)) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,mag_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""पूर्णांक के सूची से, ओई सभे तत्व के हटा देई जे एक से अधिक बार होई हई। इनपुट में जैसन ही तत्व के क्रम छोड़ देल जाई छलई। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,mag_Deva,python,"

def flip_case(string: str) -> str:
    """"""एगो देल गेल स्ट्रिंग लागी, लघु अक्षर के बड़ अक्षर में आउर बड़ अक्षर के लघु अक्षर में घुमाइ। >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,mag_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""स्ट्रिंग के सूची के एक स्ट्रिंग में जोड़ल जाय >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,mag_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""केवल उन स्ट्रिंग्स के लिए इनपुट सूची फ़िल्टर करे जे एक दिहल गेल उपसर्ग से शुरू होवो हय। >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,mag_Deva,python,"

def get_positive(l: list):
    """"""सूची में केवल धनात्मक संख्याएँ लौटाएं. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,mag_Deva,python,"

def is_prime(n):
    """"""अगर कोनो देल गेल संख्या अभाज्य हई, त सही लौटाई, आउर अन्यथा गलत। >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,mag_Deva,python,"import math


def poly(xs: list, x: float):
    """"""xs एगो बहुपद के गुणांक हई। find_zero x के ऐसन पाएल जाई हई कि poly ((x) = 0। find_zero केवल शून्य बिंदु के लौटाबई हई, भले ही बहुत हो। एकर अलावा, find_zero केवल सूची x के लेई हई जेकरा पास गुणांक के सम संख्या अउर सबसे बड़का गैर-शून्य गुणांक हई काहेकी ई एगो समाधान के गारंटी देई हई। >>> गोल (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> गोल ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""बिंदु x पर गुणांक xs वाला बहुपद के मूल्यांकन कर हई। वापसी xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,mag_Deva,python,"

def sort_third(l: list):
    """"""ई फलन एगो सूची l लेई हई अउर एगो सूची l' वापस करई हई, येई तरह से कि l' सूचकांक में l के जौरे समान हई जे तीन से विभाजित न होई हई, जबकि एकर मान सूचकांक में जेकर तीन से विभाजित होई हई, l के संबंधित सूचकांक के मान के बराबर होई हई, लेकिन सॉर्ट कैल गेल हई। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,mag_Deva,python,"

def unique(l: list):
    """"""एगो सूची में क्रमबद्ध अद्वितीय तत्व के लौटाबई >>> अद्वितीय (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,mag_Deva,python,"

def max_element(l: list):
    """"""सूची में अधिकतम तत्व लौटाओ. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,mag_Deva,python,"

def fizz_buzz(n: int):
    """"""संख्या 7 के पूर्णांक में प्रकट होवे के संख्या के लौटाबई जे 11 या 13 से विभाजित हई। >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,mag_Deva,python,"

def sort_even(l: list):
    """"""ई फलन एगो सूची l लेई हई अउर एगो सूची l' वापस करई हई, येई तरह से कि l' विषम सूचकांक में l के जौरे समान हई, जबकि एकर मान सम सूचकांक में l के सम सूचकांक के मान के बराबर होई हई, लेकिन सॉर्ट कैल गेल हई। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,mag_Deva,python,"

def encode_cyclic(s: str):
    """"""encode_cyclic फलन के साथ इनपुट स्ट्रिंग के रूप में एन्कोड करल गेलई हे। डिकोड करल गेल स्ट्रिंग लौटाबई हे।""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""तीन वर्ण के चक्रवाचक समूह द्वारा एन्कोडेड स्ट्रिंग लौटाई।""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,mag_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib एगो फाइबोनैचि संख्या हई अउर ई भी अभाज्य हई। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,mag_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero पूर्णांक के एगो सूची के इनपुट के रूप में लेई हई। ई सही लौटाई हई अगर सूची में तीन अलग-अलग तत्व हई जे शून्य के बराबर हई, अउर अन्यथा गलत हई। >>> triple_sum_to_zero (([1, 3, 5, 0]) गलत >>> triple_sum_to_zero (([1, 3, -2, 1]) सही >>> triple_sum_to_zero (([1, 2, 3, 7]) गलत >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) सही >>> triple_sum_to_zero ([1, 3, -2, 1]) गलत """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,mag_Deva,python,"

def car_race_collision(n: int):
    """"""एगो सड़क के कल्पना कर लेली जे एगो बिलकुल सीधा अनंत लंबाई के रेखा हई। n कार बाएं से दाएं ड्राइव कर रहल हई; एक साथ, n कार के एगो अलग सेट दाएं से बाएं ड्राइव कर रहल हई। कार के दु सेट एक-दूसरे से बहुत दूर रहके शुरू होई हई। सभे कार एके गति में चलई हई। दू कार के टकराई कहल जाई हई जब बाएं से दाएं चले वाला कार दाएं से बाएं चले वाला कार से टकराई हई। हालांकि, कार अनंत रूप से मजबूत अउर मजबूत हई; नतीजतन, ऊ अपन प्रक्षेपवक्र में आगे बढ़ई हई जैसे कि ऊ टकराई न हो। ई फलन ऐसन टक्कर के संख्या आउटपुट करई छई। """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,mag_Deva,python,"

def incr_list(l: list):
    """"""1. के साथ तत्वों के साथ वापसी सूची >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,mag_Deva,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero इनपुट के रूप में पूर्णांक के एगो सूची लेई हई। ई सही लौटाई हई अगर सूची में दू अलग-अलग तत्व हई जे शून्य के बराबर हई, अउर अन्यथा गलत हई। >>> pairs_sum_to_zero([1, 3, 5, 0]) गलत >>> pairs_sum_to_zero[(1, 3, -2, 1]) गलत >>> pairs_sum_to_zero([1, 2, 3, 7]) गलत >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) सही >>> pairs_sum_to_zero[1]) गलत """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,mag_Deva,python,"

def change_base(x: int, base: int):
    """"""इनपुट संख्या x के संख्यात्मक आधार के आधार में बदल देई. रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाई. आधार संख्या 10 से कम हई। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,mag_Deva,python,"

def triangle_area(a, h):
    """"""एगो त्रिकोण लागी एगो पक्षवा के लंबाई और उच्च वापसी क्षेत्रवा के देवल गेल हो। >>> triangle_area""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,mag_Deva,python,"

def fib4(n: int):
    """"""Fib4 संख्या क्रम एगो क्रम हई जे फिबोनैचि अनुक्रम के समान हई जे निम्नलिखित रूप में परिभाषित कैल गेल हई: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 संख्या क्रम के n-वें तत्व के कुशलता से गणना करे के लेल एगो फ़ंक्शन लिखें। पुनरावृत्ति के उपयोग न करें। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,mag_Deva,python,"

def median(l: list):
    """"""सूची में तत्वों के वापसी मध्यस्थ l. >>> मध्यस्थ (([3, 1, 2, 4, 5]) 3 >>> मध्यस्थ (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,mag_Deva,python,"

def is_palindrome(text: str):
    """"""जांच हई कि कि देल गेल स्ट्रिंग एगो पालिंड्रोम हई >>> is_palindrome('') सही >>> is_palindrome('aba') सही >>> is_palindrome('aaaaa') सही >>> is_palindrome('zbcd') गलत """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,mag_Deva,python,"

def modp(n: int, p: int):
    """"""वापसी 2^n मॉडुलो p (संख्या के बारे में जागरूक हो). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,mag_Deva,python,"

def encode_shift(s: str):
    """"""एन्कोड_शिफ्ट फलन के साथ इनपुट स्ट्रिंग के रूप में एन्कोड करल गेलई हे। डिकोड करल गेल स्ट्रिंग लौटाबई हे। """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""वर्णमाला में हर वर्ण के 5 से स्थानांतरित करके एन्कोडेड स्ट्रिंग लौटाई।""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,mag_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels एगो फलन हई जे स्ट्रिंग के लेलई आउर बिना स्वर के स्ट्रिंग लौटाई हई। >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,mag_Deva,python,"

def below_threshold(l: list, t: int):
    """"""यदि सूची में सभे संख्या सीमा t से नीचे हई त सही लौटाई। >>> below_threshold([1, 2, 4, 10], 100) सही >>> below_threshold([1, 20, 4, 10], 5) गलत """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,mag_Deva,python,"

def add(x: int, y: int):
    """"""दो संख्या x और y जोड़ो >>> जोड़ो ((2, 3) 5 >>> जोड़ो ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,mag_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""अगर दो शब्द में समान वर्ण हई त जांच करईं। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') सही >>> same_chars (('abcd', 'dddddddddabc') सही >>> same_chars (('dddddddabc', 'abcd') सही >>> same_chars (('eabcd', 'dddddddddabc') गलत >>> same_chars ((('abcd', 'dddddddabddce') गलत >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') गलत """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,mag_Deva,python,"

def fib(n: int):
    """"""फिबोनाकी के n-वें अंक के प्राप्ति के लेल. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,mag_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""<"" और "">"" के एगो स्ट्रिंग हई। अगर हर ओपनिंग ब्रैकेट में एगो संबंधित क्लोजिंग ब्रैकेट होई छई त True लौटाई। >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,mag_Deva,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,mag_Deva,python,"

def common(l1: list, l2: list):
    """"""दो सूचियों के लिए छांटे गए अद्वितीय सामान्य तत्व लौटाएं। >>> सामान्य ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य ([5, 3, 2, 8], [3, 2]) [2, 3] ।""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,mag_Deva,python,"

def largest_prime_factor(n: int):
    """"""n के सबसे बड़ अभाज्य गुणनखंडवा लौटावे के. मान ले कि n > 1 और एगो अभाज्य संख्यावा न हो। >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,mag_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n एगो फलन हई जे 1 से n तक के संख्या के योग हई। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,mag_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets एगो स्ट्रिंग हई ""("" और "")"". अगर हर ओपनिंग ब्रैकेट में एगो संबंधित क्लोजिंग ब्रैकेट होई हई त True लौटाई। >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,mag_Deva,python,"

def derivative(xs: list):
    """"""xs एगो बहुपद के गुणांक के प्रतिनिधित्व कर हई। xs[0] + xs[1] * x + xs[2] * x^2 + .... एही रूप में ई बहुपद के व्युत्पन्न लौटाई। >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,mag_Deva,python,"

def fibfib(n: int):
    """"""FibFib संख्या क्रम Fibbonacci sequence के समान एक क्रम है, जिसे निम्न प्रकार से परिभाषित किया जाता हैः fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया fibfib संख्या क्रम के n-वें तत्व की कुशलता से गणना करने के लिए एक फ़ंक्शन लिखें। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,mag_Deva,python,"
FIX = """"""एगो फलन लिखो vowels_count जे एगो शब्द के प्रतिनिधित्व करे वाला स्ट्रिंग के इनपुट के रूप में लेई हई अउर स्ट्रिंग में स्वर के संख्या लौटाई हई। येई मामला में स्वर 'a', 'e', 'i', 'o', 'u' हई। ईहां, 'y' भी स्वर हई, लेकिन केवल जब ई देल गेल शब्द के अंत में होई हई। उदाहरणः >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""अधिक परीक्षण के मामले जोड़ें।""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,mag_Deva,python,"
def circular_shift(x, shift):
    """"""परिपत्र संख्या x के अंक के स्थानांतरित कर के, अंक के स्थानांतरण द्वारा दाहिने स्थानांतरित कर के परिणाम के स्ट्रिंग के रूप में लौटाई. यदि स्थानांतरण > अंक के संख्या, अंक के उलटा लौटाई. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,mag_Deva,python,"
def digitSum(s):
    """"""कार्य एगो फ़ंक्शन लिखई जे इनपुट के रूप में एगो स्ट्रिंग लेई हई अउर केवल ऊपरी वर्ण के योग के वापस करई हई' ASCII कोड। उदाहरण: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,mag_Deva,python,"
def fruit_distribution(s,n):
    """"""ई कार्य में, अपने के एगो स्ट्रिंग देल जयतई जे एगो फल के टोकरी में वितरित कैल गेल सेब आउर संतरा के संख्या के प्रतिनिधित्व करई हई ई टोकरी में सेब, संतरा आउर आम के फल होई हई। स्ट्रिंग के देल गेल जे संतरा आउर सेब के कुल संख्या के प्रतिनिधित्व करई हई आउर टोकरी में फल के कुल संख्या के प्रतिनिधित्व करे वाला एगो पूर्णांक टोकरी में आम के फल के संख्या लौटाई हई। उदाहरण के लेल: fruit_distribution""5(सेब और 6 संतरा"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 सेब और 1 संतरा"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 सेब और 3 संतरा"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 सेब और 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,mag_Deva,python,"
def pluck(arr):
    """"""""एक सरणी के एगो शाखा के प्रतिनिधित्व करे वाला एगो पेड़ के देल गेल हई जेकरा में गैर-ऋणात्मक पूर्णांक नोड हई, त राउर कार्य नोड में से एगो के चुनई आउर वापस कर देई हई। चुनल गेल नोड सबसे छोट सम मान वाला नोड होए के चाहि। यदि एकेगो सबसे छोट सम मान वाला कैगो नोड पाएल जाई हई, त सबसे छोट सूचकांक वाला नोड लौटा देई। चुनल गेल नोड के एगो सूची में लौटाएल जाए के चाहि, [smallest_value, its index], अगर कोनो सम मान न हई चाहे देल गेल सरणी खाली हई, त लौटा देई []। उदाहरण 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 में सबसे छोट सम मान हई, अउर 2 में सबसे छोट सूचकांक हई। उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 में सबसे छोट मान हई, अउर 2 में सबसे छोट सम मान हई। उदाहरण 3: इनपुटः [] आउटपुटः [4:] इनपुटः [5, 3, 4,] आउटपुटः 0, 1 आउटपुटः 0 सबसे छोट नोड हई, लेकिन दू शून्य मान हई। उदाहरणः सबसे छोट नोड के लंबाई शून्य हई, लेकिन सबसे छोट सूचकांक शून्य हई। * 1 के साथ, हम सबसे छोट नोड चुनबई, जेकरा में शून्य हई। उदाहरणः 1 * लंबाई <= 10000 है, लेकिन शून्य मान शून्य हई।""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,mag_Deva,python,"
def search(lst):
    '''एगो पूर्णांक के आवृत्ति ओई संख्या हई जे सूची में प्रकट होई हई। यदि ऐसन कोनो मान मौजूद ना हई, त -1 लौटाई। उदाहरण: खोजें [4, 1, 2, 2, 3, 1]) == 2 खोजें [1, 2, 2, 3, 3, 3, 4, 4]) == 3 खोजें [5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,mag_Deva,python,"
def strange_sort_list(lst):
    '''पूर्णांक के सूची देल गेल, अजीब क्रम में सूची लौटाई. अजीब क्रमबद्धता, तब हई जब आप न्यूनतम मान से शुरू करई हई, त शेष पूर्णांक के अधिकतम, त न्यूनतम आउर ऐसन नै होई हई। उदाहरण: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,mag_Deva,python,"
def triangle_area(a, b, c):
    '''एगो त्रिकोण के तीन भुजा के लंबाई के लेल, यदि तीन भुजा एगो वैध त्रिकोण बनाबई हई त त्रिकोण के क्षेत्रफल के 2 दशमलव बिंदु तक गोल करके लौटाई। अन्यथा -1 लौटाई। तीन भुजा एगो वैध त्रिकोण बनाबई हई जब कोनो दु भुजा के योग तीसरा भुजा से बड़ होई हई। उदाहरण: त्रिकोण_क्षेत्रफल ((3, 4, 5) == 6.00 त्रिकोण_क्षेत्रफल ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,mag_Deva,python,"
def will_it_fly(q,w):
    '''एगो फलन लिखू जे सही लौटाई यदि वस्तु q उड़ई हई, आउर गलत अन्यथा। वस्तु q उड़ई हई अगर ई संतुलित हई (ई एगो पालिंड्रोमिक सूची हई) आउर एकर तत्व के योग अधिकतम संभावित वजन w से कम चाहे बराबर हई। उदाहरण: will_it_fly([1, 2], 5) â -> False # 1+2 अधिकतम संभावित वजन से कम हई, लेकिन ई असंतुलित हई। will_it_fly([3, 2, 3], 1) â -> False # ई संतुलित हई, लेकिन 3+2+3 अधिकतम संभावित वजन से बेसी हई। will_it_fly[3, 2, 3], 9) â -> True # 3+23 अधिकतम संभावित वजन से कम हई, अउर ई संतुलित हई। will_it_fly([3], 5) â -> True # 3 अधिकतम संभावित वजन से कम हई, अउर ई संतुलित हई।'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,mag_Deva,python,"
def smallest_change(arr):
    """"""पूर्णांक के एगो सरणी के देखते हुए, ऐसन तत्व के न्यूनतम संख्या ज्ञात करअई जे सरणी के पालिंड्रोमिक बनावे के लेल बदले के आवश्यकता होई हई। एगो पालिंड्रोमिक सरणी एगो ऐसन सरणी हई जे पिछला अउर पिछला दुनहु के समान पढ़ल जाई हई। एक परिवर्तन में, आप एगो तत्व के कोनो दोसर तत्व में बदल सकई हई। उदाहरण के लेल: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,mag_Deva,python,"
def total_match(lst1, lst2):
    '''एगो फलन लिखू जे स्ट्रिंग के दूगो सूची के स्वीकार कर हई अउर ऊ सूची के वापस कर देई जेकरा सूची के सभी स्ट्रिंग में वर्ण के कुल संख्या दोसर सूची से कम हई। अगर दुगो सूची में वर्ण के समान संख्या हई, त पहिला सूची लौटाई। उदाहरण कुल_मैच (https://www.toll.com/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/strings/list/list/strings/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list/list'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,mag_Deva,python,"
def is_multiply_prime(a):
    """"""एगो फलन लिखू जे सही लौटाई अगर देल गेल संख्या 3 अभाज्य संख्या के गुणनफल हई आउर अन्यथा गलत हई। ई जानके कि (ए) 100 से कम हई। उदाहरण: is_multiply_prime(30) == सही 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,mag_Deva,python,"
def is_simple_power(x, n):
    """"""एगो फलन के लिखई हई जे सही लौटाई हई अगर एगो संख्या x n के एगो साधारण शक्ति हई अउर दूसर मामला में गलत हई। x n के एगो साधारण शक्ति हई अगर n**int=x उदाहरण के लेलः is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,mag_Deva,python,"
def iscube(a):
    '''एगो फलन लिखू जे एगो पूर्णांक a के लेलई आउर अगर ई पूर्णांक कुछ पूर्णांक संख्या के घन हई त सही लौटाई। ध्यान दें: आप मान सकई हई कि इनपुट हमेशा मान्य होई हई। उदाहरण: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,mag_Deva,python,"
def hex_key(num):
    """"""आपके पास एक फ़ंक्शन लिखने का कार्य है जो हेक्साडेसिमल संख्या को स्ट्रिंग के रूप में प्राप्त करता है और उन हेक्साडेसिमल अंकों की संख्या को गिनता है जो प्राइम हैं (प्राइम नंबर, या एक प्राइम, 1 से अधिक प्राकृतिक संख्या है जो दो छोटी प्राकृतिक संख्याओं का उत्पाद नहीं है) । हेक्साडेसिमल अंकों के 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम नंबर 2, 3, 5, 7, 11, 13, 17,... हैं, इसलिए आपको निम्नलिखित अंकों की संख्या निर्धारित करनी होगी: 2, 3, 5, 7, B (= दशमलव 11), D (= दशमलव 13) । ध्यान दें: आप मान सकते हैं कि इनपुट हमेशा सही या खाली स्ट्रिंग है, और प्रतीक A,B,C,D,E,F हमेशा बड़े अक्षरों में हैं। उदाहरण: num = ""AB"" के लिए आउटपुट num = 1. होना चाहिए, ""1077E"" के लिए आउटपुट 2. होना चाहिए, num = ""AB33"" के लिए num = ""AB1ED"" होना चाहिए, num = 4. ""BC"" के लिए num = ""BC"" होना चाहिए, num = 6.06712345DEFD ""2020"" के लिए आउटपुट 2. होना चाहिए।""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,mag_Deva,python,"
def decimal_to_binary(decimal):
    """"""एगो संख्या दशमलव रूप में देल जाई हई अउर आपका कार्य एकरा बाइनरी प्रारूप में परिवर्तित करनाई हई। फलन के एगो स्ट्रिंग लौटाबे के चाहि, जोनमे प्रत्येक वर्ण एगो बाइनरी संख्या के प्रतिनिधित्व करई हई। स्ट्रिंग में प्रत्येक वर्ण '0' चाहे '1' होई छई। स्ट्रिंग के शुरुआत में अउर अंत में अतिरिक्त वर्ण 'db' होई छई। अतिरिक्त वर्ण प्रारूप में मदद करे के लेल होई हई। उदाहरण: दशमलव_से_बाइनरी(15) # ""db1111db"" दशमलव_से_बाइनरी32) # ""db100000db"" लौटाई""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,mag_Deva,python,"
def is_happy(s):
    """"""एगो स्ट्रिंग के तबे खुश मानल जाई हई जब एकर लंबाई कम से कम 3 हो अउर हर 3 लगातार अक्षर अलग हो उदाहरण के लेल: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (adb) => True is_happy (ad) => True is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,mag_Deva,python,"
def numerical_letter_grade(grades):
    """"""ई सेमेस्टर के अंतिम हफ़्ते हइ आउ शिक्षक के छात्र सब के ग्रेड देवे के हइ । शिक्षक ग्रेडिंग के लेल अपन खुद के एल्गोरिथ्म बना रहलथिन ह । एकमात्र समस्या ई हइ कि ऊ ग्रेडिंग के लेल उपयोग करल कोड के भुला गेलथिन ह । ऊ तोरा कुछ छात्र के लेल ग्रेड के सूची देले हथिन आउ तोरा एगो फलन लिखे के होतइ जे निम्नलिखित तालिका के उपयोग करके लेटर ग्रेड के सूची आउटपुट कर सकऽ हइ: GPA । लेटर ग्रेड 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 उदाहरण: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,mag_Deva,python,"
def prime_length(string):
    """"""एगो फलन लिखल जाय जे एगो स्ट्रिंग के लेलई आउर अगर स्ट्रिंग लंबाई एगो अभाज्य संख्या हई त सही लौटाई चाहे गलत अन्यथा उदाहरण prime_length (('hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,mag_Deva,python,"
def starts_one_ends(n):
    """"""एगो धनात्मक पूर्णांक n देल गेल हई, एन-अंकीय धनात्मक पूर्णांक के संख्या के गणना लौटाई जे 1 से शुरू चाहे समाप्त होई हई।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,mag_Deva,python,"
def solve(N):
    """"""एगो धनात्मक पूर्णांक N के लेल, एकर अंक के कुल योग के बाइनरी में लौटाई. उदाहरण N = 1000 के लेल, अंक के योग 1 होई आपुट ""1"" होए के चाहि। N = 150 के लेल, अंक के योग 6 होई आपुट ""110"" होए के चाहि। N = 147 के लेल, अंक के योग 12 होई आपुट ""1100"" होए के चाहि। चरः @N पूर्णांक प्रतिबंधः 0 â‰¤ N â‰¤ 10000. आउटपुटः बाइनरी संख्या के एगो स्ट्रिंग """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,mag_Deva,python,"
def add(lst):
    """"""पूर्णांक के एगो गैर-खाली सूची देल गेल हई lst. जोड़े के लेल सम तत्व के जोड़ई जे विषम सूचकांक पर हई। उदाहरण: जोड़ (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,mag_Deva,python,"
def anti_shuffle(s):
    """"""एगो फ़ंक्शन लिखू जे एगो स्ट्रिंग के लेलई आउर ओकर एगो क्रमबद्ध संस्करण लौटाबई। स्ट्रिंग के क्रमबद्ध संस्करण, एगो स्ट्रिंग हई जहां सभे शब्द (अंतर के द्वारा अलग) के एगो नया शब्द द्वारा प्रतिस्थापित कैल जाई हई जहां सभे वर्ण ASCII मान के आधार पर आरोही क्रम में व्यवस्थित कैल गेल हई। नोट: आपको वाक्य में शब्द अउर रिक्त स्थान के क्रम रखे के चाहि। उदाहरण के लेल: anti_shuffle ((('Hi') 'Hi' anti_shuffle (('hello') 'ehllo' anti_shuffle (('Hello World!!!') 'Hello !!!Wdlor' लौटाबई हई।""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,mag_Deva,python,"
def get_row(lst, x):
    """"""आपके पास एक 2 आयामी डेटा, नेस्टेड सूचियों के रूप में, जो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में भिन्न संख्या में कॉलम हो सकते हैं। lst, और पूर्णांक x दिए गए, सूची में पूर्णांक x खोजें, और ट्यूपल्स की सूची वापस करें, [(x1, y1), (x2, y2) ...] जैसे कि प्रत्येक ट्यूपल एक निर्देशांक है - (पंक्ति, कॉलम), 0 से शुरू। निर्देशांक को क्रमबद्ध करें। प्रारंभ में पंक्तियों द्वारा आरोही क्रम में। इसके अलावा, पंक्ति के निर्देशांक को क्रमबद्ध करें। उदाहरण: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_((1), 1) [] == == [[पंक्ति 1, 2, 3, 2]], 3 == [2, 2]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,mag_Deva,python,"
def sort_array(array):
    """"""ऋणात्मक न होवे वाला पूर्णांक के एगो सरणी देल गेल हई, क्रमबद्ध करे के बाद देल गेल सरणी के एगो प्रति वापस कर देई, यदि योग ((पहला सूचकांक मान, अंतिम सूचकांक मान) विषम हई त देल गेल सरणी के आरोही क्रम में क्रमबद्ध कैल जाई, चाहे यदि योग ((पहला सूचकांक मान, अंतिम सूचकांक मान) सम हई त ओकरा अवरोही क्रम में क्रमबद्ध कैल जाई। नोटः * देल गेल सरणी के न बदलो। उदाहरण: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,mag_Deva,python,"
def encrypt(s):
    """"""एगो फलन एन्क्रिप्ट बनाबई जे एगो स्ट्रिंग के एगो तर्क के रूप में लेई हई अउर वर्णमाला के घुमा के एगो एन्क्रिप्टेड स्ट्रिंग लौटाई हई। वर्णमाला के ऐसन तरीका से घुमाएल जाए के चाहि कि अक्षर दू स्थान पर दू गुना नीचे स्थानांतरित हो जाए। उदाहरण के लेल: एन्क्रिप्ट (('hi') 'lm' एन्क्रिप्ट (('asdfghjkl') 'ewhjklnop' एन्क्रिप्ट (('gf') 'kj' एन्क्रिप्ट (('et') 'ix' लौटाई हई।""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,mag_Deva,python,"
def next_smallest(lst):
    """"""आपके पास पूर्णांक के एगो सूची हई। एगो फलन लिखें next_smallest() जे सूची के दूसरा सबसे छोटा तत्व लौटाई हई। अगर ऐसन कोई तत्व ना हई त शून्य लौटाई। next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == कोई नहीं next_smallest([1, 1]) == कोई नहीं """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,mag_Deva,python,"
def is_bored(S):
    """"""""हम"" के साथ शुरू होवे वाला एगो वाक्य एगो बोरियत हको। वाक्य के सीमा '.', '?' या '! ' से बनावल जा हय। उदाहरण के लिए: >>> is_bored ((""हैलो वर्ल्ड"") 0 >>> is_bored ((""आकाश नीला हइ। सूरज चमकऽ हइ। हमरा ई मौसम अच्छा लगऽ हइ"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,mag_Deva,python,"
def any_int(x, y, z):
    '''एगो फलन बनावे जे 3 संख्या लेई। सही लौटाई यदि एगो संख्या दोसर दुगो के योग के बराबर हई, अउर सभे संख्या पूर्णांक हई। कोनो दोसर मामला में गलत लौटाई। उदाहरण any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,mag_Deva,python,"
def encode(message):
    """"""एगो फलन लिखू जे एगो संदेश लेई हई, अउर ऐसन तरीका से एन्कोड करई हई कि ई सभे अक्षर के केस के स्वैप करई हई, संदेश में सभे स्वर के ऊ अक्षर के जौरे प्रतिस्थापित करई हई जे अंग्रेजी वर्णमाला में ओई स्वर के 2 स्थान पर देखाई देई हई। केवल अक्षर मानई। उदाहरण: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,mag_Deva,python,"

def skjkasdkd(lst):
    """"""आपके पास पूर्णांक की सूची है. आपको सबसे बड़ा अभाज्य मान ढूंढना होगा और उसके अंकों के योग को लौटना होगा. उदाहरण: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] आउटपुट 10 होना चाहिए For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] आउटपुट 25 होना चाहिए For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] आउटपुट 13 होना चाहिए For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] आउटपुट 11 होना चाहिए For lst = [0,81,12,3,21,1] आउटपुट 3 होना चाहिए For lst = [0,1,8,2,1,7] आउटपुट 7 होना चाहिए""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,mag_Deva,python,"
def check_dict_case(dict):
    """"""एगो शब्दकोश देल गेल हई, अगर सभे कुंजी छोट अक्षर में स्ट्रिंग हई चाहे सभे कुंजी बड़का अक्षर में स्ट्रिंग हई, त वापस करे False. फलन के वापस करे के चाहि False देल गेल शब्दकोश खाली हई। उदाहरण: check_dict_case{""a"":""apple"", ""b"":""banana""}) के वापस करे के चाहि True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) के वापस करे के चाहि False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) के वापस करे के चाहि False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) के वापस करे के चाहि False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) के वापस करे के चाहि True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,mag_Deva,python,"
def count_up_to(n):
    """"""एगो फलन लागू कर हई जे एगो गैर-ऋणात्मक पूर्णांक लेई हई अउर पहिला n पूर्णांक के एगो सरणी के लौटाई हई जे अभाज्य संख्या हई अउर n से छोट हई। उदाहरण के लेलः count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,mag_Deva,python,"
def multiply(a, b):
    """"""फलन के पूरा करहु जे दूगो पूर्णांक के लेई हई अउर उनकर इकाई अंक के उत्पाद के वापस करई हई। मान ल कि इनपुट हमेशा मान्य होई हई। उदाहरण: गुणा करे ((148, 412) 16 लौटावे के चाहि। गुणा करे ((19, 28) 72 लौटावे के चाहि। गुणा करे ((2020, 1851) 0 लौटावे के चाहि। गुणा करे ((14,-15) लौटावे के चाहि 20। """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,mag_Deva,python,"
def count_upper(s):
    """"""एगो स्ट्रिंग s देल गेल हई, सम सूचकांक में अपरकेस स्वर के संख्या के गिनती करई। उदाहरण के लेल: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 लौटाई """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,mag_Deva,python,"
def closest_integer(value):
    '''एगो फलन बनाबई जे एगो संख्या के प्रतिनिधित्व करे वाला मान (स्ट्रिंग) लेई अउर एकरा सबसे नज़दीकी पूर्णांक लौटाई। यदि संख्या दू पूर्णांक से समान दूरी पर हई, त एकरा शून्य से दूर कर दी। उदाहरण >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 नोट: शून्य से दूर गोल करे के अर्थ हई कि यदि देल गेल संख्या दू पूर्णांक से समान दूरी पर हई, त जे आपके लौटावे के चाहि ऊ हई जे शून्य से सबसे दूर हई। उदाहरण के लेल closest_integer "" ((14.5"") लौटावे के चाहि 15 अउर closest_integer "" ((-14.5"") लौटावे के चाहि -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,mag_Deva,python,"
def make_a_pile(n):
    """"""एगो धनात्मक पूर्णांक n के लेल, अपने के पत्थर के n स्तर के ढेर बनावे के हई। पहिला स्तर में n पत्थर होई हई। अगला स्तर में पत्थर के संख्या हई: - अगला विषम संख्या अगर n विषम हई। - अगला सम संख्या अगर n सम हई। एगो सूची में प्रत्येक स्तर में पत्थर के संख्या लौटाई, जहां सूचकांक i में तत्व स्तर (i+1) में पत्थर के संख्या के प्रतिनिधित्व करई हई। उदाहरण: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,mag_Deva,python,"
def words_string(s):

","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,mag_Deva,python,"
def choose_num(x, y):
    """"""ई फलन दूगो धनात्मक संख्या x आउर y लेई हई अउर सबसे बड़ सम पूर्णांक के लौटाई हई जे [x, y] समावेशी श्रेणी में हई। अगर ऐसन कोनो संख्या ना हई, त फलन के -1 लौटाबे के चाहि। उदाहरण के लेल: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,mag_Deva,python,"
def rounded_avg(n, m):
    """"""अगर n m से बड़ हई, त फेर -1 लौटाई। उदाहरण: rounded_avg{1, 5) => ""0b11"" rounded_avg{7, 5) => -1 rounded_avg{10, 20) => ""0b1111"" rounded_avg{20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,mag_Deva,python,"
def unique_digits(x):
    """"""सकारात्मक पूर्णांक x के एगो सूची देल गेल हई। सभे तत्व के एगो क्रमबद्ध सूची लौटाई जेकरा में कोनो सम अंक न हई। नोटः लौटाएल गेल सूची के क्रम में क्रमबद्ध कैल जाए के चाहि। उदाहरण के लेल: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,mag_Deva,python,"
def by_length(arr):
    """"""पूर्णांक के एगो सरणी देल गेल हई, 1 अउर 9 के बीच के पूर्णांक के क्रमबद्ध करई हई, परिणामी सरणी के उलट करई हई, अउर फिर प्रत्येक अंक के ओकर संबंधित नाम से बदलई हई ""एक"", ""दो"", ""तीन"", ""चार"", ""पांच"", ""छह"", ""सात"", ""आठ"", ""नौ"" से। उदाहरण के लेलः arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""आठ"", ""चार"", ""तीन"", ""दो"", ""दो"", ""एक"", ""एक""] यदि सरणी खाली हई, त एगो रिक्त वापसीः arr = [] return [] यदि सरणी में कोनो अजीब संख्या हई, त एकरा अनदेखा कर दीः arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55, return -1] return ['one'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,mag_Deva,python,"
def f(n):
    """"""फलन f के लागू कर हई जे n के पैरामीटर के रूप में ले हई, अउर आकार n के एगो सूची लौटाबई हई, येई तरह से कि यदि i सम हई त इंडेक्स i पर तत्व के मान i के गुणनखंड होई हई चाहे 1 से i तक के संख्या के योग होई हई। i 1 से शुरू होई हई। i के गुणनखंड 1 से i तक के संख्या के गुणनखंड होई हई (1 * 2 * ... * i) उदाहरण: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,mag_Deva,python,"
def even_odd_palindrome(n):
    """"""एगो धनात्मक पूर्णांक n देला पर, एगो ट्यूपल लौटाई जेकरा में सम आउर विषम पूर्णांक पालिंड्रोम के संख्या होई हई जे श्रेणी में होई हई। उदाहरण 1: इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3 हई, जेकरा में से एगो सम हई, अउर दूगो विषम हई। उदाहरण 2: इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हई। ओकरा में से चार सम हई, अउर 6 विषम हई। नोटः 1. 1 <= n <= 10^3 2. ट्यूपल क्रमशः सम आउर विषम पूर्णांक पालिंड्रोम के संख्या लौटाई हई। """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,mag_Deva,python,"
def count_nums(arr):
    """"""एगो फलन लिखू count_nums जे पूर्णांक के एगो सरणी लेई हई अउर तत्व के संख्या लौटाई हई जेकर अंक के योग > 0 हई। यदि एगो संख्या ऋणात्मक हई, त ओकर पहिला हस्ताक्षरित अंक ऋणात्मक होतई: उदाहरण के लेल -123 में अंक -1, 2, अउर 3 हस्ताक्षरित हई। >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,mag_Deva,python,"
def move_one_ball(arr):
    """"""हमनि के पास एन पूर्णांक arr[1], arr[2], ..., arr[N] के एगो सरणी 'arr' हई। सरणी में संख्या के यादृच्छिक रूप से क्रमबद्ध कैल जयतई। तोहर काम ई निर्धारित करनाई हई कि का एगो सरणी के बिना घटते क्रम में क्रमबद्ध करनाई संभव हई। दिवालिया सरणी पर निम्नलिखित ऑपरेशन करके: तोहर दाहिना शिफ्ट ऑपरेशन करे के अनुमति हई। एक दाहिना शिफ्ट ऑपरेशन के अर्थ हई कि सरणी के सभे तत्व के दाहिना दिशा में एक स्थिति से स्थानांतरित करनाई। सरणी के अंतिम तत्व के सरणी में प्रारंभिक स्थिति में स्थानांतरित कैल जयतई अर्थात 0 वां सूचकांक। अगर ऊपर के ऑपरेशन करके क्रमबद्ध सरणी प्राप्त करनाई संभव हई त फेर True लौटा दिवालिया False लौटा दिवालिया। यदि देल गेल सरणी खाली हई त फेर True लौटा दिवालिया। नोटः देल गेल सूची में अद्वितीय तत्व होए के गारंटी हई। उदाहरण के लेलः move_one_{} ball[3, 4, 5, 2]==>True स्पष्टीकरण: 2 सही परिचालन द्वारा, सरणी के बिना घटते क्रम में क्रमबद्ध करनाई संभव हई।[, 3, 4, 2 गलत ==> स्पष्टीकरणः सरणी के बिना दाहिना शिफ्टिंग के कोनो संख्या के लेल स्थानांतरित करनाई संभव हई।""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,mag_Deva,python,"
def exchange(lst1, lst2):
    """"""ई समस्या में, आप एगो फलन लागू करबई जे संख्या के दुगो सूची लेई हई, अउर ई निर्धारित करई हई कि की ऊ उनकरा बीच तत्व के आदान-प्रदान करनाई संभव हई ताकि lst1 केवल सम संख्या के सूची बन जाए। lst1 अउर lst2 के बीच आदान-प्रदान कैल गेल तत्व के संख्या पर कोई सीमा ना हई। अगर lst1 अउर lst2 के बीच तत्व के आदान-प्रदान करनाई संभव हई ताकि lst1 के सभे तत्व सम हो जाए, त ""YES"" लौटाई। अन्यथा, ""NO"" लौटाई। उदाहरण के लेलः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" ई मानल जाई हई कि इनपुट सूची गैर-खाली होतई। """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,mag_Deva,python,"
def histogram(test):
    """"""एगो स्ट्रिंग देल गेल हई जे एगो स्पेस से अलग कैसर अक्षर के प्रतिनिधित्व करई हई, सबसे बेसी दोहरावे वाला अक्षर के एगो शब्दकोश लौटाई अउर संबंधित गिनती के शामिल करई हई। यदि कैगो अक्षर के एकेगो घटना होई हई, त ओकरा सभे लौटाई। उदाहरण: हिस्टोग्राम ((('a b c') == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम ((('a b b a') == {'a': 2, 'b': 2} हिस्टोग्राम ((('a b c a b') == {'a': 2, 'b': 2} हिस्टोग्राम ((('b b a') == {'b 4}': हिस्टोग्राम ((('') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,mag_Deva,python,"
def reverse_delete(s,c):
    """"""कार्य हमे दूगो स्ट्रिंग s और c देल गेल हई, तोरा s में सभे वर्ण के हटावे के हई जे c में कोनो वर्ण के बराबर हई तब जाँच करे के हई कि का परिणाम स्ट्रिंग पालिंड्रोम हई। एगो स्ट्रिंग के पालिंड्रोम कहल जाई हई अगर ई पिछला के समान पढ़ई हई। तोरा जांच के लेल परिणाम स्ट्रिंग अउर सही/गलत वाला ट्यूपल लौटावे के चाहि। उदाहरण के लेल s = ""abcde"", c = ""ae"", परिणाम ('bcd', False) होना चाहि। s = ""abcdef"", c = ""b"" परिणाम ('acdef', False) होना चाहि। s = ""abcdedcba"", c = ""ab"", परिणाम ('cdedc', True) होना चाहि।""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,mag_Deva,python,"
def odd_count(lst):
    """"""एगो स्ट्रिंग के सूची देल गेल हई, जहां प्रत्येक स्ट्रिंग में केवल अंक होई हई, एगो सूची लौटाई। आउटपुट के प्रत्येक तत्व आई ""इनपुट के स्ट्रिंग आई में विषम तत्व के संख्या"" होए के चाहि। जहां सभे आई के इनपुट के i वीं स्ट्रिंग में विषम अंक के संख्या से बदल देल जाए के चाहि। >>> odd_count['1234567']) [""4n के str4ng 4 के str4ng 4 के संख्या""] >>> odd_count['3',""111111""]) [""1n के str1ng 1 के str1ng 1 के संख्या"", ""8n के str8ng 8 के str8ng 8 के संख्या""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,mag_Deva,python,"
def minSubArraySum(nums):
    """"""पूर्णांक n के एगो सरणी देल गेल हई, n के कोनो गैर-खाली उप-सरणी के न्यूनतम योग खोजो। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,mag_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""आपके पास कुओं के एक आयताकार ग्रिड देल गेल हई। प्रत्येक पंक्ति एक कुएं के प्रतिनिधित्व करई हई, और प्रत्येक पंक्ति में 1 पानी के एक इकाई के प्रतिनिधित्व करई हई। प्रत्येक कुएं में एक संबंधित बाल्टी होई हई जेकर उपयोग एकरा से पानी निकाले के लेल कैल जा सकई हई, अउर सभे बाल्टी में समान क्षमता होई हई। आपके काम कुओं के खाली करे के लेल बाल्टी के उपयोग करनाई हई। आउटपुट आपके लेल आवश्यक समय के संख्या के नीचे रखई छई। उदाहरण 1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 आउटपुटः 6 उदाहरण 2: इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 आउटपुटः 5 उदाहरण 3: इनपुटः [[:0,0,0], [0,0,0]] bucket_capacity: 5 आउटपुटः 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 3 * 2 * 4 * 5 * 6 * 10 * 1 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 2 * 4 * 5 * 6 * 6 * 7 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 11 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,mag_Deva,python,"
def sort_array(arr):
    """"""ई क्रम में, अपने के एगो गैर-ऋणात्मक पूर्णांक के एगो सरणी के क्रमबद्ध करे के हई, उनके द्विआधारी प्रतिनिधित्व में संख्या के अनुसार आरोही क्रम में. समान संख्या के लेल, दशमलव मान के आधार पर क्रमबद्ध करे के चाहि। एकरा ऐसन लागू कैल जाए के चाहि: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,mag_Deva,python,"
def select_words(s, n):
    """"""एगो स्ट्रिंग s अउर एगो प्राकृतिक संख्या n के लेल, आपके एगो फ़ंक्शन लागू करे के लेल काम देल गेल हई जे स्ट्रिंग s से सभे शब्द के सूची लौटाबई हई जोनमे ठीक n व्यंजन होई हई, ताकि ई शब्द स्ट्रिंग s में दिखाई दे। यदि स्ट्रिंग s खाली हई त फ़ंक्शन के खाली सूची लौटाबे के चाहि। नोटः आप मान सकई हई कि इनपुट स्ट्रिंग में केवल अक्षर अउर रिक्ति होई हई। उदाहरणः select_words ""मैरी के एगो छोटा मेमना हलई"", 4) ==> [""छोट""] select_words ""मैरी के एगो छोटा मेमना हलई"", 3) ==> [""मैरी"", ""लैंब""] select_words ""सादा सफेद स्थान"", 2) ==> [] select_words ""हैलो वर्ल्ड"", 4) ==> [""वर्ल्ड""] select_words ""अंकल सैम"", 3) ==> [""अंकल""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,mag_Deva,python,"
def get_closest_vowel(word):
    """"""एगो शब्द के साथ, एगो शब्द के अंत में दूगो व्यंजन के बीच सबसे निकट स्वर के खोज करे के लेल एगो विशेष संकेतक के आवश्यकता होई हई। अगर कोनो स्वर के ऊपर के शर्त के पूरा ना कैल गेल हई, त खाली स्ट्रिंग लौटा दिही। उदाहरण: get_closest_vowel ((""yogurt"") ==> ""u"" get_closest_vowel ((""F"") ==> ""U"" get_closest_vowel ((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,mag_Deva,python,"
def match_parens(lst):
    '''आपके पास दो स्ट्रिंग के सूची हई, दुनहु स्ट्रिंग में खाली खुला कोष्ठक '(' चाहे बंद कोष्ठक ') ' हई। आपके काम इ जांचना हई कि का दुनहु स्ट्रिंग के कुछ क्रम में जोड़ना संभव हई, कि परिणामी स्ट्रिंग अच्छा होई। एगो स्ट्रिंग S के अच्छा मानल जाई हई अगर आउर केवल अगर S में सभे कोष्ठक संतुलित होई हई। उदाहरण के लेल: स्ट्रिंग '((()) 'अच्छा हई, जबकि स्ट्रिंग '()) ' ना हई। अगर अच्छा स्ट्रिंग बनावे के एगो तरीका हई त 'हाँ' लौटाई, आउर अन्यथा 'नहि' लौटाई। उदाहरण: match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'नहि' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,mag_Deva,python,"
def maximum(arr, k):
    """"""पूर्णांक के एगो सरणी arr आउर सकारात्मक पूर्णांक k देल गेल हई, arr में अधिकतम k संख्या के जौरे लंबाई k के एगो क्रमबद्ध सूची लौटाई। उदाहरण1: इनपुटः arr = [-3, -4, 5], k = 3 आउटपुटः [-4, -3, 5] उदाहरण2: इनपुटः arr = [4, -4, 4], k = 2 आउटपुटः [4, 4] उदाहरण3: इनपुटः arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुटः [2] नोटः 1. सरणी के लंबाई [1, 1000] के सीमा में होई। 2. सरणी में तत्व [-1000, 1000] के सीमा में होई। 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,mag_Deva,python,"
def solution(lst):
    """"""पूर्णांक के एगो गैर-खाली सूची देल गेल हई, तब सम पद पर रहल सभे विषम तत्व के योग के लौटाई। उदाहरण हल (([5, 8, 7, 1]) ==> 12 हल (([3, 3, 3, 3, 3]) ==> 9 हल (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,mag_Deva,python,"
def add_elements(arr, k):
    """"""पूर्णांक arr आउर पूर्णांक k के एगो गैर-खाली सरणी देल गेल हई, arr के पहिला k तत्व से अधिकतम दू अंक वाला तत्व के योग के लौटाई। उदाहरण: इनपुट: arr = [111,21,3,4000,5,6,7,8,9], k = 4 आउटपुट: 24 # 21 + 3 के योग प्रतिबंधः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,mag_Deva,python,"
def get_odd_collatz(n):
    """"""एगो सकारात्मक पूर्णांक n के लेल, एगो क्रमबद्ध सूची लौटाई जेकरा में कोलाट्ज़ अनुक्रम में विषम संख्या हई। कोलाट्ज़ अनुमान गणित में एगो अनुमान हई जे निम्नलिखित रूप में परिभाषित एगो अनुक्रम से संबंधित हई: कोनो सकारात्मक पूर्णांक n से शुरू होई छई। फेर प्रत्येक पद के पिछला पद से निम्नानुसार प्राप्त कैल जाई हई: यदि पिछला पद सम हई, त अगला पद पिछला पद के आधा हई। यदि पिछला पद विषम हई, त अगला पद पिछला पद के 3 गुना हई अउर 1। अनुमान ई हई कि n के कोनो भी मान के बावजूद, अनुक्रम हमेशा 1 तक पहुंचई छई। नोटः 1. कोलाट्ज़ ((1) [1] हई। 2. लौटाएल सूची क्रम में क्रमबद्ध हई। उदाहरण के लेलः get_odd_collatz ((5) [1, 5] लौटाई हई। 5 के लेल कोलाट्ज़ अनुक्रम [5, 8, 16, 4, 2, 1], येहिलेल विषम संख्या केवल 1 अउर 5 हई। """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,mag_Deva,python,"
def valid_date(date):
    """"""एगो फलन लिखल जाय जे देल गेल तिथि के स्ट्रिंग के मान्य कर हो आउर अगर दिनांक मान्य हई त सही लौटाई अन्यथा गलत. तारीख वैध हई अगर निम्नलिखित सभे नियम पूरा कैल गेल हई: 1. तिथि स्ट्रिंग खाली ना हई। 2. महीना 1,3,5,7,8,10,12 के लेल दिन के संख्या 1 से कम चाहे 31 दिन से बेसी ना हई आउर महीना 4,6,9,11 के लेल दिन के संख्या 1 से कम चाहे 30 दिन से बेसी ना हई। आउर महीना 2 के लेल दिन के संख्या 1 से कम चाहे 29 से बेसी ना हई। 3. महीना 1 से कम चाहे 12 से बेसी ना होए के चाहि। 4. दिनांक प्रारूप में होए के चाहि उदाहरण के लेलः valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => true_date (('06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,mag_Deva,python,"
def split_words(txt):
    '''शब्द के एगो स्ट्रिंग देल गेल हई, रिक्त स्थान पर विभाजित शब्द के एगो सूची लौटाई, यदि पाठ में कोनो रिक्त स्थान ना हई त आप के अल्पविराम पर विभाजित करे के चाहि ',' यदि कोई अल्पविराम ना हई त आप के वर्णमाला में विषम क्रम के साथ लोअर-केस अक्षर के संख्या लौटावे के चाहि, ऑर्ड (('ए') = 0, ऑर्ड (('बी') = 1, ... ऑर्ड (('जे') = 25 उदाहरण विभाजित_शब्द ((""हैलो वर्ल्ड! "") â -> [""हैलो"", ""वर्ल्ड! "") विभाजित_शब्द ((""हैलो, वर्ल्ड! "") â -> [""हैलो"", ""वर्ल्ड! "") विभाजित_शब्द ((""एबीसीडीएफ"")) == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,mag_Deva,python,"
def is_sorted(lst):
    '''अगर एगो संख्या के सूची देल गेल हई, त वापस कर देई चाहे ऊ आरोही क्रम में छँटाई कैल गेल हई। अगर सूची में एके संख्या के 1 से अधिक डुप्लिकेट हई, त वापस कर देई मिथ्या। कोई नकारात्मक संख्या अउर केवल पूर्णांक मानो। उदाहरण is_sorted ({1, 2, 3, 4, 5])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,mag_Deva,python,"
def intersection(interval1, interval2):
    """"""एगो संख्या के अंतराल के एगो पूर्ण संख्या के रूप में परिभाषित कैल जाई हई, जेकरा लेल एगो पूर्ण संख्या के अंतराल के एगो पूर्ण संख्या के रूप में परिभाषित कैल जाई हई। उदाहरण के लेल, अंतराल = (शुरू, अंत) = (1, 2) । देल गेल अंतराल बंद हई जेकर अर्थ हई कि अंतराल (शुरू, अंत) में प्रारंभ अउर अंत दुनु शामिल हई। प्रत्येक देल गेल अंतराल के लेल, ई मानल जाई हई कि एकर शुरुआत एकर अंत के बराबर चाहे कम हई। आपके कार्य ई निर्धारित करनाई हई कि काई दू अंतराल के प्रतिच्छेदन के लंबाई एगो अभाज्य संख्या हई। उदाहरण के लेल, अंतराल (1, 3), (2, 4) के प्रतिच्छेदन (2, 3) हई, जेकर लंबाई 1 हई, जे एगो अभाज्य संख्या ना हई। यदि प्रतिच्छेदन के लंबाई एगो अभाज्य संख्या हई, त ""हाँ"" लौटाई, अन्यथा ""नहीं"" लौटाई। यदि दू अंतराल न करई हई, त ""नहीं"" लौटाई। [इनपुट/आउटपुट] नमूनाः प्रतिच्छेदन (२, ३) ==> ""अंतरिक्ष-1, (२) =="", प्रतिच्छेदन (१) == ""0, (२, (३) =="", प्रतिच्छेदन (१) =="", - (२, (३) =="", (५) =="", आदि)""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,mag_Deva,python,"
def prod_signs(arr):
    """"""आपके पास पूर्णांक के एगो सरणी हई अउर आपको 1, -1 चाहे 0 द्वारा दर्शाएल गेल सरणी में प्रत्येक संख्या के सभे संकेत के उत्पाद द्वारा गुणा कैल गेल पूर्णांक के परिमाण के योग लौटावे के चाहि। नोटः खाली सरणी के लेल कोनो ना लौटाई उदाहरण: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  कोई ना""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,mag_Deva,python,"
def minPath(grid, k):
    """"""N पंक्ति और N स्तंभ (N >= 2) और एक सकारात्मक पूर्णांक k वाला ग्रिड के प्रत्येक सेल में एक मान शामिल हई। [1, N * N] समावेशी के सीमा में प्रत्येक पूर्णांक ग्रिड के कोशिका पर ठीक एक बार प्रकट होई हई। आपको ग्रिड में लंबाई k के न्यूनतम पथ के खोजे के होई हई। आप कोनो भी सेल से शुरू कर सकई हई, और प्रत्येक चरण में आप पड़ोसी कोशिका में से कोनो भी पर जा सकई हई, दोसर शब्द में, आप ओई कोशिका में जा सकई हई जे आपके वर्तमान सेल के साथ किनारा साझा करई हई। कृपया ध्यान दें कि लंबाई k के पथ के अर्थ है कि बिल्कुल k कोशिका (अनिवार्य रूप से अलग) के दौरा करनाई। आप ग्रिड से बाहर ना जा सकई छई। एक पथ A (लंबाई k) के पथ B (लंबाई k) से कम मानल जाई हई यदि सेल A अउर B पर मान के क्रमबद्ध सूची बनाबे के बाद (उनका lA_st अउर lA_st कह दी), lA_st शब्दकोषीय रूप से lA_st से कम हई, दोसर शब्द में, एक पूर्णांक के लंबाई k के कोनो भी सेल में जा सकई हई। उदाहरण: [1,4,4, lA_1, l_j = l_j], [1, l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_j = l_1,[[[7, l_j = l_j = l_j = l_j = l_8, l_[[[[_j = l_j = l_j = l_j], l_[[[[_j = l_j = l_j = l""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,mag_Deva,python,"
def tri(n):
    """"""उदाहरण के लिए, अगर हम n के सम संख्या देहो, त हम tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) जब n विषम संख्या होवे, त हम tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) पर निर्भर होबई। उदाहरण के लिए, tri (n) = 1 + (2 / 2) = 2 tri (n - 2) = 3 tri (n - 3) = tri (n - 2) + tri (n - 1) = 3 tri (n - 1) + tri (n - 2) = 3 tri (n - 1) = 3 tri (n - 1) + tri (n - 2) = 3 tri (n - 1) = 2 tri (n - 2) = 3 tri (n - 1) = 3 tri (n - 1) + tri (n - 4) = 2 + 3 + 3 = 8 यदि आप के पास एक गैर-ऋणात्मक पूर्णांक n है, तो आपको tri (n - 1) के पहले n + 1 संख्याओं की सूची वापस करनी होगी। उदाहरण: tri (n) = tri (n - 1) [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,mag_Deva,python,"
def digits(n):
    """"""एगो धनात्मक पूर्णांक n देला पर, विषम अंक के गुणनफल लौटाई. यदि सभे अंक सम हई त 0 लौटाई। उदाहरण लागी: अंक (१) == 1 अंक (४) == 0 अंक (२३५) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,mag_Deva,python,"
def is_nested(string):
    '''एगो फलन बनावई जे इनपुट के रूप में एगो स्ट्रिंग लेई जे केवल वर्ग कोष्ठक के शामिल करई हई। फलन के तब आउर केवल तभी सही लौटाबे के चाहि जब कोष्ठक के एगो वैध उपक्रम होई जहां उपक्रम में कम से कम एगो कोष्ठक निहित होई हई। is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested'[[]]]]]] '[[]]' â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,mag_Deva,python,"

def sum_squares(lst):
    """"""उदाहरण: lst = [1,2,3] के लिए आउटपुट 14 होना चाहिये lst = [1,4,9] के लिए आउटपुट 98 होना चाहिये lst = [1,3,5,7] के लिए आउटपुट 84 होना चाहिये lst = [1.4,4.2,0] के लिए आउटपुट 29 होना चाहिये lst = [-2.4,1,1] के लिए आउटपुट 6 होना चाहिये""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,mag_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''एगो फलन बनावई जे सही लौटाई अगर देल गेल स्ट्रिंग के अंतिम वर्ण वर्णमाला वर्ण हई आउर कोनो शब्द के हिस्सा ना हई, आउर अन्यथा गलत. ध्यान दें: ""शब्द"" वर्ण के एगो समूह हई जे स्थान द्वारा अलग कैल गेल हई। उदाहरण: check_if_last_char_is_a_letter"" ""सेब पाई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> True check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,mag_Deva,python,"
def can_arrange(arr):
    """"""एगो फलन बनावे जे कोनो तत्व के सबसे बड़ सूचकांक के लौटाबई जे ओकरा से तुरंत पहिले के तत्व के बराबर चाहे उससे अधिक न हो। अगर अइसन कोई तत्व मौजूद न हो त लौटाबई -1. देल गेल सरणी में डुप्लिकेट मान न होई। उदाहरण: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,mag_Deva,python,"
def largest_smallest_integers(lst):
    '''एगो फलन बनावे जे एगो ट्यूपल (ए, बी) लौटाई, जहां 'ए' एगो सूची में ऋणात्मक पूर्णांक में सबसे बड़ हई, अउर 'बी' एगो सूची में सकारात्मक पूर्णांक में सबसे छोट हई। अगर कोई ऋणात्मक चाहे सकारात्मक पूर्णांक ना हई, त ओकरा कोनो के रूप में लौटाई। उदाहरण: सबसे बड़_सबसे छोट_पूर्णांक[2, 4, 1, 3, 5, 7]) == (कोनो ना, 1) सबसे बड़_सबसे छोट_पूर्णांक ({0]) == (कोनो ना, कोई) सबसे बड़_सबसे छोट_पूर्णांक ({0]) == (कोनो, कोई) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,mag_Deva,python,"
def compare_one(a, b):
    """"""एगो फलन बनावे जे पूर्णांक, फ्लोट, चाहे वास्तविक संख्या के प्रतिनिधित्व करे वाला स्ट्रिंग के लेई हई, अउर अपन देल गेल चर प्रकार में बड़ चर के लौटाई हई। यदि मान समान हई त कोनो के वापस न लौटाई। नोटः यदि एगो वास्तविक संख्या के एगो स्ट्रिंग के रूप में दर्शाएल जाई हई, त फ्लोटिंग पॉइंट हो सकई हई . या , तुलना_एक, 2.5) â -> 2.5 तुलना_एक, ""2,3"") â -> ""2,3"" तुलना_एक"", ""5,1"", ""6"") â -> ""6"" तुलना_एक"", 1) â -> कोई न """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,mag_Deva,python,"
def is_equal_to_sum_even(n):
    """"""ई मूल्यांकन कर कि का देल गेल संख्या n के ठीक 4 धनात्मक सम संख्या के योग के रूप में लिखल जा सकई हई उदाहरण is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,mag_Deva,python,"
def special_factorial(n):
    """"""ब्राजीलियन फैक्टोरियल के रूप में परिभाषित कैल गेल हई: ब्राजीलियन_फैक्टोरियल ((n) = n! * (n-1)! * (n-2)! * ... * 1! जहां n > 0 उदाहरण के लेल: >>> विशेष_फैक्टोरियल ((4) 288 फलन के इनपुट के रूप में एगो पूर्णांक प्राप्त होई हई अउर येई पूर्णांक के विशेष फैक्टोरियल लौटाबे के चाहि। """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,mag_Deva,python,"
def fix_spaces(text):
    """"""_उदाहरण-3स्ट देल गेल हई, एकरा में सभे रिक्त स्थान के रेखांकित के साथ बदल देई हई, अउर यदि कोनो स्ट्रिंग में 2 से अधिक लगातार रिक्त स्थान हई, त फेर सभे लगातार रिक्त स्थान के - fix_spaces से बदल देई हई। (उदाहरण 3"")""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,mag_Deva,python,"
def file_name_check(file_name):
    """"""एगो फ़ंक्शन बनाउ जे एगो फ़ाइल के नाम के प्रतिनिधित्व करे वाला स्ट्रिंग लेई, अउर अगर फ़ाइल के नाम मान्य हई त 'हाँ' लौटाई, अउर अगर अन्यथा 'नहि' लौटाई। एगो फ़ाइल के नाम वैध मानल जाई हई अगर अउर केवल अगर निम्नलिखित सभे शर्त पूरा कैल गेल हई: - फ़ाइल के नाम में तीन से बेसी अंक ('0'-'9') ना होए के चाहि। - फ़ाइल के नाम में ठीक एगो बिंदु '.' होई छई। - बिंदु से पहिले सबस्ट्रिंग खाली ना होए के चाहि, अउर ई लैटिन अल्फाबेट के एगो अक्षर से शुरू होई छई ('a'-'z' अउर 'A'Z'). - बिंदु के बाद सबस्ट्रिंग येई में से एगो होए के चाहिः ['txt', 'exe', 'lld'] उदाहरण: file_name_check""{example.txt.txt"") # => 'हाँ' file_name_check""{example.txt.tll1"") => 'नहीं' (नाम लैटिन अल्फाबेट के एगो अक्षर से शुरू होवे के चाहि) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,mag_Deva,python,"


def sum_squares(lst):
    """""""" ई फलन पूर्णांक के एगो सूची लेई। सूची में सभे प्रविष्टिय के लेल, फलन पूर्णांक प्रविष्टि के वर्ग करे हई अगर एकर सूचकांक 3 के गुणक हई अउर पूर्णांक प्रविष्टि के घन करे हई अगर एकर सूचकांक 4 के गुणक हई अउर 3 के गुणक ना। फलन सूची में प्रविष्टिय के ना बदलतई जेकर सूचकांक 3 चाहे 4 के गुणक ना हई। फलन तब सभे प्रविष्टिय के योग लौटाई। उदाहरण: lst = [1,2,3] के लेल आउटपुट 6 होए के चाहि lst = [] के लेल आउटपुट 0 होए के चाहि lst = [-1,-5,2,-1,-5] के लेल आउटपुट -126 होए के चाहि।""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,mag_Deva,python,"
def words_in_sentence(sentence):
    """"""एगो वाक्य के प्रतिनिधित्व करे वाला एगो स्ट्रिंग देल जाई हई, वाक्य में एगो रिक्ति से अलग कुछ शब्द होई हई, अउर आप के एगो स्ट्रिंग लौटाबे के होई हई जोनमे मूल वाक्य के शब्द होई हई, जेकर लंबाई अभाज्य संख्या हई, नया स्ट्रिंग में शब्द के क्रम मूल के समान होए के चाहि। उदाहरण 1: इनपुटः वाक्य = ""ई एगो परीक्षण हई"" आउटपुटः "" हई"" उदाहरण 2: इनपुटः वाक्य = ""स्विमिंग के लेल जाए के अनुमति देई हई"" आउटपुटः ""गो फॉर"" प्रतिबंधः * 1 <= len(संसानेंस) <= 100 * वाक्य में केवल अक्षर होई छई """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,mag_Deva,python,"
def simplify(x, n):
    """"""ई फलन के सही लौटावे के लेल x * n के पूर्णांक के रूप में मान देल जाई हई, आउर अगर पूर्णांक के रूप में मान देल जाई हई, त ई गलत होई हई। x अउर n दुनहु भिन्नता के स्ट्रिंग प्रतिनिधित्व हई, अउर निम्नलिखित प्रारूप हई, <numerator>/<denominator> जहां अंकों के संख्या आउर भाजक दुनहु धनात्मक पूर्णांक होई हई। आप मान सकई हई कि x, अउर n वैध भिन्नता हई, अउर भाजक के रूप में शून्य ना होई हई। simplify{""1/5"", ""5/1"") = True{""1/6"", ""2/1"") = False{""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,mag_Deva,python,"
def order_by_points(nums):
    """"""एगो फलन लिखू जे पूर्णांक के देल गेल सूची के ओकर अंक के योग के अनुसार आरोही क्रम में क्रमबद्ध कर हई। ध्यान देहो: यदि उनके अंक के समान योग वाला कैगो आइटम हई, त ओकरा मूल सूची में उनकर सूचकांक के आधार पर क्रमबद्ध कर देई। उदाहरण के लेल: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,mag_Deva,python,"
def specialFilter(nums):
    """"""एगो फलन लिखू जे संख्या के एगो सरणी के इनपुट के रूप में लेई हई अउर सरणी में तत्व के संख्या के लौटाई हई जे 10 से बड़ हई अउर कोनो संख्या के पहिला अउर अंतिम अंक दुनु विषम (1, 3, 5, 7, 9) हई। उदाहरण के लेल: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,mag_Deva,python,"
def get_max_triples(n):
    """"""एगो पूर्णांक n देल गेल हई। आपको लंबाई n के पूर्णांक सरणी a बनावे के हई। प्रत्येक i (1 ‰¤ i ‰¤ n) के लेल, a[i] = i * i - i + 1 के मान। a के तिगुना (a[i], a[j], a[k]) के संख्या लौटाई, जहां i < j < k, आउर a[i] + a[j] + a[k] 3 के गुणक हई। उदाहरण: इनपुट: n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्र मान्य ट्रिपल (1, 7, 13) हई। """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,mag_Deva,python,"
def bf(planet1, planet2):
    '''सौर मंडल में आठ ग्रह हई: सूर्य के सबसे नजदीक बुध हई, अगला शुक्र हई, फेर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेप्च्यून हई। एगो फलन लिखें जे ग्रह 1 अउर ग्रह 2 के स्ट्रिंग के रूप में दू ग्रह के नाम लेई हई। फलन के एगो टपल लौटावे के चाहि जेकरा मे सबे ग्रह शामिल होई हई जेकर कक्षा ग्रह 1 के कक्षा और ग्रह 2 के कक्षा के बीच स्थित हई, सूर्य के निकटता के अनुसार छाँटल गेल हई। फलन के खाली टपल लौटावे के चाहि यदि ग्रह 1 चाहे ग्रह 2 सही ग्रह नाम ना हई। उदाहरण bf""(जुपिटर"", ""नेप्च्यून"") ==> (""शनि"", ""यूरेनस"") bf(""पृथ्वी"", ""मर्क्यूरी"") ==> (""शुक्र"") bf""(मर्क्यूरी"", ""यूरेनस"") ==> (""शुक्र"", ""पृथ्वी"", ""मंगल"", ""शुक्र"", ""शनि"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,mag_Deva,python,"
def sorted_list_sum(lst):
    """"""एगो फलन लिखू जे स्ट्रिंग के एगो सूची के पैरामीटर के रूप में स्वीकार कर हई, ओकरा से विषम लंबाई वाला स्ट्रिंग के हटा देई हई, आउर परिणाम सूची के क्रमबद्ध क्रम के साथ लौटाई हई। सूची हमेशा स्ट्रिंग के एगो सूची होई हई आउर कहियो संख्या के एगो सरणी ना, अउर एकरा में डुप्लिकेट हो सकई हई। सूची के क्रम प्रत्येक शब्द के लंबाई के अनुसार आरोही होए के चाहि, आउर आपको ओई नियम द्वारा क्रमबद्ध सूची लौटावे के चाहि। यदि दू शब्द के समान लंबाई होई हई, त सूची के वर्णमाला क्रम में क्रमबद्ध कर दी। फलन के क्रमबद्ध क्रम में स्ट्रिंग के एगो सूची लौटावे के चाहि। आप मान सकई हई कि सभे शब्द के समान लंबाई होई हई। उदाहरण के लेल: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,mag_Deva,python,"
def x_or_y(n, x, y):
    """"""एगो साधारण प्रोग्राम जेकरा x के मान लौटावे के चाही अगर n एगो अभाज्य संख्या हई आउर y के मान लौटावे के चाही अन्यथा उदाहरण: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,mag_Deva,python,"
def double_the_difference(lst):
    '''संख्या के सूची देल गेल हई, सूची में उन संख्या के वर्ग के योग लौटाबई जे विषम हई। नकारात्मक या पूर्णांक न वाला संख्या के अनदेखा कर दी। double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 यदि इनपुट सूची खाली हई, त 0 लौटाई। '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,mag_Deva,python,"
def compare(game,guess):
    """"""हम सब के ई बात याद हइ, कि जब एगो लम्बा समय से प्रतीक्षित घटना के परिणाम आखिरकार जानल जा हइ । ऊ क्षण में आपके पास जे भावना आउ विचार हइ, ऊ निश्चित रूप से नोट करे आउ तुलना करे लायक हइ । आपके कार्य ई निर्धारित करे के हइ कि कोय व्यक्ति केतना मैच के परिणाम सही से अनुमान लगइलके हल । आपके पास दो सरणी अंक और अनुमान के बराबर लंबाई के देल गेल हइ, जहाँ प्रत्येक सूचकांक एक मैच दिखाव हइ । एक समान लंबाई के सरणी लौटा दे, जे प्रत्येक अनुमान के केतना दूर के दर्शावे हइ । अगर ऊ सही अनुमान लगइलके हे, तो मान 0 हइ, आउ अगर नयँ, तो मान अनुमान आउ स्कोर के बीच पूर्ण अंतर हइ । उदाहरण: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4,0,1,0,4]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,mag_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""आपके एगो वर्ग (एक स्ट्रिंग) के नाम और एक्सटेंशन के एगो सूची देल जाई हई। एक्सटेंशन के उपयोग वर्ग के अतिरिक्त वर्ग के लोड करे के लेल कैल जाए के हई। एक्सटेंशन के ताकत निम्नानुसार हई: सीएपी के एक्सटेंशन के नाम में बड़ अक्षर के संख्या होवे दे, आउर एसएम के एक्सटेंशन के नाम में छोट अक्षर के संख्या होवे दे, ताकत के अंश सीएपी - एसएम द्वारा देल जाई हई। आपको सबसे मजबूत एक्सटेंशन के खोजे के चाहि आउर इ प्रारूप में एगो स्ट्रिंग लौटावे के चाहि: ClassName.StrongestExtensionName. यदि एक ही ताकत के जौरे दू या अधिक एक्सटेंशन हई, त आप के सूची में पहिला आवे वाला चुनल चाहि। उदाहरण के लेल, यदि आपको वर्ग के रूप में ""स्लाइस"" और एक्सटेंशन के एगो सूची देल गेल हई: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] त आप के 'Slices.SEviRNGSliCes' लौटावे के चाहि काहेकी 'SviRNGSliCes' 'mySliRNGSliCes']) एक्सटेंशन के सबसे मजबूत हई, उदाहरण के लेल 'AA' - '_Ext_Class' (सबसे मजबूत एक्सटेंशन: '_AA'_Strongest') ।""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,mag_Deva,python,"
def cycpattern_check(a , b):
    """"""तोरा 2 शब्द देल गेलउ. तोरा सही लौटावे के चाही अगर दोसर शब्द चाहे ओकर कोनो घूर्णन पहिला शब्द में एगो सबस्ट्रिंग हको cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check""(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,mag_Deva,python,"
def even_odd_count(num):
    """"""एगो पूर्णांक देल गेल हई, एगो ट्यूपल लौटाई जे क्रमशः सम आउर विषम अंक के संख्या हई। उदाहरण: सम_असमान_गणना ((-12) ==> (1, 1) सम_असमान_गणना ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,mag_Deva,python,"
def int_to_mini_roman(number):
    """"""एगो धनात्मक पूर्णांक देल गेल, एकर रोमन अंक समकक्ष एगो स्ट्रिंग के रूप में प्राप्त कर, अउर एकरा लघु अक्षर में लौटाई। प्रतिबंधः 1 <= num <= 1000 उदाहरण: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,mag_Deva,python,"
def right_angle_triangle(a, b, c):
    '''एगो त्रिकोण के तीन भुजा के लंबाई के देखते हुए. यदि तीन भुजा एगो समकोण त्रिभुज बनाव हई त सही लौटाई, अन्यथा गलत. एगो समकोण त्रिभुज एगो त्रिभुज हई जेकरा में एगो कोण 90 डिग्री के कोण हई। उदाहरण: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,mag_Deva,python,"
def find_max(words):
    """"""एगो फलन लिखू जे स्ट्रिंग के एगो सूची के स्वीकार कर हई। सूची में अलग-अलग शब्द शामिल हई। अधिकतम संख्या में अद्वितीय वर्ण के साथ शब्द लौटाबई। यदि कैगो स्ट्रिंग में अधिकतम संख्या में अद्वितीय वर्ण हई, त ऊ शब्द लौटाबई जे शब्दकोश के क्रम में पहिले आवई हई। find_max (([""नाम"", ""के"", ""स्ट्रिंग""]) == ""स्ट्रिंग"" find_max (([""नाम"", ""enam"", ""गेम""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,mag_Deva,python,"
def eat(number, need, remaining):
    """"""तूँ एगो भूखा खरगोश हकऽ, आउ तूँ पहिले से ही कुछ गाजर खा चुकलऽ हे, लेकिन अब तोरा दिन के भोजन पूरा करे लगी आउ गाजर खाय के चाही । तूँ एगो सरणी [ खाना के बाद खाएल गेल गाजर के कुल संख्या, खाना के बाद बचे वाला गाजर के संख्या ] लौटावे के चाही अगर पर्याप्त शेष गाजर नञ् हइ, त तूँ बाकी गाजर के पूरा खा जइबऽ, लेकिन तूँ अभियो भूखा रहबऽ । उदाहरण: * खा ((5, 6, 10) -> [11, 4] * खा ((4, 8, 9) -> [12, 1] * खा ((1, 10, 10) -> [11, 0] * खा ((2, 11, 5) -> [7, 0] चर: @number: पूर्णांक: जे गाजर तूँ खा चुकलऽ हे ओकर संख्या @need: पूर्णांक: जे गाजर तूँ खाय के चाही ओकर संख्या @remaining: शेष गाजर के पूर्णांक: Constrain: * number = 0 * number = 0 * 1000 * number = 0 * resting = 1000 < number = 0 < number = 1000 < number = 1000 = resting = 1000 Have fun :)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,mag_Deva,python,"
def do_algebra(operator, operand):
    """"""एगो ऑपरेटर, आउर एगो ऑपरेन्ड के दूगो सूची देल गेल हई। पहिला सूची में बुनियादी बीजगणित संचालन हई, आउर दोसर सूची पूर्णांक के एगो सूची हई। बीजगणितीय अभिव्यक्ति के निर्माण करे के लेल दू देल गेल सूची के उपयोग करे आउर येई अभिव्यक्ति के मूल्यांकन लौटावे के लेल। बुनियादी बीजगणित संचालन: जोड़ (+) घटाव (-)) गुणन (*) फर्श विभाजन ( // ) घातांक ( ** उदाहरण): ऑपरेटर['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोट: ऑपरेटर के सूची के लंबाई ऑपरेंड सूची के लंबाई के बराबर हई। ऑपरेंड गैर-ऋणात्मक पूर्णांक के एगो सूची हई। ऑपरेटर के कम से कम एगो ऑपरेटर के सूची होई हई, आउर ऑपरेंड सूची में कम से कम दू ऑपरेंड होई हई। """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,mag_Deva,python,"
def solve(s):
    """"""अगर एगो अक्षर s देल जाई हई, त एकर केस के निचला से ऊपर या उपरे से उलट दिही, अन्यथा एकरा जइसन हई ओइसन रखई। अगर स्ट्रिंग में कोनो अक्षर ना हई, त स्ट्रिंग के उलट दिही। फलन के परिणामी स्ट्रिंग लौटाबे के चाहि। उदाहरण हल करे ((""1234"") = ""4321"" हल करे ((""ab"") = ""AB"" हल करे ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,mag_Deva,python,"
def string_to_md5(text):
    """"""एगो स्ट्रिंग 'text' देल गेल हई, त ओकर md5 हैश समकक्ष स्ट्रिंग लौटाई। अगर 'text' एगो खाली स्ट्रिंग हई, त लौटाई None. >>> string_to_md5('हैलो वर्ल्ड') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,mag_Deva,python,"
def generate_integers(a, b):
    """"""दूगो धनात्मक पूर्णांक a आउर b के देखते हुए, a आउर b के बीच के सम अंक के आरोही क्रम में लौटाई। उदाहरण के लेल: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
