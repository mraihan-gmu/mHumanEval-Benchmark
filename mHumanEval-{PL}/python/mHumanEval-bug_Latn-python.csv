task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,bug_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Paressai narekko ri laleng daftar bilangang, engka duwa bilangang iya lebbi macawe pole ri tungke' laingnge naiyya iya ripasseddi. Conto: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Salah >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Tongeng """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,bug_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input untuk fungsi ini adalah string yang berisi beberapa kelompok kurung bersarang. Tujuan anda adalah untuk memisahkan kelompok-kelompok tersebut menjadi string terpisah dan mengembalikan daftar mereka. Kelompok terpisah seimbang (setiap kurung terbuka ditutup dengan benar) dan tidak bersarang satu sama lain Abaikan ruang-ruang dalam string input. Contoh: >>> separate_paren_groups' ((( ) (() ((( ) ) ',' ((() ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,bug_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Riwéréng nomoro floating point positif, wedding ribongkara mancaji sibawa bageang integer (bilangeng kaminang maloppo lebbi mabeccu pole nomoro' riwereng) nenniya desimal (bageang sisa tuli lebbi mabeccu pole 1). Ullei bageang desimal nomoro'e. Conto: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,bug_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Engka daftar operasi deposit na withdrawal ri rekening bank iya mammula sibawa saldo nol. Tugasmu iyanaritu untu' natentukang narekko ri siaga'e titik saldo rekening menre'i ri yawana zero, nenniya ri titik'e fungsi'e waji'i lisu tongeng. Narekko de, waji'i lisu salah. Conto: >>> below_zero([1, 2, 3]) Salah >>> below_zero([1, 2, -4, 5]) Tongeng """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,bug_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Untu' daftar nomoro input, itung Mean Absolute Deviation ri sekitarang rata-rata data iyae. Mean Absolute Deviation iyanaritu beda rata-rata absolut antara tungke' elemen sibawa seddi tetti tengnga (rata-rata rilaleng kasus iyae): MAD = rata-rata ∙ x - x_mean ∙ Conto: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,bug_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Ri laleng daftar input, ri laleng tungke duwa elemen massusung, ripasseddi bilangeng 'delimiter' `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,bug_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input to this function is a string represented multiple groups for nested parentheses separated by spaces. untuk setiap kelompok, output tingkat terdalam dari bersarang kurung. contona (() (()) punnai dua tingka' bersarang sementara ((())) punnai tellu. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,bug_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter daftar input string bawang untu' iya engka substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,bug_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Untu' daftar bilangang makkalepu, lisu seddi tuple iyya engkae pole ri jumlana nenniyya wassele pole ri sininna bilangang makkalepu ri laleng daftar. Jumla kosong waji'i pada sibawa 0 nenniyya wassele kosong waji'i pada sibawa 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,bug_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""pole ri seddi daftar bilangang makkalepu, makkebu seddi daftar elemen maksimum bergulir iya riruntu lettu wettu ri runtu'e. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,bug_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Sappai palindrom kaminang maponco'e iyya ripammulai sibawa string iyya ripassadia. Pikkiri'na algoritma'e sederhana: - Sappai postfix kaminang maponco'e pole ri string iyya ripassadia iyya mancaji palindrom. - Passiwi ri cappa'na string reverse pole ri string prefix iyya engka riolona suffix palindromik. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Uji narekko string iyya riwerengnge iyanaritu palindrom.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,bug_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input iyanaritu duwa string a sibawa b iya engkae bawang 1 nenniya 0. Pangkaukeng XOR biner ri input iyae nenniya wassele wassele paimeng mancaji string.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,bug_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""pole ri dapara' string, lisu'i iya kaminang malampe'e. Lisu'i iya pammulangnge ri tujunna siare string iyya lampe'e pada. Lisu'i degaga ri tujunna dapara' input kosong. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,bug_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Mappalisui bagiang kaminang mallebbina pole duwa bilangang mattemmu a sibawa b >>> bagiang kaminang mallebbina (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina) (paling mallebbina)""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,bug_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Listu mappuasae pole sininna prefiks pole kaminang cedde'e lettu kaminang malampe'e pole ri string input >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,bug_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Mappalisui string iyya engkae nomoro' iyya ri pallawangeng onrong iyya ripammulai pole 0 lettu n mattama. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,bug_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Riwéréng seddi string, runtui siyaga karakter iya mallaingeng (nennia de'na paduli case) iya engkae pole ri >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,bug_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Here is a legend: 'o' note, lasts four beats 'o' - half note, lasts two beats ' - quater note, lasts one beat >>> parse_music. 'o' . . . o
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,bug_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Cari berapa kali substring tertentu dapat ditemukan dalam string asli. Hitung kasus tumpang tindih. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,bug_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input iyanaritu string angka pole ri 'nol' lettu ri 'sembilan' iya ri pallawangeng ruang. Pile iya wedding e iyanaritu 'nol', 'seddi', 'dua', 'tellua', 'eppa', 'lima', 'enneng', 'pitu', 'arupa' nenniya 'sembilan'. Lisu string sibawa nomoro iya ripasseddi pole kaminang beccu'e lettu ri kaminang maloppo'e >>> sort_numbers (('tellu seddi lima') 'seddi tellu lima' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,bug_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Pole ri daftar nomoro' iya ripassadia (malebbi-lebbi duwa) piléi sibawa lisu dua iya kaminang macawe'e sibawa sisompung sibawa nasuroi pada alena (nomoro' iya kaminang beccu, nomoro' iya kaminang maloppo). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,bug_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Riwereng nomoro' (makurang-kurang dua elemen), mappake transformasi linear lao ri ro daftar, pappada nomoro' kaminang beccu'e mancaji 0 na nomoro' kaminang maloppo mancaji 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,bug_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter nawerengngi daftar nilai Python iyami untu' bilangang makkalepu >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,bug_Latn,python,"

def strlen(string: str) -> int:
    """"""Riolo'na string'e >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,bug_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Untu' nomoro' n, runtui nomoro' kaminang maloppo nabage n sibawa mappada, lebbi beccu pole n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,bug_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Lisana faktor prima pole integer riwereng ri urutan pole kaminang beccu'e lettu kaminang maraja. Tungke' faktor'e waji' riwereng nomoro'na iyya sisompung sibawa egana'na iyya mompo ri laleng faktorisasi. Nomoro' input waji'i pada sibawa wassele'na yamaneng faktor'e >>> faktorisasi(8) [2, 2, 2] >>> faktorisasi(25) [5, 5] >>> faktorisasi(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,bug_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""pole ri daftar bilangang makkalepu, leddai sininna elemen iyya kajajiang lebbi pole seddi. Jagai urusang elemen iyya nasalai pada sibawa input. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,bug_Latn,python,"

def flip_case(string: str) -> str:
    """"""Untu' string iyya riwereng, lecce'i karakter mabeccu'e ri mabeccu'e na mabeccu'e ri mabeccu'e. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,bug_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,bug_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter daftar input string bawang untu' iyae iya mappammula sibawa awatangeng iya riwereng. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,bug_Latn,python,"

def get_positive(l: list):
    """"""Mappalisui bilangeng positif ri laleng daftar. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,bug_Latn,python,"

def is_prime(n):
    """"""Mappalisui tongengnge narekko nomoro' mattentu iyanaritu prima, nenniyya salah narekko de'e. >>> iyanaritu_prima, nenniyya salah narekko de'e.""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,bug_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs iyanaritu koefisien pole polinomial. find_zero runtu x pappada poly ((x) = 0. find_zero mabballei bawang titik nol, namuni engka maega. Lebbi na, find_zero bawang malai daftar xs punna nomoro genap koefisien sibawa koefisien non-nol kaminang maloppo nasaba najamingi seddi solusi. >>> putara (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> putara (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Naevaluasi polinomial sibawa koefisien xs ri titik x. lisu xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,bug_Latn,python,"

def sort_third(l: list):
    """"""Iyyae fungsi e malai daftar l na mappalisui daftar l' pappada yae l' identik sibawa l rilaleng indeks yae de nabage sibawa tellu, sementara nilai-nilai padae ri indeks yae nabage sibawa tellu sippada nilai indeks yae mappada sibawa l, naekiya ripasseddi. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,bug_Latn,python,"

def unique(l: list):
    """"""Mappalisui elemen unik risortir rilaleng daftar >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,bug_Latn,python,"

def max_element(l: list):
    """"""Mappalisui elemen kaminang maega ri laleng daftar. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,bug_Latn,python,"

def fizz_buzz(n: int):
    """"""Mappalisui bilangeng wettuna digit 7 mompo ri bilangeng makkalepu lebbi cedde pole n iya wedding ri bagi sibawa 11 iyarega 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,bug_Latn,python,"

def sort_even(l: list):
    """"""Fungsi iyae malai daftar l na mappalisui daftar l' pappada yae l' identik sibawa l ri indeks ganjil, sementara nilai-nilai na ri indeks genap sipaddi sibawa nilai-nilai indeks genap l, naekiya ripasseddi. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,bug_Latn,python,"

def encode_cyclic(s: str):
    """"""malai sebagai input string iyyae dikodekan sibawa fungsi encode_cyclic. Mappalisui string iyyae dikodekan.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""Mappalisui string iyyae ri kodei pole ri siklus kelompo tellu karakter.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,bug_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib mabberei nomoro' n-th iyanaritu nomoro' Fibonacci nenniya iyanaritu nomoro' prima. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,bug_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero nalai daftar bilangang makkalepu mancaji input. nabalii True narekko engka tellu elemen iyya massarang ri daftar iyya massarang ri nolo, nenniyya False rilainnae. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,bug_Latn,python,"

def car_race_collision(n: int):
    """"""Bayangngi seddi laleng iya magelloe sibawa lampe'na de'gaga paccappurenna. n oto mattengngang mappolo ri atau; secara simultan, seddi pasang laing pole n oto mattengngang mappolo ri atau. duwa pasang oto mammula mabella pole seddi lao ri laingenna. yamaneng oto maccolo sibawa iyyaro iyyaro iyyaro iyyaro iyyaro iyyaro iyyaro. duwa oto riteppu siruntu wettunna oto iya maccolo ri atau siruntu oto iya maccolo ri atau. naekiya, oto e magello na mawatang; wassele'na, pada alena matteru maccolo ri lintasan pada alena pada alena de'na siruntu. iyyaro fungsi e mappawessele' nomoro siruntu e.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,bug_Latn,python,"

def incr_list(l: list):
    """"""Listu bali sibawa elemen naperingkat 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,bug_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero nalai daftar bilangang makkalepu mancaji input. nabalii tongenna narekko engka duwa elemen iyya massisalang ri laleng daftar iyya massisalang lao ri nolo, nenniya salah narekko de. >>> pairs_sum_to_zero (([1, 3, 5, 0]) Salah >>> pairs_sum_to_zero (([1, 3, -2, 1]) Salah >>> pairs_sum_to_zero (([1, 2, 3, 7]) Salah >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) Tongeng >>> pairs_sum_to_zero (([1]) Salah """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,bug_Latn,python,"

def change_base(x: int, base: int):
    """"""Gantii basis numerik pole nomoro input x lao ri basis. lisu representasi string purana konversi. nomoro basis kurang pole 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,bug_Latn,python,"

def triangle_area(a, h):
    """"""Riwéréngngi lampe'na seddie benrénna nenniyya onrong lisu kaminang matanre untu' seddi segitiga. >>> segitiga_wilayah""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,bug_Latn,python,"

def fib4(n: int):
    """"""Urutanna bilangeng Fib4 iyanaritu urutanna iya pappada sibawa urutanna Fibbonacci iya ripattentue sipada iyae ro: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Tulis i seddi akkegunang untu' mabbilang secara efisien elemen ke-n urutanna bilangeng fib4. Aja' na pake rekursi. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,bug_Latn,python,"

def median(l: list):
    """"""Mappaduli mediana elemen ri laleng daftar l. >>> mediana (([3, 1, 2, 4, 5]) 3 >>> mediana (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,bug_Latn,python,"

def is_palindrome(text: str):
    """"""Pariksa i narekko string iya riwereng e iyanaritu palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,bug_Latn,python,"

def modp(n: int, p: int):
    """"""Mappalisui 2^n modulo p (majeppu tauwe). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,bug_Latn,python,"

def encode_shift(s: str):
    """"""malai sebagai input string iyyae dikodekan sibawa fungsi encode_shift. Mappalisui string iyyae dikodekan.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Mappalisui string iyya ri kode sibawa mappassu tungke karakter ri laleng abjad.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,bug_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels iyanaritu seddi fungsi iya malai string nenniya mappalisui string tenri vowel. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,bug_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Mappalisui True narekko sininna nomoro'e ri laleng daftar l engka riawana cappa' t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,bug_Latn,python,"

def add(x: int, y: int):
    """"""Nambah dua nomoro x na y >>> tambai ((2, 3) 5 >>> tambai ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,bug_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Paressai narekko duwa ada punnai karakter iya pada. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Tongeng >>> same_chars (('abcd', 'dddddddabc') Tongeng >>> same_chars (('dddddddabc', 'abcd') Tongeng >>> same_chars (('eabcd', 'dddddddddabc') Salah >>> same_chars (('abcd', 'dddddddabddce') Salah >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') Salah """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,bug_Latn,python,"

def fib(n: int):
    """"""Mappalisui nomoro Fibonacci n-th. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,bug_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket iyanaritu string ""<"" na "">"". return True narekko tungke' bracket mabbukka punnai bracket mabbukkue. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,bug_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,bug_Latn,python,"

def common(l1: list, l2: list):
    """"""Mappalisui elemen umum unik iyya risortirnge untu duwa daftar. >>> umum (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> umum (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,bug_Latn,python,"

def largest_prime_factor(n: int):
    """"""Mappalisui faktor prima kaminang maloppo pole ri n. Asumsikang n > 1 nenniya de'na prima. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,bug_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n iyanaritu seddi akkegunanna iya nasambungi nomoro pole 1 lettu n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,bug_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket iyanaritu string ""("" sibawa "")"". return True narekko tungke' bracket mabbukka punnai bracket mabbukkue. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,bug_Latn,python,"

def derivative(xs: list):
    """"""xs nawakkeleki koefisien pole polinomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Mappalisui turunna polinomial iyyae ri laleng bentu iyyae. >>> turunna (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> turunna (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,bug_Latn,python,"

def fibfib(n: int):
    """"""Urutanna bilangeng FibFib iyanaritu urutanna iya pappada sibawa urutanna Fibbonacci iya ripattentue sipada makkokoe: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Tulis i seddi akkegunang untu' makkegunang sibawa makessing elemen ke-n urutanna bilangeng fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,bug_Latn,python,"
FIX = """"""Ri laleng akkaleng iyae, akkaleng 'a', 'e', 'i', 'o', 'u'. Ri onrong e, 'y' iyanaritu akkaleng, naekiya iyami engka ri paccappureng ada iya riwereng e. Conto: >>> akkaleng_bilang'e (vowels_count) ((""abcde"") 2 >>> akkaleng_bilang'e (vowels_count) ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Tambai kasus ujiang laingnge.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,bug_Latn,python,"
def circular_shift(x, shift):
    """"""Sirkular mappaselle digit integer x, mappaselle digit ri tengngana sibawa mappaselle wassele mancaji string. Narekko mappaselle > nomoro digit, mappaselle digit ribali. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,bug_Latn,python,"
def digitSum(s):
    """"""Tugas Muki seddi fungsi iya nalai string sebagai input sibawa mappalisui jumlahna karakter riase'na bawang' kode ASCII. Conto: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,bug_Latn,python,"
def fruit_distribution(s,n):
    """"""Ri laleng iyyae jama jamang, muwasengngi seddi string iyya wakkeleki siare eppe nenniya jeruk iyya ripassare ri laleng seddie asusungeng buwa iyya engkae apples, apples, nenniya buwa mangga. Riwettunna string iyya wakkeleki siare eppe nenniya apples nenniya bilangang utue iyya wakkeleki siare eppe ri laleng asusungengnge liseri nomoro'na buwa mangga ri laleng asusungengnge. contona: fruit_distribution""5(apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples and 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,bug_Latn,python,"
def pluck(arr):
    """"""""Nia' seddi array nawakkeleki seddi cabang aju napunnai nod integer non-negatif jamangmu iyanaritu untu' nacokko seddi nod na nabali'i. nod iya nacokko'e parellu mancaji nod sibawa nilai genap kaminang beccu. narekko siare node sibawa nilai genap kaminang beccu pada riruntu'i, nabali'i node sibawa indeks kaminang beccu. node iya nacokko'e parellu ribali'i rilaleng seddi daftar, [smallest_value, indeksna ], narekko de gaga nilai genap iyarega array iya riwereng e kosong, nabali'i []. Conto 1: Input: [4,2,3] Output: [2, 1] Penjelasan: 2 punnai nilai genap kaminang beccu, nenniya 2 punnai indeks kaminang beccu. Conto 2: Input: [1,2,3] Output: [2, 1] Penjelasan: 2 punnai nilai kaminang beccu, nenniya 2 punnai indeks kaminang beccu. Conto 3: Input: [] Output: [] Input: [4: [5, 3, 4, 2] Output: [0, 0] Output: 1 node iya nacokko'e nilai indeksna kaminang beccu, napunnai dua nol. * Conto: * = = = 1""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,bug_Latn,python,"
def search(lst):
    '''Riwerekko daftar bilangang makkalepu positif. Lisu'i bilangang makkalepu kaminang maraja iyya lebbi maraja naiyya nolo, nenniyya punnai frekuensi lebbi maraja naiyya iyyarega pada sibawa angke bilangang makkalepu alena. Frekuensi seddi bilangang makkalepu iyanaritu bilangang wettuna iyya kajajiang ri laleng daftar. Narekko degaga angke pappadaero, lisu -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,bug_Latn,python,"
def strange_sort_list(lst):
    '''Riwéréng aseng bilangang makkalepu, lisui aseng ri laleng urusang de'na magello. Urusang de'na magello, iyanaritu wettunna muammulai sibawa angke' kaminang mariawa, nainappa kaminang maega pole bilangang makkalepu, nainappa kaminang mariawa nenniya makkuannanaro. Conto: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,bug_Latn,python,"
def triangle_area(a, b, c):
    '''Riwéréngngi lampe'na tellu benrénna segitiga. Lisu'i lapangang segitiga'e riputara'i lao ri 2 decimal rekko tellu benrénna mabbentu' segitiga iya makessing. Laingnge lisu -1 Tellu benrénna mabbentu' segitiga iya makessing rekko jumlana dua benrénna lebbi maloppo pole benrénna iya matellué. Conto: segitiga_lapangang(3, 4, 5) == 6.00 segitiga_lapangang(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,bug_Latn,python,"
def will_it_fly(q,w):
    '''Ripalettu'i ri lalenna atturungengnge, iyanaritu atturungeng q maelo'e massarang, nenniyya atturungeng laingnge maelo'i masolang. Atturungeng q maelo'i massarang narekko massarang (iyanaritu seddi onrong palindrom) nenniyya jumlana aturangnna iyanaritu lebbi cedde'i yarega padai sibawa bobbo' kaminang maloppo w. Conto: will_it_fly (([1, 2], 5) â -> False # 1+2 lebbi cedde'i pole bobbo' kaminang maloppo, naekiya de'na massarang. will_it_fly (([3, 2, 3], 1) â -> False # massarang, naekiya 3+2+3 lebbi pole bobbo' kaminang maloppo. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 lebbi cedde'i pole bobbo' kaminang maloppo, naekiya massarang.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,bug_Latn,python,"
def smallest_change(arr):
    """"""Riwéréng seddi susunan bilangang makkalepu, runtui bilangang minimal elemen iya parellu ripinra untu' makkebbu susunan palindrom. Susunan palindrom iyanaritu susunan iya ribaca pada paimeng nenniya maju. Ri seddi pinra, wedding ripinra seddi elemen lao ri elemen lainge. contona: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,bug_Latn,python,"
def total_match(lst1, lst2):
    '''Ri laleng daftarna sininna string'e, riwereng'i seddi akkegunanna iya napunnai'e nomoro' akkegunanna iya kaminang cedde'e pole ri nomoro' akkegunanna iya laingnge. Narekko iya duwa daftar'e mappada nomoro' akkegunanna, riwereng'i nomoro' akkegunanna iya pammulangnge.'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,bug_Latn,python,"
def is_multiply_prime(a):
    """"""Ripalettu'i ri lalenna atturungengnge iyanaritu ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima, ripasisompungengngi ri tellu bilangang prima.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,bug_Latn,python,"
def is_simple_power(x, n):
    """"""Tugasmu iyanaritu maruki akkegunang iya lisu tongeng narekko nomoro x iyanaritu seddi kuasa sederhana pole n nenniya salah ri kasus lainge. x iyanaritu seddi kuasa sederhana pole n narekko n**int=x Contona: is_simple_power(1, 4) => tongeng is_simple_power(2, 2) => tongeng is_simple_power(8, 2) => tongeng is_simple_power(3, 2) => belleng is_simple_power(3, 1) belleng => pole_simple_power(5, 3) => belleng """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,bug_Latn,python,"
def iscube(a):
    '''Ri laleng akkaleng, akkaleng iya riakkegunang e iyanaritu akkaleng iya riakkegunang e ri akkaleng iya riakkegunang e ri akkaleng iya riakkegunang e ri akkaleng iya riakkegunang e.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,bug_Latn,python,"
def hex_key(num):
    """"""Engka seddi akkegunanna untu' mabbilang nomoro' heksadesimal mancaji string nennia bilang nomoro' heksadesimal iyanaritu prima (nomoro prima, iyarega prima, iyanaritu nomoro' alami lebbi maraja na 1 iya de'e produk pole dua nomoro' asli lebbi beccu). Nomoro' heksadesimal iyanaritu 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Nomoro' prima iyanaritu 2, 3, 5, 7, 11, 13, 17,... Jaji parellu mutentu nomoro' digit berikut: 2, 3, 5, 7, B (= desimal 11), D (= desimal 13). Catatan: wedding muanggap input selalu tongeng iyarega kosong, nennia simbol A, B, C, D, E, F, tuli riposisi sibawa huruf loppo. Conto: untu' num ""AB"" output harus num = 1. untu' ""1077E"" output harus num = 2. untu' num ""AB"" = 331ED num = 4. untu' num ""ABC"" harus num = 6.089123DEF ""2020"" output harus num = 2.045""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,bug_Latn,python,"
def decimal_to_binary(decimal):
    """"""Engka seddi nomoro' ri laleng bentu' desimal na jamangmu iyanaritu na konvertasi'i lao ri bentu' biner. Fungsi'e waji'i nabali string, sibawa tungke' karakter nawakkeleki nomoro' biner. Tungke' karakter ri laleng string'e mancaji '0' iyarega '1'. Engka matu siare karakter tambahan 'db' ri pammulang na ri paccappureng string'e. Karakter tambahan'e engka untu' bantui format'e. Conto: decimal_to_binary ((15) # nabali ""db1111db"" decimal_to_binary32) # nabali ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,bug_Latn,python,"
def is_happy(s):
    """"""Engka seddi string s. Tugasna iyanaritu untu' paressai narekko string'e marennu iyarega de. string marennu narekko lampena kurang lebbi 3 sibawa tungke 3 hurupu' ya engkae mappada Misalna: is_happy (a) => Pallesse is_happy (aa) => Pallesse is_happy (abcd) => True is_happy (aabb) => Pallesse is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,bug_Latn,python,"
def numerical_letter_grade(grades):
    """"""Iyanae minggu paccappureng pole semester'e nennia guru'e parellu mabbere nilai lao ri ana' guru'e. Guru'e pura makkebbu algoritma alena untu' mabbere nilai. Seddi masala' iyanaritu, alena pura naseddingi kode iya napake untu' mabbere nilai. Alena pura mabbere daftar nilai rata-rata GPA lao siare' ana' guru' na mu parellu maruki seddi fungsi iya wedding mappawassele daftar nilai huruf mappake tabel iya ripuada e: GPA. Nilai huruf 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: conto persamaan nilai.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,bug_Latn,python,"
def prime_length(string):
    """"""Riuki'i akkegunanna iya malai seddi string nenniya mappalisui True narekko lampena string iyanaritu nomoro' prima iyarega False narekko de'e, contona prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,bug_Latn,python,"
def starts_one_ends(n):
    """"""Riweri bilangang makkalepu positif n, leppeki bilangang bilangang makkalepu positif n-angka iya pammulang iyarega paccappureng sibawa 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,bug_Latn,python,"
def solve(N):
    """"""Riwéréng nomoro' makkalepu positif N, lisui jumlana digitna rilaleng biner. Conto' untu' N = 1000, jumlana digit mancaji 1 outputna mancaji ""1"". untu' N = 150, jumlana digit mancaji 6 outputna mancaji ""110"". untu' N = 147, jumlana digit mancaji 12 outputna mancaji ""1100"". Variabel: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. output: string angka biner """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,bug_Latn,python,"
def add(lst):
    """"""Riwéréng daftar bilangang makkalepu iya de'e kosong, tambai elemen genap iya engka ri indeks ganjil.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,bug_Latn,python,"
def anti_shuffle(s):
    """"""Ri laleng akkaleng iya ripasseddi, akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e ri laleng akkatuwongeng iya ripasseddi e.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,bug_Latn,python,"
def get_row(lst, x):
    """"""Engka seddi data 2 dimensi, sebagai daftar masselang, iya mappada sibawa matriks, naekiya, de'na pada sibawa matriks, tungke' baris nulle punnai nomoro' kolom iya masselang. Riwéréng lst, nenniya bilangang makkalepu x, runtui bilangang makkalepu x ri laleng daftar, nenniya lisu daftar tuples, [(x1, y1), (x2, y2) ...] pappada tungke' tuple iyanaritu koordinat - (baris, kolom), mappammula sibawa 0. Sort koordinat pammulangna pole barisi'na rilaleng urutan menre. Makkotooparo, sort koordinat barisi'na pole kolom rilaleng urutan menre. Conto: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0) get_(], 1) [] == [[baris]], 1, 2, 3, 2, 2) []]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,bug_Latn,python,"
def sort_array(array):
    """"""Riwéréng seddi susunan bilangang makkalepu tennia-negatif, lisui seddi salinan susunan riwéréngngnge purana ripasseddi, muperisi susunan ripasseddi rilaleng urutan menre narekko jumlana (nilai indeks pammulang, nilai indeks paccappureng) iyanaritu gancang, iyarega ripasseddi rilaleng urutan makkaluttung narekko jumlana (nilai indeks pammulang, nilai indeks paccappureng) iyanaritu genap. Catatan: * aja' mupinra susunan ripasseddi. Conto: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,bug_Latn,python,"
def encrypt(s):
    """"""Mappadecengi seddi akkegunanna encrypt iyae malai seddi string mancaji argument sibawa mappalisui seddi string iyyae encrypt sibawa abjad iyyae ripinrai. Abjad waji ripinrai ri laleng cara iyya sure'na ripinrai ri yawa sibawa duwa ripoleang ri duwa onrong. contona: encrypt('hi') mappalisui 'lm' encrypt('asdfghjkl') mappalisui 'ewhjklnop' encrypt('gf') mappalisui 'kj' encrypt('et') mappalisui 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,bug_Latn,python,"
def next_smallest(lst):
    """"""Riwéréngki daftar bilangang makkalepu. Kirim akkegunang next_smallest (() iya mappalisui elemen kaminang beccu 2 pole ri daftar. Mappalisui None narekko de gaga elemen pappada. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,bug_Latn,python,"
def is_bored(S):
    """"""Riwérékko seddi kata, na jamangmu iyanaritu bilangngi bilangenna asussangnge. Asussangnge iyanaritu seddi ada-ada iya mappammula sibawa ada ""I"". Ada-adae ribettuwaangi sibawa '.', '?' iyarega '!'. Padapadanna: >>> is_bored(""Hello world"") 0 >>> is_bored(""Langi maputara. Mata essoe mattappa. Uji'na wettue"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,bug_Latn,python,"
def any_int(x, y, z):
    '''Mappatujungngi akkegunanna tellu bilangeng. Mappapoléi tongeng narekko seddi bilangeng pada sibawa jumlana dua laingnge, nenniya sininna bilangeng iyanaritu bilangeng mattemmu. Mappapoléi bellana ri laleng kasus laingnge. Conto: tungke_int{5, 2, 7} -> Bettuang tungke_int{3, 2, 2} -> Bettuang tungke_int{3, -2, 1) -> Bettuang tungke_int{3, 6, -2, 2) -> Bettuang tungke_int{3, -2, 2)'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,bug_Latn,python,"
def encode(message):
    """"""Ri laleng alpabétna Inggris, akkégunangna iyanaritu: ""Encode"" (test) ""TGST"" (encode) ""This is a message"" (Iyanaé pappaseng) ""tHKS KS C MGSSCGG""""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,bug_Latn,python,"

def skjkasdkd(lst):
    """"""Riwerekko daftar bilangang makkalepu. parellu ri runtui nilai prima kaminang maraja sibawa ripalettukeng jumlana digitna. contona: ri tujunna lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output'e waji'i mancaji 10 ri tujunna lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] output'e waji'i mancaji 25 ri tujunna lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output'e waji'i mancaji 13 ri tujunna lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output'e waji'i mancaji 11 ri tujunna lst = [0,81,12,31,21] output'e waji'i mancaji 3 ri tujunna lst = [0,1,8,1,2,1,7] output'e waji'i mancaji 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,bug_Latn,python,"
def check_dict_case(dict):
    """"""Riwéréng aseng kamus, lisu tongeng narekko sininna konci iyanaritu string ri laleng huruf baiccu iyarega sininna konci iyanaritu string ri laleng huruf maraja, ripallebbangngi salah. Fungsi'e waji'i lisu salah narekko kamus iya riwereng e kosong. Conto: check_dict_case{""a"":""apple"", ""b"":""banana""}) waji'i lisu tongeng. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) waji'i lisu salah. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) waji'i lisu salah. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) waji'i lisu salah. check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345} waji'i lisu tongeng.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,bug_Latn,python,"
def count_up_to(n):
    """"""Nalai seddi fungsi non-negatif na mappuasa array pole ri n bilangang prima na kurang pole ri n. contona: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,bug_Latn,python,"
def multiply(a, b):
    """"""Tulungngi mappunru dua bilangang utue na ulle i wassele'na seddi digit. Asumsikangi input na tuli tongeng. Conto: perkaliang 148, 412) waji'i ulle i 16. perkaliang 19 28 waji'i ulle i 72. perkaliang 2020 1851 waji'i ulle i 0. perkaliang 14-15 waji'i ulle i 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,bug_Latn,python,"
def count_upper(s):
    """"""Riwereng string s, bilang bilangenna vowel marajae ri laleng indeks genap. contona: count_upper (('aBCdEf') mabbere 1 count_upper (('abcdefg') mabbere 0 count_upper (('dBBE') mabbere 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,bug_Latn,python,"
def closest_integer(value):
    '''Mébbu seddi akkegunang iya makkacue nilai (string) iya wakkeleki nomoro nenniya mappalisui bilangang makkalepu iya kaminang macawe lao ri iyyae. Narekko nomoro'e mappada jarakna pole duwa bilangang makkalepu, nasuroi pole nolo. Conto >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Catatan: Nasuroi pole nolo bettuanna narekko nomoro' iya riwereng e mappada jarakna pole duwa bilangang makkalepu, iya parellu e muwali iyanaritu iya kaminang mabela pole nolo. Untu' contona closest_integer "" ((14.5"") parellu mappalisui 15 nenniya closest_integer "" ((-14.5"") parellu mappalisui -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,bug_Latn,python,"
def make_a_pile(n):
    """"""Riwéréng nomoro' makkalepu positif n, parellu muwasseleki tumpeng batu n tingkat. Tingka' pammulang punnai batu n. Angka batu ri tingka' nainappa iyanaritu: - nomoro' mappada nainappa narekko n iyanaritu mappada. - nomoro' mappada nainappa narekko n iyanaritu mappada. Ullei bilangeng batu ri tungke' tingka' ri laleng daftar, ri onrong elemen ri indeks i wakkeleki bilangeng batu ri tingka' (i+1). Conto: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,bug_Latn,python,"
def words_string(s):
    """"""Engka seddi kata kata ripassarang sibawa koma na ruang. jamangmu iyanaritu napassarangngi iyaro katae mancaji dua ada na ulleangi seddi array pole ri ada-adae. contona: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,bug_Latn,python,"
def choose_num(x, y):
    """"""Iyyae akkegunanna malai duwa bilangeng positif x nenniya y nenniya mappalisui bilangeng makkalepu kaminang maloppo iya engka ri laleng rentang [x, y] inklusif. narekko degaga bilangeng pappada, nainappa akkegunanna waji mappalisui -1. contona: pilei_bilangeng (x, y) = 14, pilei_bilangeng (x, y) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,bug_Latn,python,"
def rounded_avg(n, m):
    """"""Engka dua bilangang makkalepu positif n na m, na tugasna iyanaritu mabbilang rata-rata bilangang makkalepu pole n lettu m (mattama n na m). Nabulung i pappebalinna lao ri bilangang makkalepu kaminang macawe na nabali i mancaji biner. Narekko n lebbi maraja na m, lisu -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,bug_Latn,python,"
def unique_digits(x):
    """"""Riwéréng aseng bilangang makkalepu positif x. lisu seddi daftar ripasseddi pole yamaneng elemen iya de nappunnangi digit genap. Catatan: Daftar ripasseddi waji ripasseddi rilaleng urutan menre. contona: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,bug_Latn,python,"
def by_length(arr):
    """"""Riwettunna engka seddi susunanna bilangang makkalepu, ripasseru'i bilangang makkalepu'e iyya engkae ri pallawangenna 1 nenniyya 9 mattama', ribali'i susunanna iyya engkae, nenniyya nainappa ripinra tungke' digit'e nasibawai aseng iyya mappada pole ""Seddi"", ""Duwa"", ""Tellu"", ""Eppana"", ""Lima"", ""Enneng"", ""Pitu"", ""Ettoro"", ""Siappulo"". contona: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ripasseru'i arr -> [1, 1, 2, 3, 4, 5, 8] -> ripasseru'i arr -> [8, 5, 4, 3, 2, 1, 1] lisu [""Ettoro"", ""Eppana"", ""Tellu"", ""Duwa"", ""Eppana"", ""Duwa"", ""Duwa"", ""Seddi"", ""Seddi""] Narekko susunanna kosong, ripasseru'i susunanna: arr = [] lisu [] Narekko susunanna punnai nomoro' iya de' nasicoco', de'i: arr = [1, -1 , 55] -> arr -> [1, 1], 55 -> reverse arr = [51] - [' lisu 1,' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,bug_Latn,python,"
def f(n):
    """"""Implementasikan fungsi f yang mengambil n sebagai parameter, dan mengembalikan daftar ukuran n, sehingga nilai elemen di indeks i adalah faktorial i jika i genap atau jumlah bilangan dari 1 ke i sebaliknya. i dimulai dari 1. faktorial i adalah perkalian bilangan dari 1 ke i (1 * 2 * ... * i). Contoh: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,bug_Latn,python,"
def even_odd_palindrome(n):
    """"""Riwéréng nomoro' makkalepu positif n, mappalisui seddi tuple iyya punnai nomoro' palindrom bilangang makkalepu genap nenniya tennia sipakainge iyya engka ri laleng rentang ((1, n), termasu'I. Conto1: Input: 3 Output: (1, 2) Penjelasan: Palindrom bilangang makkalepu iyanaritu 1, 2, 3. sala seddi pole pada alena iyanaritu genap, nenniya duwa pole pada alena iyanaritu tennia sipakainge. Conto2: Input: 12 Output: (4, 6) Penjelasan: Palindrom bilangang makkalepu iyanaritu 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. eppa pole pada alena iyanaritu genap, nenniya 6 pole pada alena iyanaritu tennia sipakainge. Catatan: 1. 1 <= n <= 10^3 2. tuple mappalisui nomoro' palindrom bilangang makkalepu genap nenniya tennia sipakainge. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,bug_Latn,python,"
def count_nums(arr):
    """"""Riuki'i akkegunang count_nums iyae malai array bilangang makkalepu sibawa mappalisui bilangang elemen iyae punnai jumlah digit > 0. narekko nomoro' negatif, nainappa digit pammulang iyae tanrang mancaji negatif: contona -123 punnai digit tanrang -1, 2, sibawa 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,bug_Latn,python,"
def move_one_ball(arr):
    """"""Engka seddi array 'arr' pole N bilangang makkalepu arr[1], arr[2], ..., arr[N]. nomoro'e ri array'e maelo'i ripasseddi nasibawai acakkaleng. Tugasna iyanaritu pattentui nullega runtu array ripasseddi sibawa de'na kurangi sibawa mappigau operasi berikut ri array'e: wedding ripugau operasi pergeseran kanan sebanyak-banyaknya. seddi operasi pergeseran kanan berarti mappigau sininna elemen array'e sibawa seddi posisi ri laleng arah yang tepat. elemen terakhir array'e maelo ripasseddi ri posisi awal array'e, yaitu indeks ke-0. narekko ullei runtu array'e sibawa mappigau operasi riase'na, maka bali tongeng, narekko de'na kosong maka bali palsu. Catatan: daftar yang diberikan dijamin memiliki elemen unik. Misal: move_one_(ball[3, 4, 5, 2] (perjelasannya benar) Perforasi kanan: dengan melakukan 2 operasi pergeseran kanan, urutan non-kurangi untuk array'e bisa dicapai.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,bug_Latn,python,"
def exchange(lst1, lst2):
    """"""Ri lalenna iyyae passalengnge, aleena napakei seddi akkegunanna iyya malai duwa daftar bilangeng, nenniyya pattentui nullega ripigau appalecce elemeng ri pallawangenna bara makkullei mancaaji lst1 mancaaji daftar bilangeng mattentu bawang. Dee gaga batena ri tujunna bilangeng elemeng iyya ripinraie pallawangenna lst1 nenniyya lst2. Narekko nulle ripinraie elemeng ri pallawangenna lst1 nenniyya lst2 bara makkullei mancaaji sininna elemeng lst1 mancaaji mattentu, leppessakki lisu ""IYA"". Narekko dee, leppessakki lisu ""TENGA"". Padapadanna: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""IYA"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""TENGA"" Riasengngi makkedae attanengeng input dee gaga kosong. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,bug_Latn,python,"
def histogram(test):
    """"""Riwéréng seddi string iyya wakkeleeki seddi onrong iyya ripallaingnge pole ri hurupu' mabiccu'e, lisui kamus pole ri hurupu' iyya kaminang maega ripakalebbie nenniyya iyya punnai angke iyya sicoco'e. Narekko siare hurupu' punnai kajajiang iyya padae, lisui maneng. Conto: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4}': histogram ((('') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,bug_Latn,python,"
def reverse_delete(s,c):
    """"""Tugas Riwéréngki duwa string s sibawa c, parellu muaddampeng maneng karakter ri s iya pada sibawa karakter ri c nainappa ri periksa i narekko wassele string iyanaritu palindrom. string riyaseng palindrom narekko maccana pada paimeng sibawa maju. parellu mubalii tuple iya engka wassele string nenniya True/False untu' ri periksa. contona lao ri s = ""abcde"", c = ""ae"", wassele'na parellu mancaji ('bcd',False) lao ri s = ""abcdef"", c = ""b"" wassele'na parellu mancaji ('acdef',False) lao ri s = ""abcdedcba"", c = ""ab"", wassele'na parellu mancaji ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,bug_Latn,python,"
def odd_count(lst):
    """"""Riwéréng daftar string, ri onrong tungke string punnai bawang digit, mappalisui daftar. Tungke elemen i pole output waji'i ""jumlah elemen ganjil ri string i pole input. "" ri onrong i' iyamaneng waji'i risellei sibawa jumlah digit ganjil ri string i'th pole input. >>> odd_count['1234567']) [""jumlah elemen ganjil 4n str4ng 4 pole 4nput.""] >>> odd_count['3',""111111""]) [""jumlah elemen ganjil 1n str1ng 1 pole 1nput."", ""jumlah elemen ganjil 8n str8ng 8 pole 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,bug_Latn,python,"
def minSubArraySum(nums):
    """"""Riwereng seddi susunan bilangang makkalepu, runtui jumlah minimal pole sub-susunan bilangang non-kosong. Conto minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,bug_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Engka seddi onrong mattette'na ri laleng seddi onrong mattette'na. Tungke' onrong mattette'na punnai seddi ballo' iya weddingnge ripakkeguna untu' massara' uwai, sibawa sininna ballo'e punnai seddi onrong mattette'na. Tugasna iyanaritu akkegunanna ballo'e untu' paccappui ballo'e. Naikkai nomoro'na wettuna parellu makkaccapi ballo'e. Conto 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 * 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 2 * 3 * 2 * 3 * 4 * 5 * 6 * 6 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,bug_Latn,python,"
def sort_array(arr):
    """"""Ri lalenna iyyae Kata, parellu muassorokeng seddi abbilangeng mattette tennia-negatif ri sese nomoro seddi ri laleng representasi biner na ri laleng urusang menre. ri tujunna nomoro seddi iyya pappadae, muassorokeng ri sese nilai desimal. parellu ripalebbangi pada iyyae: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,bug_Latn,python,"
def select_words(s, n):
    """"""Riwéréng string s nenniyya bilangang asli n, pura rijello'ko untu' mappakei akkegunanna iyya mappalisui daftar sininna ada pole string s iyya punnai persis n konsonan, nasibawai iyyae adae mompo ri string s. Narekko string s kosong, akkegunanna parellu mappalisui daftar kosong. Akkattana: wedding toi rianggap akkegunanna string input punnai bawang hurupu nenniyya onrong. Conto: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,bug_Latn,python,"
def get_closest_vowel(word):
    """"""Engka seddi ada. Tugasna iyanaritu runtui vowel kaminang macawe'e iya engkae ri pallawangenna dua konsonan pole ri seddie ataunna ada'e (sensitif kasus). Vowel ri pammulang sibawa paccappureng de'na dibilang. Lisu'i string kosong narekko de'na runtui vowel iya mappunnangi syarat ri yase. wedding toi riassengi narekko string iyya engkae iyami hurupu' bahasa inggris. Conto: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,bug_Latn,python,"
def match_parens(lst):
    '''Engka dua string, dua-dua string'e engka parenthesis '(' iyarega parenthesis ') ' bawang. jamangmu iyanaritu untu' paressai engkaiga wedding ripasisambung dua string'e ri laleng siare urutang, narekko string'e mancaji makessing. string S riaseng makessing narekko na bawang narekko sininna parenthesis ri S sicoco'i. contona: string '((()) ' makessing, na string '()) ' de'. Ullei 'IyyE' narekko engka laleng untu' makkebbu string makessing, nennia ullei 'Tenni' narekko de. Conto: match_parens[('() ', ') ']) == 'IyyE' match_parens[(') ', ') ']) == 'Tenni' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,bug_Latn,python,"
def maximum(arr, k):
    """"""Riwéréng seddi susunanna bilangang makkalepu sibawa bilangang makkalepu positif k, lisui seddi daftar iyya ripasseddi sibawa lampe k sibawa nomoro k kaminang maega ri susunanna. Conto1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Conto2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Conto3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Catatan: 1. lampe susunanna matu ri laleng kisarang [1, 1000]. 2. elemen-elemenna susunanna matu ri laleng kisarang [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,bug_Latn,python,"
def solution(lst):
    """"""Riwereng seddi daftar bilangang makkalepu, ulle i jumlah yamaneng elemen mappada iya engka ri posisi genap. Conto solusi (([5, 8, 7, 1]) ==> 12 solusi (([3, 3, 3, 3, 3]) ==> 9 solusi (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,bug_Latn,python,"
def add_elements(arr, k):
    """"""Riwéréng seddi susunan bilangang makkalepu iya de'e kosong arr nenniya seddi bilangang makkalepu k, leppungngi jumlah elemen sibawa kaminang maega dua digit pole elemen k pammulang pole arr. Conto: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # jumlah 21 + 3 Konstraksi: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,bug_Latn,python,"
def get_odd_collatz(n):
    """"""Riwettunna bilangang makkalepu positif n, ripassu daftar ripassu iyya punnai nomoro' de'na pada ri laleng urutang collatz. Pakebba' Collatz iyanaritu pakebba' matematika iyya sisumpung urutang iyya ribettuangi pappada iyyae: ripammulai sibawa sininna bilangang makkalepu positif n. Nainappa tungke' werekkada riruntu pole werekkada riolona pappada iyyae: narekko werekkada riolona iyanaritu genap, werekkada riolona iyanaritu sitengnga werekkada riolona. Narekko werekkada riolona iyanaritu mappada, werekkada riolona iyanaritu 3 kali werekkada riolona plus 1. Pakebba'na iyanaritu majeppu de'na matterui aggangkanna n, urutang n tuli lettu ri 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,bug_Latn,python,"
def valid_date(date):
    """"""Mustiko maruki akkegunanna iya navalidasi'e string tanggala' iya riwereng'e nenniya mappalisui True narekko tanggala'e tongeng, narekko de'e, False. Tanggala'e tongeng narekko sininna aturang ya ripugau'e: 1. Tanggala'e de'na kosong. 2. Nomoro' esso de'na kurang pole 1 iyarega lebbi pole 31 esso ri uleng 1,3,5,7,8,10,12. nenniya nomoro' esso de'na kurang pole 1 iyarega lebbi pole 30 esso ri uleng 4,6,9,11. nenniya nomoro' esso de'na kurang pole 1 iyarega lebbi pole 29 ri uleng 2. 3. uleng de'na wedding kurang pole 1 iyarega lebbi pole 12. 4. tanggala'e waji ri laleng format: mm-dd-yyyy pappada: valid_date (('03-11-2000') => True_valid_date (('15-01-2012') => False valid_date (('04-04-20') => False_valid_date (('06-04-2020') => True_valid_date (('06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,bug_Latn,python,"
def split_words(txt):
    '''Riwéréng seddi string ada, lisu seddi daftar ada iya tabbage-bage ri onrong kosong, narekko de gaga onrong kosong ri teksna, parellu tabbage ri koma ',' narekko degaga koma, parellu lisu nomoro'na hurupu' baiccu sibawa urusang mappada ri alfabet, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Conto split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,bug_Latn,python,"
def is_sorted(lst):
    '''Riwéréng aseng bilangeng, ripalisu namuni ripasseddi iyarega de ripasseddi ri laleng urusang menre. Narekko daftarna punnai lebbi pole 1 duplikat nomoro iya pada, ripalisu Salang. Asumsikan de'na nomoro negatif na iyami bilangeng makkalepu. Conto iyanaritu_riseddi ((([5]) â -> True iyanaritu_riseddi (([1, 2, 3, 4, 5]) â -> True iyanaritu_riseddi (([1, 2, 3, 4, 5, 6]) â -> False iyanaritu_riseddi (([1, 2, 3, 4, 5, 6, 7]) â -> True iyanaritu_riseddi (([1, 3, 2, 4, 5, 6, 7]) â -> False iyanaritu_riseddi (([1, 3, 2, 4, 5, 6, 7]) â -> False iyanaritu_riseddi (([1, 2, 2, 3, 3, 4]) â -> True iyanaritu_riseddi (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,bug_Latn,python,"
def intersection(interval1, interval2):
    """"""Riwéréngki duwa interval, tungke interval iyanaritu sipasang bilangang makkalepu. contona, interval = (mammula, paccappureng) = (1, 2). interval riwereng iyanaritu tattale iyya bettuwanna interval (mammula, paccappureng) muttama'i pammulang nenniya paccappureng. ri tungke interval riwereng, riassengngi pammulangna lebbi cedde iyarega pada sibawa paccappurenna. jamangmu iyanaritu pattentui iyarega lampena persimpangan pole dua interval iyya iyanaritu nomoro prima. contona, lampena persimpangan pole interval (1, 3), (2, 4) iyanaritu (2, 3) iyya lampana iyanaritu 1, iyya tenniya nomoro prima. narekko lampena persimpangan iyanaritu nomoro prima, pabali ""IYA"", narekko de, pabali ""TIDDA"". narekko dua interval de'na sisompung, pabali ""TIDDA"". [input/output] sampel: persimpangan (((1, 2), (2, 3) ==> ""persimpangan ("",), ((1), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,bug_Latn,python,"
def prod_signs(arr):
    """"""Engka seddi array pole bilangang makkalepu, na parellu mubali'i jumlah magnitudo pole bilangang makkalepu ri kali pole produk pole sininna tanra pole tungke nomoro ri array, iya ri wakkeleki 1, -1 iyarega 0. Catatan: Mubali'i degaga untu' ar kosong. Conto: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,bug_Latn,python,"
def minPath(grid, k):
    """"""Riwéréng seddi kisi sibawa N barisi nenniya N kolom (N >= 2) nenniya seddi bilangang makkalepu positif k, tungke sel pole ri kisi'e punnai seddi angke. Tungke bilangang makkalepu ri laleng rentang [1, N * N] inklusif cumpa persis seddi wettu ri sel pole ri kisi'e. Parellu ri runtu laleng kaminang cedde' lampe k ri kisi'e. wedding ri pammulai pole ri sel, nenniya ri tungke' laaleng wedding ri laoni ri sel-sel jiran, ri laleng ada laing e, wedding ri laoni ri sel-sel iya mappada benrenna sibawa sel iyyaro. Parellui ri parengi makkeda laleng lampe k bettuanna laoni ri sel k (tenniya parellu mabentu). TIAKA' laoni pole ri kisi'e. Lajang A (lampe k) riaseng lebbi cedde' pole lajang B (lampe k) narekko purana makkebbu daftar teraturang angke'e ri sel A nenniya B (aleseng i alena l_stA nenniya l_stB), secara leksikal lebbi cedde' pole l_stA, rilaleng lajang lainge, laleng laleng laleng lajang makkalepu k, ri laleng lajang lajangna, laleng lajang lajang lajang lajang lajang lajang sibawa iyyaro, i = i, i = i = i, i = i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, j, i, i, i, i, i, i, i, j, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u, u,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,bug_Latn,python,"
def tri(n):
    """"""Sininna tau naisseng urutan Fibonacci, iyyae ri aggurui secara marilaleng pole matematikawan ri wettu siarek aba' paccappureng. Naekiya, aga de'na riisseng iyanaritu urutan Tribonacci. Urutunan Tribonacci ribettuangi pole akkereng: tri(1) = 3 tri(n) = 1 + n / 2, narekko n iyanaritu genap. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), narekko n iyanaritu ganca. contona: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Riwereng nomoro makkalepu non-negatif, parellu mubali'i daftar nomoro pammulang n + 1 pole urutan Tribonacci. Conto: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,bug_Latn,python,"
def digits(n):
    """"""Riwéréng nomoro' makkalepu positif n, leppeki wassele'na digit-digit iya de'e nasicoco'. Leppeki 0 narekko sininna digit-digit iyanaritu genap. Padapadanna: digit-digit (a) == 1 digit-digit (b) == 0 digit-digit (c) == 235 == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,bug_Latn,python,"
def is_nested(string):
    '''Mappatuju seddi akkegunanna iya nalai seddi string sebagai input iya engkae bawang kurung kuadrat. akkegunanna waji'i lisu tongeng narekko nenniya iyami narekko engka seddi subsekwensi kurung iya valid ri onrong kaminang kurang seddi kurung ri subsekwensi'e. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]]]]][[[[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> True is_nested'[[]]]][[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,bug_Latn,python,"

def sum_squares(lst):
    """"""Engka seddi daftar nomoro. parellu mubali'i sumpanna nomoro' kuadrat ri laleng daftar iya riwereng, na-deppung tungke' elemen ri laleng daftar lao ri int kaminang tanre'e. contona: untu' lst = [1,2,3] output'e waji'i mancaji 14 untu' lst = [1,4,9] output'e waji'i mancaji 98 untu' lst = [1,3,5,7] output'e waji'i mancaji 84 untu' lst = [1.4,4.2,0] output'e waji'i mancaji 29 untu' lst = [-2.4,1,1] output'e waji'i mancaji 6""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,bug_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Mappappancaji seddi akkegunanna iyae mappalisui True narekko tanra paccappureng pole ri string iyae riwereng e iyanaritu tanra abbe sibawa tenniya bagiang pole ri seddi ada, nenniya False ri lainnaero. Akkattana: ""ada"" iyanaritu kelompo tanra iyae ripallawangeng sibawa ruang. Conto: check_if_last_char_is_a_letter"" ""apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> True check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,bug_Latn,python,"
def can_arrange(arr):
    """"""Mappatuju seddi akkegunanna iya mappalisui indeks kaminang maloppo pole ri seddi elemen iya de'na lebbi maloppo iyarega pada sibawa elemen iya maddiolo. Narekko de'na gaga elemen pappada yaro nainappa mappalisui -1. Array iya riwereng e de'na punnai nilai duplikat. Conto: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,bug_Latn,python,"
def largest_smallest_integers(lst):
    '''Mébbu seddi akkegunang iya mappalisui seddi tuple (a, b), ri onrong 'a' iyanaritu bilangeng makkalepu negatif iya kaminang maloppo, nenniya 'b' iyanaritu bilangeng makkalepu positif iya kaminang mabeccu ri laleng seddi daftar. Narekko de gaga bilangeng makkalepu negatif iyarega positif, mappalisui pada Alena. Conto: kaminang maloppo_makkalepu_makkalepu[2, 4, 1, 3, 5, 7]) == (Dé, 1) kaminang maloppo_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkalepu_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale_makkale'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,bug_Latn,python,"
def compare_one(a, b):
    """"""Mappadecengi seddi akkegunanna iya nalai bilangang makkalepu, float, iyarega string iya nawakkeleki bilangang asli, nenniya nabali'i variabel iya kaminang maloppo ri laleng tipe variabel na iya riwereng. Mappadecengi degaga narekko nilai na pada. Catatan: Narekko nomoro asli riwakkeleki sebagai string, titik mappadecengi nulle . iyarega , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> Degaga """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,bug_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Paressai narekko nomoro' n'e wedding riuki mancaji jumlah pole 4 nomoro' genap positif. Conto is_equal_to_sum_even (pammulanna) 4) == Pallessu is_equal_to_sum_even (pammulanna) 6) == Pallessu is_equal_to_sum_even (pammulanna) 8) == Tongeng """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,bug_Latn,python,"
def special_factorial(n):
    """"""Faktorial Brasil dipanessai sebagai: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! tegana n > 0 contona: >>> special_factorial ((4) 288 Fungsi na tarimai seddi bilangang makkalepu mancaji input na parellu lisu paktoril khusus pole ri bilangang makkalepu e ro.""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,bug_Latn,python,"
def fix_spaces(text):
    """"""_Conto-3tring, nasellei sininna ruang'e sibawa tanra-tanrang, nenniya narekko string punnai lebbi pole 2 ruang' massusung, nasellei sininna ruang' massusung sibawa - fix_spaces ((""Conto"") == ""Conto"" fix_spaces ((""Conto1"") == ""Conto1"" fix_spaces ((""Conto2"") == ""_Conto2"" fix_spaces ((""Conto 3"") == ""_Conto-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,bug_Latn,python,"
def file_name_check(file_name):
    """"""Makkebbu akkegunang iya nalai string iya nawakkeleki aseng file, sibawa mappalisui 'IyyE' narekko aseng file'e makessing, sibawa mappalisui 'Tentu' narekko de. Aseng file'e riaseng makessing narekko na banna narekko sininna syarat iya ripugau'e: - De'na wedding engka lebbi pole tellu digit ('0'-'9') ri aseng file'e. - Aseng file'e punnai seddi tetti '.' - Substring riolona tetti'e de'na wedding kosong, sibawa ripammulai sibawa seddi hurup pole alpha latin ('a'-'z' sibawa 'A'Z'). - Substring purana tetti'e waji'i sala seddi pole iyae: ['txt', 'exe', 'lld'] Conto: file_name_check""{example.txt.} # => 'IyyE'_name_file_check""{example.dll.1} => 'Tentu' (asengna parellu mappamula sibawa seddi hurup latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,bug_Latn,python,"


def sum_squares(lst):
    """""""" Fungsi ini akan mengambil daftar bilangan bulat. Untuk semua entri dalam daftar, fungsi ini akan kuadratkan entri bilangan bulat jika indeksnya kelipatan 3, dan akan kubus entri bilangan bulat jika indeksnya kelipatan 4 dan bukan kelipatan 3. Fungsi ini tidak akan mengubah entri dalam daftar yang indeksnya bukan kelipatan 3 atau 4. Fungsi ini kemudian akan mengembalikan jumlah semua entri. Contoh: Untuk lst = [1,2,3] outputnya harus 6 Untuk lst = [] outputnya harus 0 Untuk lst = [-1,-5,2,-1,-5] outputnya harus -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,bug_Latn,python,"
def words_in_sentence(sentence):
    """"""Engka seddi string nawakkeleki seddi kalimat, kalimat napunnai siare ada ripasisompung sibawa spasi, na mupuelo lisu seddi kalimat napunnai ada pole kalimat aslina, iya lampe'na iyanaritu bilangang prima, urutan kata-kata ri laleng kalimat baru'e waji'i pappada sibawa kalimat aslina. Contoh1: Input: kalimat = ""Ini adalah tes"" Output: ""is"" Contoh2: Input: kalimat = ""let go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * kalimat napunnai bawang hurup """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,bug_Latn,python,"
def simplify(x, n):
    """"""Tugasna iyanaritu mappakei akkegunang iyya napallaingeng i ekspresi x * n. Akegunang iyya lisu True narekko x * n riekspresi mancaji bilangang sukku na Palles. Naekiya x na n, iyanaritu representasi string pole ri pecahang, sibawa punna format iyya ripugau, <numerator>/<denominator> tegana duwa bilangang nenniya denominator iyanaritu bilangang sukku positif. wedding riassamaturui makkeda x, nenniya n iyanaritu pecahang iya makkeguna, nenniya de nappunnangi nolo sebagai denominator. simplify "" 1/5"", ""5/1"") = True simplify "" 1/6"", ""2/1"") = False simplify "" 7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,bug_Latn,python,"
def order_by_points(nums):
    """"""Ri laleng daftar aslina, akkebureng iya ripasseddi e iyanaritu: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points ([]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,bug_Latn,python,"
def specialFilter(nums):
    """"""Riuki'i akkegunanna iya nalai'e array bilangeng'e mancaaji input na mappalisui bilangeng'e ri array iyya lebbi maraja na 10 nenniya dua digit pammulang nenniyya paccappureng pole seddi bilangeng'e iyanaritu ganca (1, 3, 5, 7, 9). contona: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,bug_Latn,python,"
def get_max_triples(n):
    """"""Riwéréngki bilangeng mattemmu positif n. Parellu riakkebbu array bilangeng mattemmu a pole lampe n. Untu' tungke i (1 ‰¤ i ‰¤ n), angke a[i] = i * i - i + 1. Muttama'i nomoro'na triplek (a[i], a[j], a[k]) pole a ri onrong i < j < k, nenniya a[i] + a[j] + a[k] iyanaritu seddi perkaliang pole 3. Conto: Input: n = 5 Output: 1 Penjelasan: a = [1, 3, 7, 13, 21] Satu-satunya triple yang valid adalah (1, 7, 13).""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,bug_Latn,python,"
def bf(planet1, planet2):
    '''Engka aruwa planet ri Tata Surya: kaminang macawe ri Mataesso iyanaritu Merkurius, nainappa Vénus, nainappa Lino, Mars, Yupiter, Saturnus, Uranus, Neptunus. Tuwoki seddi akkegunanna iya malai duwa aseng planet mancaji string planet1 sibawa planet2. Fungsi'e waji'i mappalisui seddi tuple iyya sisumpung maneng planet iyya orbit'e engka ri pallawangenna orbit planet1 nenniyya orbit planet2, ripasseddi pole ri cakka'na lao ri Mataesso. Fungsi'e waji'i mappalisui seddi tuple kosong narekko planet1 iyarega planet2 tennia aseng planet iyya coco'. Conto bf ""(Jupiter"", ""Neptunus"") ==> (""Saturn"", ""Uranus"") bf (((""Bumi"", ""Mercury"") ==> (""Vénus"") bf (((""Mercury"", ""Uranus"") ==> (""Vénus"", ""Bumi"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,bug_Latn,python,"
def sorted_list_sum(lst):
    """"""Muki seddi akkegunanna iya na tarimai seddi daftar string sebagai parameter, na deleting i string iya na punnai lampe' de' nasicoco', na mappalisui daftar iya na wassele' sibawa susunanna iya nasusun, iyyaro daftar e tuli seddi daftar string na de'na mancaji array nomoro, na nulle engka duplikat. susunanna daftar e waji'i menre pole lampe' tungke' ada, na mupulei daftar e iya nasusun sibawa aturang e. Narekko duwa ada napunnai lampe' iya pada, susunangi daftar e secara alfabet. akkegunanna waji'i mappalisui daftar string sibawa susunanna iya nasusun. wedding toi muassengi makkeda sininna ada napunnai lampe iya pada. contona: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,bug_Latn,python,"
def x_or_y(n, x, y):
    """"""Seddi program sederhana iyya waji'e mappalisui nilai x narekko n iyanaritu nomoro prima nenniya waji'i mappalisui nilai y narekko de. Conto: untu' x_or_y ((7, 34, 12) == 34 untu' x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,bug_Latn,python,"
def double_the_difference(lst):
    '''Riwereng seddi nomoro, ripassu'i nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi nomoro' ri seddi ri seddi nomoro' ri seddi ri seddi nomoro' ri seddi ri seddi nomoro' ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri seddi ri'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,bug_Latn,python,"
def compare(game,guess):
    """"""Iyyae passaleng e, idi maneng naengngerang i pappeneddinna wettunna wassele'na siare kajajiang iyya ri tunggu-tunggu cappu' riisseng. Pikkiri' nenniya pappeneddinna idi maneng ri wettu'e parellu ri catatang nenniya ripasisompung. Tugasna idi iyanaritu pattentui aga tau'e mattongeng'i naruntu wassele'na siare'e pappada. Riwéréngki duwa susunan nilai sibawa pappeneddinna iya pada-padae, na tungke' indeks mappaitangngi pappada. Lisu'i susunan iya pada-padae lampe'na na tanrai agana mabela tungke'e pappeneddinna. Narekko purai mattongeng, angke'na iyanaritu 0, narekko de, angke'na iyanaritu asilaingenna absolut pallawangenna appabottingeng sibawa angke'na. contona: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,0,4],[0,1,0,2,]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,bug_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Rilalengna iyyae, akkebbureng CAP iyanaritu nomoro'na hurupu' loppo'e ri aseng akkebbureng, nenniya SM iyanaritu nomoro'na hurupu' baiccu'e ri aseng akkebbureng, akkebbureng nawerengngi akkebbureng CAP - SM. Akkebbureng kaminang mawatang'e rituntu'i nenniya ripassu'i akkebbureng ri lalenna iyyae bentu'e: ClassName.StrongestExtensionName. Narekko engka duwa iyarega lebbi akkebbureng sibawa akkatuongeng iya pada, akkebbureng iya ripile'e ri dapara'e. Padapadanna, narekko riwerekko ""Slices"" sebagai akkebbureng sibawa daftar akkatuongeng: ['SEviRNGCliES', 'Cheese', 'StuFfed'] nainappa akkebbureng 'Slices.SEviRNGCliES' 'SviRNGCliES' 'mySviRNGCliES' (AA'_class'), akkatuongeng kaminang mawatang'e iyanaritu 'AA'_ (Class'_Beast', contona 'AA'_Extension').""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,bug_Latn,python,"
def cycpattern_check(a , b):
    """"""Riwérékko 2 ada. Parellu mubalii True narekko ada maduwa iyarega tungke'na rotasi iyanaritu substring ri ada pammulang cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,bug_Latn,python,"
def even_odd_count(num):
    """"""Riwéréng seddi bilangang makkalepu. lisu seddi tuple iyya punnai nomoro digit genap nenniya de'na sicoco. Conto: genap_de'na_bilangang ((-12) ==> (1, 1) genap_de'na_bilangang ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,bug_Latn,python,"
def int_to_mini_roman(number):
    """"""Riwéréng nomoro' makkalepu positif, runtui nomoro' romawana iya pappada e mancaji string, sibawa lisu ri laleng huruf maddiolo.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,bug_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Riwéréngngi lampéna tellu benrénna tellu gangka. Mappalisui True narekko tellu benrénna mabbentu' tellu gangka mattongeng, False rilainnae. Seddie tellu gangka mattongeng iyanaritu tellu gangka ri lalenna seddi accu'e iyanaritu accu' mattongeng iyarega 90 derajat. Conto: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,bug_Latn,python,"
def find_max(words):
    """"""Ri laleng daftarna engka siare ada. Ripalessu ada sibawa nomoro' kaminang maega. Narekko siare ada napunnai nomoro' kaminang maega, ripassu'i ada iyya kaminang pammulang ri laleng urutan leksikografis.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,bug_Latn,python,"
def eat(number, need, remaining):
    """"""Engka seddi kelinci malupu, na purani manre siare wortel, naekiya parellu manre lebbi wortel untu' napennoi anreang esso e. parellu mubali seddi array pole [total number of eaten carrots after your meals, the number of carrots left after your meals] narekko de'na genne wortel sisa, muakanre maneng wortel sisa, naekiya maelo muperellu malupu. Conto: * manre ((5, 6, 10) -> [11, 4] * manre ((4, 8, 9) -> [12, 1] * manre ((1, 10, 10) -> [11, 0] * manre ((2, 11, 5) -> [7, 0] Variabel: @number: bilangang utupu jumlah wortel iya pura muwanre. @need: bilangang utupu jumlah wortel iya parellu muwanre. @remaining: bilangang utupu jumlah wortel sisae ri stok: * Constrain: 0= <= 0 * 1000 <= 0 * need <= 1000 <= 1000 remaining number = 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,bug_Latn,python,"
def do_algebra(operator, operand):
    """"""Riwéréng duwa daftar operator, nenniya operand. Daftar pammulang punnai operasi aljabar dasar, nenniya daftar kedua iyanaritu daftar bilangang makkalepu. Pake duwa daftar iya riwereng untu' mabbangun ekspresi aljabar nenniya mappalisui evaluasi ekspresi iyae. Operasi aljabar dasar: Assiwempeng (+) Assabareng (-)) Assabareng (*) Pembagian lantai (//) Eksponensiasi (**) Conto: operator['+', '*', '-'] array = [2, 3, 4, 5] wasselena = 2 + 3 * 4 - 5 => wasselena = 9 Catatan: Jangkaang daftar operator pada sibawa jangkaang daftar operand minus seddi. Operand iyanaritu daftar bilangang makkalepu non-negatif. Operator punnai setidakna seddi daftar operator, nenniya daftar operand punnai setidakna duwa operand. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,bug_Latn,python,"
def solve(s):
    """"""Engka seddi string s. narekko s[i] iyanaritu seddi hurupu, ribali'i case-na pole riawa lao riase iyarega sibalekenna, narekko de'na, tette'i pada-padanna. narekko string de'na punnai hurupu, ribali'i string'e. Fungsi'e waji'i nabali'i string'e iyya engkae. contona solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,bug_Latn,python,"
def string_to_md5(text):
    """"""Riwéréng i string 'text', lisui string hash md5 iya pappadae. Narekko 'text' iyanaritu string kosong, lisui None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,bug_Latn,python,"
def generate_integers(a, b):
    """"""Riwéréng duwa bilangang makkalepu positif a sibawa b, leppungngi digit genap ri pallawangeng a sibawa b, ri laleng urusang menre. contona: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
