task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,knc_Latn,pl,"# Kәla awo laa taganasbe dәn.# Suro lambabe matəlan, lamba indi ndaso kamanza karəngənyi # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
# """"
# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# 1
sub has_close_elements {
    my($numbers, $threshold) = @_;
","sub has_close_elements {
    my($numbers, $threshold) = @_;
    
    for my $i (0 .. @$numbers - 2) {
        for my $j ($i + 1 .. @$numbers - 1) {
            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {
                return 1;
            }
        }
    }
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&has_close_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_1,knc_Latn,pl,"# Na'a gade suro suro input stringben dagənadəga kasatsəyin.# Kufuwa gade-gade sandima balanza (kambowoso katkatama) kuru sandiya fal-fallo gǝnyi.# group sandima adǝga suro kalkallo gadeyen yaktǝ kuru array sandima adǝga waltǝ.# Shi donyi function adǝ ye suro suro jili kada suro kurnowa kurnowa yen.# >>> separate_paren_groups(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
sub separate_paren_groups {
    my($paren_string) = @_;
","sub separate_paren_groups {
    my ($paren_string) = @_;
    $paren_string =~ s/\s+//g;  # Remove all spaces
    my @groups;
    my $balance = 0;
    my $current_group = """";
    
    foreach my $char (split //, $paren_string) {
        if ($char eq '(') {
            $balance++;
        }
        if ($char eq ')') {
            $balance--;
        }
        $current_group .= $char;
        if ($balance == 0 && $current_group ne """") {
            push @groups, $current_group;
            $current_group = """";
        }
    }
    
    return \@groups;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&separate_paren_groups;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[""(()(())((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_2,knc_Latn,pl,"# Lamba'a yaktəbe suro lambaben.# (rawo kalzǝnyi dǝ sambisoro gana (1) lan.# kuru integerbe (integer kurabe lamba ganawo) kuru decimalsbe# Lamba floating pointbe ngəla, sha yaktin  ro.# >>> truncate_number(3.5)
# 0.5
sub truncate_number {
    my($number) = @_;
","sub truncate_number {
    my($number) = @_;
    my $integer_part = int($number);
    my $decimal_part = $number - $integer_part;
    return $decimal_part;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&truncate_number;
        if(eq_deeply($candidate->(3.5),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.25),0.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(123.0),0.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_3,knc_Latn,pl,"# loktu adən kəndobe dəga falzəna 1. Gənyi yaye, falzəna '.'# Awo dǝwo nyiro cidazǝ dǝ shima awo dǝwo kǝla lamar dǝyen kәndabe dǝ zero lan sǝkkin ba ro asutin, kuru # Nyiye awowa bankye lan yaktǝ-a kuru tangartǝ-a ngǝwu-a cin, badiyaramnzǝ-a # >>> below_zero([1, 2, 3])
# """"
# >>> below_zero([1, 2, -4, 5])
# 1
sub below_zero {
    my($operations) = @_;
","sub below_zero {
    my ($operations) = @_;
    my $balance = 0;
    
    for my $operation (@$operations) {
        $balance += $operation;
        if ($balance < 0) {
            return 1;
        }
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_zero;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_4,knc_Latn,pl,"# MAD = average. x - x_mean. # element-a na dawu-a (nǝm-kǝndaram lan suro lamar adǝben): # Mean Absolute Deviation də shima nəmgade nəmkam kambo kate awoa indi yeyi.# Na do dataset adǝye dǝn.# Lambawa kәla kәlabe gozәna dә, kәla nәm kәlabe nәm kәlabe fәlezәna.# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
# 1.0
sub mean_absolute_deviation {
    my($numbers) = @_;
","sub mean_absolute_deviation {
    my ($numbers) = @_;
    my $n = scalar @$numbers;
    return 0 if $n == 0;

    # Calculate mean
    my $sum = 0;
    $sum += $_ for @$numbers;
    my $mean = $sum / $n;

    # Calculate mean absolute deviation
    my $total_deviation = 0;
    $total_deviation += abs($_ - $mean) for @$numbers;
    return $total_deviation / $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&mean_absolute_deviation;
        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_5,knc_Latn,pl,"# ""Kǝla lamba """"delimeter"""" kate awowa indi fuwuye suro input arrayben ∀namba"""" # >>> intersperse([], 4)
# []
# >>> intersperse([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
sub intersperse {
    my($numbers, $delimeter) = @_;
","my @result;
    for (my $i = 0; $i < @$numbers; $i++) {
        push @result, $numbers->[$i];
        push @result, $delimeter if $i < @$numbers - 1;
    }
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersperse;
        if(eq_deeply($candidate->([], 7),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_6,knc_Latn,pl,"# Misallo (() (()) də, na indi kozəna, na indi kozəna, kuru ((())) də, na yakkə.# Kәla karapka wosoyen, daraja nәm kәnzabe suro nәm kurtabe dәga fәlezәyin.# Shi donyi function adəro gǝnatǝ dǝ shima string wakiljin karapka kada donyi kate parentheses yen kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate# >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
sub parse_nested_parens {
    my($paren_string) = @_;
","sub parse_nested_parens {
    my($paren_string) = @_;
    my @groups = split / /, $paren_string;
    my @depths;

    foreach my $group (@groups) {
        my $max_depth = 0;
        my $current_depth = 0;
        foreach my $char (split //, $group) {
            if ($char eq '(') {
                $current_depth++;
                if ($current_depth > $max_depth) {
                    $max_depth = $current_depth;
                }
            } elsif ($char eq ')') {
                $current_depth--;
            }
        }
        push @depths, $max_depth;
    }
    
    return \@depths;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_nested_parens;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[2, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[4])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_7,knc_Latn,pl,"# Filter nzəliwobe suro kərtəbeladən sandi doni substringbe mbeji basro təkkin.# >>> filter_by_substring([], ""a"")
# []
# >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
sub filter_by_substring {
    my($strings, $substring) = @_;
","sub filter_by_substring {
    my ($strings, $substring) = @_;
    my @filtered = grep { index($_, $substring) != -1 } @$strings;
    return \@filtered;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_substring;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_8,knc_Latn,pl,"# Sum dəga 0 kuru product dəga 1 tilo.# Lamba hayyabe təna, lamba hayyabe dəga waltəyin kuru sandima sum kuru product lamba hayyabe sammabe suro arrayben.# >>> sum_product([])
# [0, 1]
# >>> sum_product([1, 2, 3, 4])
# [10, 24]
sub sum_product {
    my($numbers) = @_;
","sub sum_product {
    my ($numbers) = @_;
    my $sum = 0;
    my $product = 1;
    
    foreach my $num (@$numbers) {
        $sum += $num;
        $product *= $num;
    }
    
    return [$sum, $product];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_product;
        if(eq_deeply($candidate->([]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 0]),[100, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),[10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_9,knc_Latn,pl,"# suro sequenceben.# Futu integerbe matəlan, lamba hangal gənajin kuru loktu ganalaa gojin.# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
sub rolling_max {
    my($numbers) = @_;
","sub rolling_max {
    my ($numbers) = @_;
    my @result;
    my $max = $numbers->[0];
    
    for my $num (@$numbers) {
        $max = $num if $num > $max;
        push @result, $max;
    }
    
    return \@result;
}

# Example usage
my $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);
print ""@$result\n"";  # Outputs: 1 2 3 3 3 4 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rolling_max;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_10,knc_Latn,pl,"# - Tǝlam dǝga datǝram dǝga gǝrjin kawu palindromic suffix dǝro.# - Postfix kurama suro stringbe doni palindrome lan tədinma dəga fandəmin.# Algorithmbe raayinzə dǝ kǝske: # Palindrome kuradǝwo nzǝkǝ kǝla nzǝkǝlibe dǝga baditin dǝga asutin.# >>> make_palindrome("""")
# """"
# >>> make_palindrome(""cat"")
# ""catac""
# >>> make_palindrome(""cata"")
# ""catac""
sub make_palindrome {
    my($string) = @_;
","sub make_palindrome {
    my($string) = @_;

    # Helper function to check if a substring is a palindrome
    sub is_palindrome {
        my ($sub) = @_;
        return $sub eq reverse $sub;
    }

    # If the whole string is a palindrome, return it
    if (is_palindrome($string)) {
        return $string;
    }

    # Check for the longest palindromic suffix
    my $length = length($string);
    for (my $i = $length; $i >= 0; $i--) {
        my $suffix = substr($string, $i);
        if (is_palindrome($suffix)) {
            my $prefix = substr($string, 0, $i);
            return $string . reverse($prefix);
        }
    }

    # If no palindromic suffix is found, append the reverse of entire string minus the first character
    return $string . reverse(substr($string, 1));
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_palindrome;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyz""),""xyzyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyx""),""xyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""jerry""),""jerryrrej"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_11,knc_Latn,pl,"# XOR binarybe diwal allan sǝdin kuru jaza nzǝga waltǝyin suro jili stringben.# Input sandima string indi a kuru b sandidoni 1s kuru 0s lan tuwandinma.# >>> string_xor(""010"", ""110"")
# ""100""
sub string_xor {
    my($a, $b) = @_;
","my @a_bits = split //, $a;
    my @b_bits = split //, $b;
    my $result = '';

    for my $i (0 .. $#a_bits) {
        $result .= $a_bits[$i] ^ $b_bits[$i];
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_xor;
        if(eq_deeply($candidate->(""111000"", ""101010""),""010010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""1""),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0101"", ""0000""),""0101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_12,knc_Latn,pl,"# Strings nəmkura tilo ye. undef waratajin sa array nəmkambo ye ba ro.# Kǝla awowabe kuren, fallo waltǝyin. Fallo burobedǝro waltǝyin sa fallo waljiya.# >>> longest([])
# undef
# >>> longest([""a"", ""b"", ""c""])
# ""a""
# >>> longest([""a"", ""bb"", ""ccc""])
# ""ccc""
sub longest {
    my($strings) = @_;
","sub longest {
    my ($strings) = @_;
    return undef if !@$strings;

    my $longest = $strings->[0];
    foreach my $string (@$strings) {
        if (length($string) > length($longest)) {
            $longest = $string;
        }
    }
    return $longest;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&longest;
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_13,knc_Latn,pl,"# Lamba samungo kambo kura indi integers a kuru b be ro yaktəyin # >>> greatest_common_divisor(3, 5)
# 1
# >>> greatest_common_divisor(25, 15)
# 5
sub greatest_common_divisor {
    my($a, $b) = @_;
","sub greatest_common_divisor {
    my ($a, $b) = @_;
    while ($b != 0) {
        my $t = $b;
        $b = $a % $b;
        $a = $t;
    }
    return $a;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&greatest_common_divisor;
        if(eq_deeply($candidate->(3, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49, 14),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(144, 60),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_14,knc_Latn,pl,"# Futu fasal prefixesbe sammasobe returnbe səta karəngəro səta kuruwu ro suro inputbe stringben.# >>> all_prefixes(""abc"")
# [""a"", ""ab"", ""abc""]
sub all_prefixes {
    my($string) = @_;
","my($string) = @_;
    my @prefixes;
    for my $i (1 .. length($string)) {
        push @prefixes, substr($string, 0, $i);
    }
    return @prefixes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&all_prefixes;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""WWW""),[""W"", ""WW"", ""WWW""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_15,knc_Latn,pl,"# Lambawa na-a kalkallo-a mbeji 0 lan səta n ro sammason badijin. # >>> string_sequence(0)
# ""0""
# >>> string_sequence(5)
# ""0 1 2 3 4 5""
sub string_sequence {
    my($n) = @_;
","sub string_sequence {
    my($n) = @_;
    return join ' ', 0..$n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_sequence;
        if(eq_deeply($candidate->(0),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),""0 1 2 3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),""0 1 2 3 4 5 6 7 8 9 10"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_16,knc_Latn,pl,"# String fal təwandəlan, alamaram gadewa ngəwu (faltaye ba) mbejiwa fando.# >>> count_distinct_characters(""xyzXYZ"")
# 3
# >>> count_distinct_characters(""Jerry"")
# 4
sub count_distinct_characters {
    my($string) = @_;
","sub count_distinct_characters {
    my($string) = @_;
    my %chars;
    $string = lc $string;  # Convert the string to lowercase
    $chars{$_} = 1 for split //, $string;  # Add each character to the hash
    return scalar keys %chars;  # Return the number of distinct keys
}

# Example usage:
print count_distinct_characters(""xyzXYZ""), ""\n"";  # Output: 3
print count_distinct_characters(""Jerry""), ""\n"";   # Output: 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_distinct_characters;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcde""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdecadeCADE""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaAAAAaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jerry jERRY JeRRRY""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_17,knc_Latn,pl,"# 'Hikedǝ' - notǝ kwater, beat fal ro gojin.# 'o saadi' - nushi not, loktu indi ro kәnәngatә.# 'o' - notә samma, bәrtәwa diyau ro gojin.# Adә shima hawar do:# dare gǝnyi.# Cida nyiye shima kalkallo diwal adǝga fasaltǝ kuru lamba kalkallo suro adadǝben suwudǝ, futu ndasobe falle sǝdinro.# Awo donyi function adəro gǝnatǝ dǝ shima string do alama alama musicbe dǝga suro fasal ASCIIbe taganasben.# >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
sub parse_music {
    my($music_string) = @_;
","sub parse_music {
    my ($music_string) = @_;
    my @notes = split ' ', $music_string;
    my @beats;

    foreach my $note (@notes) {
        if ($note eq 'o') {
            push @beats, 4;
        } elsif ($note eq 'o|') {
            push @beats, 2;
        } elsif ($note eq '.|') {
            push @beats, 1;
        }
    }

    return @beats;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_music;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o o o o""),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".| .| .| .|""),[1, 1, 1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_18,knc_Latn,pl,"# Kǝla nguwu loktuwo substring laa suro original stringin tuwondin ma. Lambawa kǝltayin ma.# >>> how_many_times("""", ""a"")
# 0
# >>> how_many_times(""aaa"", ""a"")
# 3
# >>> how_many_times(""aaaa"", ""aa"")
# 3
sub how_many_times {
    my($string, $substring) = @_;
","sub how_many_times {
    my ($string, $substring) = @_;
    return 0 if $substring eq '';
    my $count = 0;
    while ($string =~ /(?=$substring)/g) {
        $count++;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&how_many_times;
        if(eq_deeply($candidate->("""", ""x""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyxyxyx"", ""x""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""cacacacac"", ""cac""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""john doe"", ""john""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_19,knc_Latn,pl,"# Lambawa suro lambabe dəga yaktəlan gana-a kura-aro yaktəlan.# Awowa kalkal tədinma sandima 'futu' 'fal', 'fal', 'fal', 'fal', 'five', 'six', 'seven', 'eight' and 'nine'. # Input dǝ shima space-ye kalkallo lambabe 'futu' 'futu' 'saye' ro.# >>> sort_numbers(""three one five"")
# ""one three five""
sub sort_numbers {
    my($numbers) = @_;
","sub sort_numbers {
    my ($numbers) = @_;
    my %word_to_num = (
        'zero'  => 0,
        'one'   => 1,
        'two'   => 2,
        'three' => 3,
        'four'  => 4,
        'five'  => 5,
        'six'   => 6,
        'seven' => 7,
        'eight' => 8,
        'nine'  => 9,
    );
    my %num_to_word = reverse %word_to_num;
    my @sorted_numbers = 
        map { $num_to_word{$_} } 
        sort { $a <=> $b } 
        map { $word_to_num{$_} } 
        split ' ', $numbers;
    return join ' ', @sorted_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_numbers;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three""),""three"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three five nine""),""three five nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""five zero four seven nine eight""),""zero four five seven eight nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""six five four three two one zero""),""zero one two three four five six"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_20,knc_Latn,pl,"# Awowa gade-gade-a kuru sandiya kәla-a (kәnda gana, kәnda kura) waltәm.# Lambawa (ladən gananzə indi) suro arrayben lamba indi sandima sandiya tədin kuru waltə indi sandima sandiya karəngəma wo so.# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
sub find_closest_elements {
    my($numbers) = @_;
","sub find_closest_elements {
    my ($numbers) = @_;
    my @sorted_numbers = sort { $a <=> $b } @$numbers;
    my $min_diff = undef;
    my @closest_pair;

    for my $i (0 .. $#sorted_numbers - 1) {
        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];
        if (!defined($min_diff) || $diff < $min_diff) {
            $min_diff = $diff;
            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);
        }
    }

    return @closest_pair;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_closest_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_21,knc_Latn,pl,"# adadu ganabedə 0 waljin kuru kurabe 1 waljin.# Lambawa (ladən awo indi), sha linear transform tədin, # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
sub rescale_to_unit {
    my($numbers) = @_;
","sub rescale_to_unit {
    my($numbers) = @_;
    my $min = min(@$numbers);
    my $max = max(@$numbers);
    my @rescaled = map { ($_ - $min) / ($max - $min) } @$numbers;
    return \@rescaled;
}

sub min {
    my(@list) = @_;
    my $min = $list[0];
    foreach my $num (@list) {
        if ($num < $min) {
            $min = $num;
        }
    }
    return $min;
}

sub max {
    my(@list) = @_;
    my $max = $list[0];
    foreach my $num (@list) {
        if ($num > $max) {
            $max = $num;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rescale_to_unit;
        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_22,knc_Latn,pl,"# Filterbe lamba lambabe tənabe darajanzə plthonbe integerlan tuwondin # >>> filter_integers([""a"", 3.14, 5])
# [5]
# >>> filter_integers([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
sub filter_integers {
    my($values) = @_;
","sub filter_integers {
    my ($values) = @_;
    return [grep { /^-?\d+$/ && !ref($_) } @$values];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_integers;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, ""adasd""]),[4, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_23,knc_Latn,pl,"# Kǝndodǝro nǝmkambe bayanzǝna# >>> strlen("""")
# 0
# >>> strlen(""abc"")
# 3
sub strlen {
    my($string) = @_;
","sub strlen {
    my($string) = @_;
    return length($string);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strlen;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdasnakj""),9)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_24,knc_Latn,pl,"# Lamba n təna ma, lamba kura n sambisoro yaktinma, gana n lan.# >>> largest_divisor(15)
# 5
sub largest_divisor {
    my($n) = @_;
","sub largest_divisor {
    my($n) = @_;
    for (my $i = $n - 1; $i > 0; $i--) {
        if ($n % $i == 0) {
            return $i;
        }
    }
    return undef; # In case n is 1, there is no divisor less than n
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_divisor;
        if(eq_deeply($candidate->(3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),50)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_25,knc_Latn,pl,"# Lamba shiga gattəbedə yaktə samma soye tilo waljin.# Factor woso loktuwa kadaro yaktin futu loktuwa faidatinlan.# Futu lamba kurawa lamba hayyabe kəndon tədin.# >>> factorize(8)
# [2, 2, 2]
# >>> factorize(25)
# [5, 5]
# >>> factorize(70)
# [2, 5, 7]
sub factorize {
    my($n) = @_;
","sub factorize {
    my ($n) = @_;
    my @factors;
    for my $i (2 .. int(sqrt($n))) {
        while ($n % $i == 0) {
            push @factors, $i;
            $n /= $i;
        }
    }
    push @factors, $n if $n > 1;
    return @factors;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&factorize;
        if(eq_deeply($candidate->(2),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(57),[3, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_26,knc_Latn,pl,"# Awowa kәlanzәga kәlanzәga fal lan kәlanzәga kәlanzәga sәdin.# Futu integerbe kasattənadə, awowa təwandinma samma kəndowa.# >>> remove_duplicates([1, 2, 3, 2, 4])
# [1, 3, 4]
sub remove_duplicates {
    my($numbers) = @_;
","sub remove_duplicates {
    my ($numbers) = @_;
    my %count;
    $count{$_}++ for @$numbers;
    return [grep { $count{$_} == 1 } @$numbers];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_duplicates;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_27,knc_Latn,pl,"# Kǝla string laa gozǝnadǝn, alama gana-a kura-a gana-aro faltǝ.# >>> flip_case(""Hello"")
# ""hELLO""
sub flip_case {
    my($string) = @_;
","sub flip_case {
    my($string) = @_;
    $string =~ tr/A-Za-z/a-zA-Z/;
    return $string;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&flip_case;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello!""),""hELLO!"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_28,knc_Latn,pl,"# Concatenate array of strings into a single string # >>> concatenate([])
# """"
# >>> concatenate([""a"", ""b"", ""c""])
# ""abc""
sub concatenate {
    my($strings) = @_;
","sub concatenate {
    my($strings) = @_;
    return join('', @$strings);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&concatenate;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""xyz"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_29,knc_Latn,pl,"# Filter nzərabe suro datəbe dən, sandiya datəbe mbeji badiyaram sandiya fasaltəlan.# >>> filter_by_prefix([], ""a"")
# []
# >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
sub filter_by_prefix {
    my($strings, $prefix) = @_;
","sub filter_by_prefix {
    my ($strings, $prefix) = @_;
    return [grep { /^\Q$prefix\E/ } @$strings];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_prefix;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_30,knc_Latn,pl,"# Lambawa ngalwobe suro arrayben bas waratain.# >>> get_positive([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
sub get_positive {
    my($l) = @_;
","sub get_positive {
    my($l) = @_;
    my @positive_numbers = grep { $_ > 0 } @$l;
    return \@positive_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_positive;
        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_31,knc_Latn,pl,"# Fallow waltǝ badijin lamba donyi kǝlanzǝye, kuru fallow waltǝ badijin.# >>> is_prime(6)
# """"
# >>> is_prime(101)
# 1
# >>> is_prime(11)
# 1
# >>> is_prime(13441)
# 1
# >>> is_prime(61)
# 1
# >>> is_prime(4)
# """"
# >>> is_prime(1)
# """"
sub is_prime {
    my($n) = @_;
","sub is_prime {
    my($n) = @_;
    return """" if $n <= 1;
    return 1 if $n == 2;
    return """" if $n % 2 == 0;
    for (my $i = 3; $i * $i <= $n; $i += 2) {
        return """" if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_prime;
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13441),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(61),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(85),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(77),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(255379),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_33,knc_Latn,pl,"# Kәla awowa indices lbe kәla kәlabe dәn, amma sandiro yaktәgәna.# l' dǝ alama alama l ye dǝga faljin suro indices dǝwo yakkǝlan yaktin ba dǝn, amma darajawanzǝ indices dǝwo yakkǝlan yaktin dǝga dǝga tilo.# Kəndo adəbe array l gojin kuru array l' jili # >>> sort_third([1, 2, 3])
# [1, 2, 3]
# >>> sort_third([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
sub sort_third {
    my($l) = @_;
","sub sort_third {
    my ($l) = @_;
    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;
    @to_sort = sort { $a <=> $b } @to_sort;
    my @result = @$l;
    my $index = 0;

    foreach my $i (0..$#{$l}) {
        if ($i % 3 == 0) {
            $result[$i] = $to_sort[$index++];
        }
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_third;
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_34,knc_Latn,pl,"# Awowa gade-gade suro arrayben yikkoltǝnama warrata # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
sub unique {
    my($l) = @_;
","sub unique {
    my ($l) = @_;
    my %seen;
    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;
    return \@unique_sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique;
        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_35,knc_Latn,pl,"# Kǝla awowa kuradǝn suro arrayben.# >>> max_element([1, 2, 3])
# 3
# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
sub max_element {
    my($l) = @_;
","sub max_element {
    my($l) = @_;
    my $max = $l->[0];
    foreach my $value (@$l) {
        if ($value > $max) {
            $max = $value;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_element;
        if(eq_deeply($candidate->([1, 2, 3]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_36,knc_Latn,pl,"# Lamba 7be suro integers gana n lan təbandowo kuru 11 au 13 lan yaktin.# >>> fizz_buzz(50)
# 0
# >>> fizz_buzz(78)
# 2
# >>> fizz_buzz(79)
# 3
sub fizz_buzz {
    my($n) = @_;
","sub fizz_buzz {
    my($n) = @_;
    my $count = 0;
    for my $i (1 .. $n-1) {
        if ($i % 11 == 0 || $i % 13 == 0) {
            $count++ if $i =~ /7/;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fizz_buzz;
        if(eq_deeply($candidate->(50),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(78),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(79),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(200),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4000),192)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10000),639)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100000),8026)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_37,knc_Latn,pl,"# Kәla awowa indices evenbe l, amma sortaye.# l' dǝ alama dǝga kalkalzǝna suro nǝm gade indicesben, amma nǝm gade indicesbe dǝga kalkalzǝna suro nǝm gade indicesben.# Kəndo adəbe array l gojin kuru array l' jili # >>> sort_even([1, 2, 3])
# [1, 2, 3]
# >>> sort_even([5, 6, 3, 4])
# [3, 6, 5, 4]
sub sort_even {
    my($l) = @_;
","sub sort_even {
    my($l) = @_;
    my @even_indices;

    for (my $i = 0; $i < @$l; $i += 2) {
        push @even_indices, $l->[$i];
    }

    @even_indices = sort { $a <=> $b } @even_indices;

    my @result = @$l;
    
    for (my $i = 0; $i < @even_indices; $i++) {
        $result[$i * 2] = $even_indices[$i];
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_even;
        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_39,knc_Latn,pl,"# prime_fib lamba n-th Fibonaccibe shiro lamba prime gultin.# >>> prime_fib(1)
# 2
# >>> prime_fib(2)
# 3
# >>> prime_fib(3)
# 5
# >>> prime_fib(4)
# 13
# >>> prime_fib(5)
# 89
sub prime_fib {
    my($n) = @_;
","sub is_prime {
    my($num) = @_;
    return 0 if $num < 2;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub prime_fib {
    my($n) = @_;
    my ($a, $b) = (1, 1);
    my $count = 0;

    while (1) {
        my $fib = $a + $b;
        $a = $b;
        $b = $fib;
        if (is_prime($fib)) {
            $count++;
            return $fib if $count == $n;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_fib;
        if(eq_deeply($candidate->(1),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),233)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1597)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28657)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),514229)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),433494437)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_40,knc_Latn,pl,"# sum dǝ zero ro, kuru """" gade lan.# 1 warratə sa sandima awowa yakkəbe suro arrayben mbeji # triple_sum_to_zerobe lamba kalkallo faidatin.# >>> triples_sum_to_zero([1, 3, 5, 0])
# """"
# >>> triples_sum_to_zero([1, 3, -2, 1])
# 1
# >>> triples_sum_to_zero([1, 2, 3, 7])
# """"
# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
# 1
# >>> triples_sum_to_zero([1])
# """"
sub triples_sum_to_zero {
    my($l) = @_;
","sub triples_sum_to_zero {
    my($l) = @_;
    my $n = scalar @$l;
    for my $i (0 .. $n-3) {
        for my $j ($i+1 .. $n-2) {
            for my $k ($j+1 .. $n-1) {
                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {
                    return 1;
                }
            }
        }
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triples_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 5, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_41,knc_Latn,pl,"# Shi adәye lamba nәm kәrmaye adәga fulujin.# Kǝla fuwunzǝben alama sandiye kǝla-a kǝlzǝnyi ro.# Adǝgaima, motowa dǝ zauro duno'a kuru duno'a; adǝye sǝkǝ, sandiye letǝgǝramza gozayin.# sa mota do cidi lan ci ro lejin dǝ mota do cidi lan ci ro lejin dǝ'a sǝkǝ.# Motowa samma so dә sa'a fal lan letin. Motowa indi dә gulzain kәla ndusoye.# Kәryewa indi dә zauro farak kәla iyen badiyada.# Mota n dǝ kǝla sǝnana ro letin; loktu fal lan, mota gade-gade n ye dǝ.# Futu diwal laa kalkalro kalkalro kalkalro kalkalro.sub car_race_collision {
    my($n) = @_;
","sub car_race_collision {
    my($n) = @_;
    return $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&car_race_collision;
        if(eq_deeply($candidate->(2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),64)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),100)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_42,knc_Latn,pl,"# Futu awoa 1 lan yaktənadəga waltəyin.# >>> incr_list([1, 2, 3])
# [2, 3, 4]
# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
sub incr_list {
    my($l) = @_;
","sub incr_list {
    my($l) = @_;
    return [map { $_ + 1 } @$l];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&incr_list;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_43,knc_Latn,pl,"# sum dǝ zero ro, kuru """" gade lan.# 1 warratə sa sandi indi gadegade suro arrayben mbeji # pairs_sum_to_zerobe lamba kalkallo faidatin.# >>> pairs_sum_to_zero([1, 3, 5, 0])
# """"
# >>> pairs_sum_to_zero([1, 3, -2, 1])
# """"
# >>> pairs_sum_to_zero([1, 2, 3, 7])
# """"
# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
# 1
# >>> pairs_sum_to_zero([1])
# """"
sub pairs_sum_to_zero {
    my($l) = @_;
","sub pairs_sum_to_zero {
    my ($l) = @_;
    my %seen;
    for my $num (@$l) {
        if ($seen{-1 * $num}) {
            return 1;
        }
        $seen{$num} = 1;
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pairs_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_44,knc_Latn,pl,"# lamba basebe dǝ 10 lan kozǝna.# bayan kalkallo bayanjin ngawo faltǝbedǝn.# Lamba lambabe x dəga lamba lambabe ro faltə.# >>> change_base(8, 3)
# ""22""
# >>> change_base(8, 2)
# ""1000""
# >>> change_base(7, 2)
# ""111""
sub change_base {
    my($x, $base) = @_;
","sub change_base {
    my ($x, $base) = @_;
    my $result = '';
    
    if ($base < 2 || $base > 9) {
        die ""Base must be between 2 and 9"";
    }

    while ($x > 0) {
        my $remainder = $x % $base;
        $result = $remainder . $result;
        $x = int($x / $base);
    }

    return $result eq '' ? '0' : $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&change_base;
        if(eq_deeply($candidate->(8, 3),""22"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),""100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(234, 2),""11101010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 2),""10000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8, 2),""1000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 2),""111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4),""3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5),""4"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),""5"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 7),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 8),""7"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_45,knc_Latn,pl,"# Nəm kuruwu launube-a nəmkurawu na kərtəbe-a tədəna.# >>> triangle_area(5, 3)
# 7.5
sub triangle_area {
    my($a, $h) = @_;
","sub triangle_area {
    my ($a, $h) = @_; 
    return 0.5 * $a * $h;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(5, 3),7.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2),2.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 8),40.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_46,knc_Latn,pl,"# Lamarra faidatǝbe fǝlezǝna kǝla awowa n-thbe suro lamba fib4be dǝga isayinro.# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).# fib4(3) -> 0 # fib4(2) -> 2 # fib4(1) -> 0 # fib4(0) -> 0 # Fib4 lambabe dǝ shima Fibbonaccibe dǝga samǝn, shi dǝga bayanzǝyin:# >>> fib4(5)
# 4
# >>> fib4(6)
# 8
# >>> fib4(7)
# 14
sub fib4 {
    my($n) = @_;
","sub fib4 {
    my ($n) = @_;
    return 0 if $n == 0 || $n == 1 || $n == 3;
    return 2 if $n == 2;
    
    my @fib4 = (0, 0, 2, 0);
    
    for my $i (4 .. $n) {
        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];
    }
    
    return $fib4[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib4;
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),104)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),386)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_47,knc_Latn,pl,"# Median awowa suro arraybe return l. # >>> median([3, 1, 2, 4, 5])
# 3
# >>> median([-10, 4, 6, 1000, 10, 20])
# 15.0
sub median {
    my($l) = @_;
","sub median {
    my($l) = @_;
    my @sorted = sort { $a <=> $b } @$l;
    my $len = @sorted;
    if ($len % 2 == 1) {
        return $sorted[int($len/2)];
    } else {
        return ($sorted[$len/2 - 1] + $sorted[$len/2]) / 2;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&median;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 5]),5.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_48,knc_Latn,pl,"# Shima kambai dǝ palindrome ro kasatǝ.# >>> is_palindrome("""")
# 1
# >>> is_palindrome(""aba"")
# 1
# >>> is_palindrome(""aaaaa"")
# 1
# >>> is_palindrome(""zbcd"")
# """"
sub is_palindrome {
    my($text) = @_;
","sub is_palindrome {
    my ($text) = @_;
    return $text eq reverse($text) ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_palindrome;
        if(eq_deeply($candidate->(""""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""zbcd""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyx""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyz""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywzx""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_49,knc_Latn,pl,"# 2^n modulo p (lambarro notә).# >>> modp(3, 5)
# 3
# >>> modp(1101, 101)
# 2
# >>> modp(0, 101)
# 1
# >>> modp(3, 11)
# 8
# >>> modp(100, 101)
# 1
sub modp {
    my($n, $p) = @_;
","sub modp {
    my($n, $p) = @_;
    return (2 ** $n) % $p;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&modp;
        if(eq_deeply($candidate->(3, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1101, 101),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 11),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30, 5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(31, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_51,knc_Latn,pl,"# remove_vowels də kəndowo nzərabe gojin kuru nzərabe nzərabe ba ro waltin. # >>> remove_vowels("""")
# """"
# >>> remove_vowels(""abcdef"")
# ""bcdf""
# >>> remove_vowels(""aaaaa"")
# """"
# >>> remove_vowels(""aaBAA"")
# ""B""
# >>> remove_vowels(""zbcd"")
# ""zbcd""
sub remove_vowels {
    my($text) = @_;
","sub remove_vowels {
    my($text) = @_;
    $text =~ s/[aeiouAEIOU]//g;
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_vowels;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef
ghijklm""),""bcdf
ghjklm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""fedcba""),""fdcb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""acBAA""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EcBOO""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ybcd""),""ybcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_52,knc_Latn,pl,"# 1 warrata sa lamba samma suro array l bedə cidiya kərtəbe t yen. # >>> below_threshold([1, 2, 4, 10], 100)
# 1
# >>> below_threshold([1, 20, 4, 10], 5)
# """"
sub below_threshold {
    my($l, $t) = @_;
","sub below_threshold {
    my($l, $t) = @_;
    foreach my $num (@$l) {
        return """" if $num >= $t;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_threshold;
        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_53,knc_Latn,pl,"# Lamba indi x kuru y kəltəyin # >>> add(2, 3)
# 5
# >>> add(5, 7)
# 12
sub add {
    my($x, $y) = @_;
","return $x + $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->(0, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 7),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_54,knc_Latn,pl,"# Kalma indi dǝ alama fal mbeji wa gǝnyi.# >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# 1
# >>> same_chars(""abcd"", ""dddddddabc"")
# 1
# >>> same_chars(""dddddddabc"", ""abcd"")
# 1
# >>> same_chars(""eabcd"", ""dddddddabc"")
# """"
# >>> same_chars(""abcd"", ""dddddddabce"")
# """"
# >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# """"
sub same_chars {
    my($s0, $s1) = @_;
","sub same_chars {
    my($s0, $s1) = @_;
    
    my %chars_s0 = map { $_ => 1 } split //, $s0;
    my %chars_s1 = map { $_ => 1 } split //, $s1;

    foreach my $char (keys %chars_s0) {
        return """" unless exists $chars_s1{$char};
    }

    foreach my $char (keys %chars_s1) {
        return """" unless exists $chars_s0{$char};
    }

    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&same_chars;
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dddddddabc"", ""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcd"", ""dddddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabcf""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb"", ""aaccc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_55,knc_Latn,pl,"# Lamba Fibonaccibe n-thbe waratain. # >>> fib(10)
# 55
# >>> fib(1)
# 1
# >>> fib(8)
# 21
sub fib {
    my($n) = @_;
","sub fib {
    my ($n) = @_;
    return $n if $n <= 1;
    my ($a, $b) = (0, 1);
    for (2..$n) {
        ($a, $b) = ($b, $a + $b);
    }
    return $b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib;
        if(eq_deeply($candidate->(10),55)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),144)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_56,knc_Latn,pl,"# 1 warratəyin sa bracket fuwutəbe samma bracket datəbe mbeji maa.# brackets dǝ shima string """"a """"a"".""# >>> correct_bracketing(""<"")
# """"
# >>> correct_bracketing(""<>"")
# 1
# >>> correct_bracketing(""<<><>>"")
# 1
# >>> correct_bracketing(""><<>"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '<') {
            $balance++;
        } elsif ($char eq '>') {
            $balance--;
            if ($balance < 0) {
                return """";
            }
        }
    }
    
    return $balance == 0 ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""<>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<><>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<<><><>><>><<><><<>>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<><>>>>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("">""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>>><>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_57,knc_Latn,pl,"# Futu return 1 ye dǝ shima awowa array ye dǝ monotonically ro kǝrtǝ au kǝrtǝ.# >>> monotonic([1, 2, 4, 20])
# 1
# >>> monotonic([1, 20, 4, 10])
# """"
# >>> monotonic([4, 1, 0, -10])
# 1
sub monotonic {
    my($l) = @_;
","sub monotonic {
    my($l) = @_;
    return 1 if @$l <= 1;
    
    my $increasing = 1;
    my $decreasing = 1;
    
    for my $i (1 .. $#$l) {
        if ($l->[$i] > $l->[$i - 1]) {
            $decreasing = 0;
        } elsif ($l->[$i] < $l->[$i - 1]) {
            $increasing = 0;
        }
    }
    
    return $increasing || $decreasing ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&monotonic;
        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_58,knc_Latn,pl,"# Awowa sandiya yikkotəye sandiya fallo yikkotəye array indi ro.# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common([5, 3, 2, 8], [3, 2])
# [2, 3]
sub common {
    my($l1, $l2) = @_;
","sub common {
    my($l1, $l2) = @_;
    my %count;
    $count{$_}++ for @$l1;
    $count{$_}++ for grep { exists $count{$_} } @$l2;
    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&common;
        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_59,knc_Latn,pl,"# Factor kura kura n. Takkal n > 1 kuru shima prime gənyi. # >>> largest_prime_factor(13195)
# 29
# >>> largest_prime_factor(2048)
# 2
sub largest_prime_factor {
    my($n) = @_;
","sub largest_prime_factor {
    my($n) = @_;
    my $largest_factor = 1;
    my $factor = 2;

    while ($n > 1) {
        if ($n % $factor == 0) {
            $largest_factor = $factor;
            $n /= $factor;
        } else {
            $factor++;
        }
    }
    
    return $largest_factor;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_prime_factor;
        if(eq_deeply($candidate->(15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(330),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13195),29)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_60,knc_Latn,pl,"# sum_to_n shima cida do lamba 1 lan səta n ro sumjinma wo. # >>> sum_to_n(30)
# 465
# >>> sum_to_n(100)
# 5050
# >>> sum_to_n(5)
# 15
# >>> sum_to_n(10)
# 55
# >>> sum_to_n(1)
# 1
sub sum_to_n {
    my($n) = @_;
","sub sum_to_n {
    my ($n) = @_;
    return $n * ($n + 1) / 2;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_to_n;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),66)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),465)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),5050)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_61,knc_Latn,pl,"# 1 warratəyin sa bracket fuwutəbe samma bracket datəbe mbeji maa.# brackets dǝ shima string """""" kuru """")"".# >>> correct_bracketing(""("")
# """"
# >>> correct_bracketing(""()"")
# 1
# >>> correct_bracketing(""(()())"")
# 1
# >>> correct_bracketing("")(()"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my ($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '(') {
            $balance++;
        } elsif ($char eq ')') {
            $balance--;
        }
        # If balance is negative, it means there's a closing bracket without a matching opening
        if ($balance < 0) {
            return '';
        }
    }

    # If balance is zero, all brackets are correctly matched
    return $balance == 0 ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()())""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()((()()())())(()()(()))""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((()())))""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((((""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())())(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()))()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_62,knc_Latn,pl,"# Futu polynomial adəbe dalami fallo waljin.# xs[0] + xs[1] * x + xs[2] * x^2 + .... # xs dəye wakiljin coefficients polynomialbe.# >>> derivative([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative([1, 2, 3])
# [2, 6]
sub derivative {
    my($xs) = @_;
","sub derivative {
    my($xs) = @_;
    my @derivative;
    
    for my $i (1 .. $#{$xs}) {
        push @derivative, $xs->[$i] * $i;
    }
    
    return \@derivative;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&derivative;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_63,knc_Latn,pl,"# Lamarra kəndobe kəndobe kəndobe kəndowa lamba n-thbe suro lambabe fibfibbe dən.# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). # fib fib ((2) == 1 # fib fib ((1) == 0 # fib fib ((0) == 0 # FibFib lambabe dǝ shima Fibbonaccibe dǝga samǝn kǝltǝwu ye dǝwo futu dǝwo: # >>> fibfib(1)
# 0
# >>> fibfib(5)
# 4
# >>> fibfib(8)
# 24
sub fibfib {
    my($n) = @_;
","sub fibfib {
    my($n) = @_;
    return 0 if $n == 0;
    return 0 if $n == 1;
    return 1 if $n == 2;

    my @fibfib = (0, 0, 1);
    for my $i (3..$n) {
        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];
    }
    return $fibfib[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fibfib;
        if(eq_deeply($candidate->(2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),81)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),274)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14),927)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_64,knc_Latn,pl,"# Misal: # Kǝla awo laa tǝdinna dǝn, amma loktu dǝwo kalmadǝ dareye dǝn.# Vowels suro lamar adǝben sandima 'a', 'e', 'i', 'o', 'u'. Na adǝn, 'y' dǝ shima a # kalma donyi shiga shiga kuru adadu karunguwa suro suro string yen.# Futu kəndo vowels_countbe ruwozəna shidoni nzundu # >>> vowels_count(""abcde"")
# 2
# >>> vowels_count(""ACEDY"")
# 3
sub vowels_count {
    my($s) = @_;
","sub vowels_count {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, lc $s;
    my $length = scalar @chars;

    for my $i (0..$#chars) {
        if ($chars[$i] =~ /[aeiou]/ || ($chars[$i] eq 'y' && $i == $length - 1)) {
            $count++;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&vowels_count;
        if(eq_deeply($candidate->(""abcde""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Alone""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""key""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bye""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""keY""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bYe""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ACEDY""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_65,knc_Latn,pl,"# Shift > lamba digitsbe, return digitsbe dəga waltə.# kuru jaza dǝga suro kalkallo.# Lambawa integerbe x-a, digitsbe kalkal ro shiftin.# >>> circular_shift(12, 1)
# ""21""
# >>> circular_shift(12, 2)
# ""12""
sub circular_shift {
    my($x, $shift) = @_;
","sub circular_shift {
    my($x, $shift) = @_;
    my $digits = length($x);
    
    if ($shift > $digits) {
        return reverse $x;
    }
    
    $shift = $shift % $digits;
    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);
    
    return $shifted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&circular_shift;
        if(eq_deeply($candidate->(100, 2),""001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 2),""12"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(97, 8),""79"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 1),""21"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11, 101),""11"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_66,knc_Latn,pl,"# Misal: # ASCII codewa dǝ.# Cida dowo suro zandeye ro gojin kuru sum do awowa samin ye dǝga waltǝyin dǝ' # Cida dǝ.# >>> digitSum("""")
# 0
# >>> digitSum(""abAB"")
# 131
# >>> digitSum(""abcCd"")
# 67
# >>> digitSum(""helloE"")
# 69
# >>> digitSum(""woArBld"")
# 131
# >>> digitSum(""aAaaaXa"")
# 153
sub digitSum {
    my($s) = @_;
","sub digitSum {
    my($s) = @_;
    my $sum = 0;
    foreach my $char (split //, $s) {
        if ($char =~ /[A-Z]/) {
            $sum += ord($char);
        }
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digitSum;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abAB""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcCd""),67)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""helloE""),69)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""woArBld""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aAaaaXa""),153)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("" How are yOu?""),151)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You arE Very Smart""),327)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_67,knc_Latn,pl,"# examble ro: # suro kәske dәn lamba kәmbul mangabe suro kәske dәn suwudin.# citәmbal-a apple-a kuru lamba kalkallo wakiljin lamba sammaso kәskabe # Kǝska donyi kǝskaso, lemunza, kuru manga.# Awowa kәska kәskabe dәn gәnatәna dә suro kәska adәyen mbeji.# Suro cida adәben, nyiye lamba do lamba apples-a oranges-a wakiljin dә cin.# >>> fruit_distribution(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution(""100 apples and 1 oranges"", 120)
# 19
sub fruit_distribution {
    my($s, $n) = @_;
","sub fruit_distribution {
    my($s, $n) = @_;
    
    # Extract numbers from the input string
    my ($apples, $oranges) = $s =~ /(\d+) apples and (\d+) oranges/;
    
    # Calculate total apples and oranges
    my $total_apples_oranges = $apples + $oranges;
    
    # Calculate number of mangoes
    my $mangoes = $n - $total_apples_oranges;
    
    return $mangoes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fruit_distribution;
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 19),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 21),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0 apples and 1 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 0 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 100),95)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 100 oranges"", 120),19)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_68,knc_Latn,pl,"# Misal 1: # Kәla taman evenbe ba au array dә kalkal ba maa, return [].# Kǝndodǝa kǝltǝnama dǝ suro arrayben waratain, [smallest_value, its index], # Nodowa kada na fallin darajanza gana-gana dǝga falzana ma, na fallin index gana-gana dǝga waltǝyin. # Nodu do sha samzǝna dǝ shima nodu do tamanzǝ even ye gana dǝwo.# cida nyi dә shima kam fal suro nodes dәye gozә kuru waltә ro yiko.# ""Array doye wakiljin dalami kǝskabe shido noduwu integerbe kasattǝnyi mbeji # >>> pluck([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck([])
# []
# Example 4:
# >>> pluck([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
sub pluck {
    my($arr) = @_;
","sub pluck {
    my ($arr) = @_;
    my $min_even_value = undef;
    my $min_index = undef;

    for my $i (0 .. @$arr - 1) {
        my $value = $arr->[$i];
        if ($value % 2 == 0) {
            if (!defined($min_even_value) || $value < $min_even_value) {
                $min_even_value = $value;
                $min_index = $i;
            }
        }
    }

    return defined($min_even_value) ? [$min_even_value, $min_index] : [];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pluck;
        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_69,knc_Latn,pl,"# Misal: # Daraja jili adǝ ba ma, waltǝ -1.# Lamba hayyabe suro integerben təwandin də shima lamba shiye suro arrayben təwandin dəwo.# Null, kuru nəm nguwuzədə kuranzə au tilo taman integer kəlanzəbeladən.# Nyiye lamba kalkallo gənyi lamba kalkallobe təna. Lamba kambo kura kura kurawo # >>> search([4, 1, 2, 2, 3, 1])
# 2
# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search([5, 5, 4, 4, 4])
# -1
sub search {
    my($lst) = @_;
","sub search {
    my($lst) = @_;
    my %frequency;

    foreach my $num (@$lst) {
        $frequency{$num}++;
    }

    my $result = -1;
    foreach my $num (keys %frequency) {
        if ($num > 0 && $frequency{$num} >= $num) {
            if ($num > $result) {
                $result = $num;
            }
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&search;
        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_70,knc_Latn,pl,"# Misal: # daji lamba kalkallobe, daji gana-a kuru adǝgairo.# Futu yaktǝbe, shima sa nyiye taman gana baditin, # Lamba hayyabe təna, lamba gana suro fasalben warrata.# >>> strange_sort_list([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list([])
# []
sub strange_sort_list {
    my($lst) = @_;
","sub strange_sort_list {
    my($lst) = @_;
    my @result;
    my @sorted = sort {$a <=> $b} @$lst;
    
    while (@sorted) {
        push @result, shift @sorted;
        push @result, pop @sorted if @sorted;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strange_sort_list;
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111111]),[111111])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_71,knc_Latn,pl,"# Misal: # Kәrmu yakkәye dәn.# Kәntagә yakkәye dә kәntagә tilo'a suwudin sa sum kәntagә indiye kura ro waljiya.# Baaro waljiya -1 # triangle dǝ decimal 2 ro kalakkata, sawu yakkǝ dǝ triangle kalkalro waljiya.# Kәnәngalan nәm datәwa yakkәye trianglebe dәga. Nәm datәwa nasha # >>> triangle_area(3, 4, 5)
# 6.0
# >>> triangle_area(1, 2, 10)
# -1
sub triangle_area {
    my($a, $b, $c) = @_;
","sub triangle_area {
    my($a, $b, $c) = @_;
    
    # Check if the sides form a valid triangle
    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {
        return -1;
    }
    
    # Calculate the semi-perimeter
    my $s = ($a + $b + $c) / 2;
    
    # Calculate the area using Heron's formula
    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));
    
    # Return the area rounded to 2 decimal points
    return sprintf(""%.2f"", $area);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(3, 4, 5),6.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 5),8.18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),1.73)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),16.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),0.43)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_72,knc_Latn,pl,"# Misal: # Awo q dǝ letin ma sa nǝmkambe dǝ kalkalzǝna (a dǝ palindromic array) kuru sum awowa dǝye dǝ gana au tilo nǝmkambe dǝga wuzǝna ma w.# Cida 1 fandobe ruwuwa awo q ye zǝtǝyin ma, kuru '' gade.# >>> will_it_fly([1, 2], 5)
# """"
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly([3, 2, 3], 1)
# """"
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly([3, 2, 3], 9)
# 1
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly([3], 5)
# 1
# # 3 is less than the maximum possible weight, and it's balanced.
sub will_it_fly {
    my($q, $w) = @_;
","sub will_it_fly {
    my($q, $w) = @_;
    # Check if the array is palindromic
    my @reversed = reverse @$q;
    return '' unless ""@$q"" eq ""@reversed"";

    # Check if the sum of elements is within weight limit
    my $sum = 0;
    $sum += $_ for @$q;
    return $sum <= $w ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&will_it_fly;
        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3], 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_73,knc_Latn,pl,"# Misallo: # Awo fal fal faltǝlan, awo fal fal faltǝyin awo gade ro.# Awo fallatəbe məradətəna sandiya palindromic ro kalaktəro.# Array arr integersbe təwandənadən, lamba gana awoa suro arrayben təwandənadəga kəlanzəga yikkoltəyin.# >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change([1, 2, 3, 2, 1])
# 0
sub smallest_change {
    my($arr) = @_;
","sub smallest_change {
    my($arr) = @_;
    my $count = 0;
    my $n = scalar @$arr;
    
    for my $i (0 .. int($n / 2) - 1) {
        if ($arr->[$i] != $arr->[$n - $i - 1]) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&smallest_change;
        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_74,knc_Latn,pl,"# Misalnzə'a.# Array indi dǝye lamba fal charsye mbeji maa, array buro salakye dǝga waltǝyin.# lamba charsbe samma suro stringbe arraybedə nəmkambo array gadedə'a kozənaro.# Cidabe shilan array indi gojin kuru array do shilan mbeji dəga waltəyin# >>> total_match([], [])
# []
# >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
sub total_match {
    my($lst1, $lst2) = @_;
","sub total_match {
    my ($lst1, $lst2) = @_;
    
    my $len1 = sum_chars($lst1);
    my $len2 = sum_chars($lst2);

    return $len1 <= $len2 ? $lst1 : $lst2;
}

sub sum_chars {
    my ($array) = @_;
    my $total = 0;
    foreach my $string (@$array) {
        $total += length($string);
    }
    return $total;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&total_match;
        if(eq_deeply($candidate->([], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], [""this""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this""], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_75,knc_Latn,pl,"# Misal: # (a) dǝ 100 lan gana ro yikkǝnama.# kuru gade lan kattuwu.# Lamba hayyabe ruwojin lamba jirebe loktu lamba hayyabe 3be kawattinlan # >>> is_multiply_prime(30)
# 1
# 30 = 2 * 3 * 5
sub is_multiply_prime {
    my($a) = @_;
","sub is_multiply_prime {
    my($a) = @_;

    return 0 if $a >= 100;

    my @primes = grep { is_prime($_) } 2..int($a/2);

    for my $i (0..$#primes) {
        for my $j ($i..$#primes) {
            for my $k ($j..$#primes) {
                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {
                    return 1;
                }
            }
        }
    }
    return 0;
}

sub is_prime {
    my($n) = @_;
    return 0 if $n < 2;
    for my $i (2..sqrt($n)) {
        return 0 if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_multiply_prime;
        if(eq_deeply($candidate->(5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(125),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(105),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(126),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(891),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1001),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_76,knc_Latn,pl,"# Misallo: # x shima daraja kəske n yeyi sa n**int=x # n lan darajajin kuru falle suro halla gadeyen.# Cida nyiye shima kəndowo fandobe doni jirega waltəyinma lamba x shima lamba kəske.# >>> is_simple_power(1, 4)
# 1
# >>> is_simple_power(2, 2)
# 1
# >>> is_simple_power(8, 2)
# 1
# >>> is_simple_power(3, 2)
# """"
# >>> is_simple_power(3, 1)
# """"
# >>> is_simple_power(5, 3)
# """"
sub is_simple_power {
    my($x, $n) = @_;
","sub is_simple_power {
    my($x, $n) = @_;
    
    return 0 if $n <= 0;
    return """" if $x < 1;
    
    if ($x == 1) {
        return 1;
    }

    while ($x > 1) {
        if ($x % $n != 0) {
            return """";
        }
        $x /= $n;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_simple_power;
        if(eq_deeply($candidate->(16, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(143214, 16),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 4),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(24, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(128, 4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_77,knc_Latn,pl,"# Misal: # Note: nyiye asutin awo donyi shiga surin dǝ sambisoro kalkal ro.# Ingeger adǝ lamba kalkalbe cube wo.# Lamba hayyabe ruwojin lamba kalkal a kuru 1 warratain# >>> iscube(1)
# 1
# >>> iscube(2)
# """"
# >>> iscube(-1)
# 1
# >>> iscube(64)
# 1
# >>> iscube(0)
# 1
# >>> iscube(180)
# """"
sub iscube {
    my($a) = @_;
","sub iscube {
    my($a) = @_;
    my $cube_root = int($a ** (1/3));
    return 1 if $cube_root ** 3 == $a;
    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&iscube;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(64),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(180),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_78,knc_Latn,pl,"# Misal: # Alamwa A,B,C,D,E,F dǝ sambisoro kura kura ro walzǝna.# Note: nyiye raktə tangarǝmin awowa gǝnatǝbedǝ sambisoro kalkal au kalkal gǝnyi, # B (= decimal 11), D (= decimal 13) # Adǝye sǝkǝ, lamba lambabe 2, 3, 5, 7, # Lamba buron shima 2, 3, 5, 7, 11, 13, 17,...# Lamba hexadecimalbedə sandima 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.# 1 kozəna lamba indi gana la'a kasattənyi).# Lambawa burobedə (Lamba burobedə, au burobedə, lamba hayyabe wo)# Lamba hexadecimalbe ro waljin kuru lamba hexadecimalbe sətana.# Nyiye cida cidabe ruwotəbe shilan faidatainma # >>> hex_key(""AB"")
# 1
# >>> hex_key(""1077E"")
# 2
# >>> hex_key(""ABED1A33"")
# 4
# >>> hex_key(""123456789ABCDEF0"")
# 6
# >>> hex_key(""2020"")
# 2
sub hex_key {
    my($num) = @_;
","sub hex_key {
    my($num) = @_;
    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');
    my $prime_count = 0;
    
    foreach my $char (split //, $num) {
        $prime_count++ if exists $prime_hex_digits{$char};
    }
    
    return $prime_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&hex_key;
        if(eq_deeply($candidate->(""AB""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1077E""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ABED1A33""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2020""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""123456789ABCDEF0""),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""112233445566778899AABBCCDDEEFF00""),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_79,knc_Latn,pl,"# Misal: # Alamwa gәnabe dә na shimadәro banazәyin.# ""db"" alamaram badiyarambe-a datəgəram-a mbeji.# Lamba samma suro kərtəbedə shima '0' au '1' wo.# binary format. Cida dǝye string dǝga waltǝyin, alama falloso binary  wakiljin.# Nyiye lamba suro fasal yakkəben tədin kuru cidanǝm shima adadǝga faltǝro.# >>> decimal_to_binary(15)
# ""db1111db""
# >>> decimal_to_binary(32)
# ""db100000db""
sub decimal_to_binary {
    my($decimal) = @_;
","sub decimal_to_binary {
    my($decimal) = @_;
    my $binary = sprintf(""%b"", $decimal);
    return ""db"" . $binary . ""db"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&decimal_to_binary;
        if(eq_deeply($candidate->(0),""db0db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(32),""db100000db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(103),""db1100111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15),""db1111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_80,knc_Latn,pl,"# Misallo: # String dǝ happl ro waljin sa nǝm nguwunzǝ dǝ kam yakkǝ ro kuru alama yakkǝ kalkallo gade gade lan kara.# Cida nyiye shima string dǝ happl au ba.# Nyiye string s.# >>> is_happy(""a"")
# """"
# >>> is_happy(""aa"")
# """"
# >>> is_happy(""abcd"")
# 1
# >>> is_happy(""aabb"")
# """"
# >>> is_happy(""adb"")
# 1
# >>> is_happy(""xyy"")
# """"
sub is_happy {
    my($s) = @_;
","sub is_happy {
    my($s) = @_;
    return """" if length($s) < 3;
    for my $i (0 .. length($s) - 3) {
        my $substr = substr($s, $i, 3);
        my %chars;
        $chars{$_}++ for split //, $substr;
        return """" if keys(%chars) != 3;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_happy;
        if(eq_deeply($candidate->(""a""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""adb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxpoi""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxioi""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_81,knc_Latn,pl,"# Misal: # 0.0 E # > 0.0 D- # > 0.7 D # > 1.0 D+ # > 1.3 C-  kuru# > 1.7 C # > 2.0 C+ # > 2.3 B- # > 2.7 B # > 3.0 B+ # > 3.3 A- # > 3.7 A # 4.0 A+ # GPA. Suro litaryen daraja.# Cida do letərwa darajabe faidatəbe fuletəyin: # Shiye nyi ro GPAwa kada sǝdǝna kǝla fuwurawa laa yen kuru nyi dǝ ruwojin.# Kaziyi fal dǝ, shiye kaida do sha daraja-a dǝga faidatin dǝ asuzǝna.# Malami dǝye algorithmnzǝ kǝlanzǝbe sǝdǝna kǝla daraja dǝyen.# Adә yim kәntagә dareye semestersye dә kuru malәm dә darajawa cinna.# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
sub numerical_letter_grade {
    my($grades) = @_;
","sub numerical_letter_grade {
    my ($gpas) = @_;
    my @letters;

    foreach my $gpa (@$gpas) {
        if ($gpa == 4.0) {
            push @letters, 'A+';
        } elsif ($gpa > 3.7) {
            push @letters, 'A';
        } elsif ($gpa > 3.3) {
            push @letters, 'A-';
        } elsif ($gpa > 3.0) {
            push @letters, 'B+';
        } elsif ($gpa > 2.7) {
            push @letters, 'B';
        } elsif ($gpa > 2.3) {
            push @letters, 'B-';
        } elsif ($gpa > 2.0) {
            push @letters, 'C+';
        } elsif ($gpa > 1.7) {
            push @letters, 'C';
        } elsif ($gpa > 1.3) {
            push @letters, 'C-';
        } elsif ($gpa > 1.0) {
            push @letters, 'D+';
        } elsif ($gpa > 0.7) {
            push @letters, 'D';
        } elsif ($gpa > 0.0) {
            push @letters, 'D-';
        } else {
            push @letters, 'E';
        }
    }

    return \@letters;
}

my $gpas = [4.0, 3, 1.7, 2, 3.5];
my $letter_grades = numerical_letter_grade($gpas);
print join("", "", @$letter_grades);","use Test::Deep;


sub testhumaneval {
    my $candidate = \&numerical_letter_grade;
        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.2]),[""D+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.5]),[""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),[""E""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0, 0.7]),[""E"", ""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_82,knc_Latn,pl,"# Misalnzə'a.# nəm kuruwu dǝ lamba kura au """" ba maa # Lamba do lamba 1 gojin ma, kuru waltə 1 ma, sa lamba # >>> prime_length(""Hello"")
# 1
# >>> prime_length(""abcdcba"")
# 1
# >>> prime_length(""kittens"")
# 1
# >>> prime_length(""orange"")
# """"
sub prime_length {
    my($string) = @_;
","sub prime_length {
    my ($string) = @_;
    my $length = length($string);

    return '' if $length < 2;
    for my $i (2 .. sqrt($length)) {
        return '' if $length % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_length;
        if(eq_deeply($candidate->(""Hello""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdcba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""kittens""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""orange""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""world""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MadaM""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""HI""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gogo""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaaaaaaaaaaaa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Madam""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""M""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_83,knc_Latn,pl,"# Lamba hayyabe kәla 1 lan baditin au datin.# Lamba hayyabe n təwandənadən, lamba lamba n-digitbe warrataga sub starts_one_ends {
    my($n) = @_;
","sub starts_one_ends {
    my($n) = @_;
    
    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting
    # or ending with 1), hence return 1 (only the number 1).
    return 1 if $n == 1;

    # Calculate the count of numbers starting with 1
    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices
    my $start_one_count = 10 ** ($n - 1);

    # Calculate the count of numbers ending with 1
    # Numbers from 10..10^(n-1) give us 10^(n-1) choices
    my $end_one_count = 10 ** ($n - 1);

    # However, numbers that both start and end with 1 (like 111...1)
    # are counted twice so we need to add them in only once.
    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1

    # Total unique count
    my $total_count = $start_one_count + $end_one_count - $both_count;

    return $total_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&starts_one_ends;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),180)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),1800)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),18000)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_84,knc_Latn,pl,"# Misal # Lamba hayyabe N təwandənadə, sumo aruwuwa binaryben suwudin. # >>> solve(1000)
# ""1""
# >>> solve(150)
# ""110""
# >>> solve(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
sub solve {
    my($N) = @_;
","sub solve {
    my($N) = @_;
    my $sum = 0;
    $sum += $_ for split //, $N;
    return sprintf(""%b"", $sum);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(1000),""1"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(150),""110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(147),""1100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(333),""1001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(963),""10010"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_85,knc_Latn,pl,"# Misal: # Lamba hayyabe ba la'ar integersbe lst. add karewa evenbe sandi indices ganama.. # >>> add([4, 2, 6, 7])
# 2
sub add {
    my($lst) = @_;
","sub add {
    my ($lst) = @_;
    my $sum = 0;

    for (my $i = 1; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->([4, 88]),88)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_86,knc_Latn,pl,"# Misallo: # Note: Kalma so'a na'a suro jimla dәn kalkalzәna.# daraja ascii lan fuwujin.# Kalma bǝlin lan faltin, na dǝwo alama samma so dǝga kǝltǝna dǝn.# Ordered version of string, shima string doni kalma samma (na bannabe lan yaktin) # Cida dowo string laa gojin kuru fasal laan waltəyin ma.# >>> anti_shuffle(""Hi"")
# ""Hi""
# >>> anti_shuffle(""hello"")
# ""ehllo""
# >>> anti_shuffle(""Hello World!!!"")
# ""Hello !!!Wdlor""
sub anti_shuffle {
    my($s) = @_;
","sub anti_shuffle {
    my($s) = @_;
    $s =~ s/(\S+)/join('', sort split //, $1)/ge;
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&anti_shuffle;
        if(eq_deeply($candidate->(""Hi""),""Hi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hello""),""ehllo"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""number""),""bemnru"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),""abcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello World!!!""),""Hello !!!Wdlor"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_87,knc_Latn,pl,"# Misal: # Kuru, coordinatewa layibe dǝga columnwa lan yaktǝro.# Kәrye dә buro salakye suro layelan yaktәgәram.# Awowa sammason coordinatebe - (rawu, kolumn), badiyaram 0 lan.# kuru array arraysbe waratain, [(x1, y1), (x2, y2) ...] jili # Lst, kuru integer x, suro arrayben integer x fando, # row fal lan column kada mbeji.# Matrix'a samun, sonyayi, matrix'a gade,# Nyiye bayan 2 dimensionalbe cin, futu arrays nestedbe lan, # >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row([], 1)
# []
# >>> get_row([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
sub get_row {
    my($lst, $x) = @_;
","sub get_row {
    my ($lst, $x) = @_;
    my @result;

    for my $i (0 .. @$lst - 1) {
        my @row_result;
        for my $j (0 .. @{$lst->[$i]} - 1) {
            if ($lst->[$i][$j] == $x) {
                push @row_result, [$i, $j];
            }
        }
        # Sort the coordinates of the row by columns in descending order
        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;
        push @result, @row_result;
    }

    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_row;
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], 1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1]], 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_88,knc_Latn,pl,"# Misal: # * awowa dǝga fǝlejin ba. # Note: # au shiya tartip kəmburam lan yaktin sa nəmkambo (nəmkambo indexbe buro salakbe, nəmkambo indexbe darebe) even lan.# Nyiye array dǝga sorin suro kǝla fuwunna yen sum dǝ (nǝm kura indexbe, nǝm kura indexbe) dǝ kǝlta, # Array la'a integers diyeu ba'a, copl suro array la'a dəga waltəyin ngawo sorting yen, # >>> sort_array([])
# []
# >>> sort_array([5])
# [5]
# >>> sort_array([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
sub sort_array {
    my($array) = @_;
","sub sort_array {
    my ($array) = @_;
    return [] if !@$array;  # Return empty array if input is empty

    my $first = $array->[0];
    my $last = $array->[-1];
    my $sum = $first + $last;

    if ($sum % 2 == 0) {
        # Sort in descending order if the sum is even
        return [sort { $b <=> $a } @$array];
    } else {
        # Sort in ascending order if the sum is odd
        return [sort { $a <=> $b } @$array];
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 1]),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_89,knc_Latn,pl,"# Misallo: # Kәla indi lan kawattә na indi ro.# Alfabedə futu laan kokkatə sandi harfasowa # return a string encrypted with the alphabet being rotated.  awuwa dǝga kǝnza dǝga kǝnza dǝga kǝnza dǝga kǝnza dǝga kǝnza dǝga kǝnza dǝga kǝnza dǝga.# Kǝla nzundube shiro encrypt gultin dǝwo nzunduwa alama argumenbe ro gojin kuru # >>> encrypt(""hi"")
# ""lm""
# >>> encrypt(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt(""gf"")
# ""kj""
# >>> encrypt(""et"")
# ""ix""
sub encrypt {
    my($s) = @_;
","sub encrypt {
    my($s) = @_;
    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)
    $s =~ tr/a-zA-Z/n-za-mN-ZA-M/;  # Perform a Caesar cipher with a shift of 13 places
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encrypt;
        if(eq_deeply($candidate->(""hi""),""lm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfghjkl""),""ewhjklnop"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gf""),""kj"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""et""),""ix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""faewfawefaewg""),""jeiajeaijeiak"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hellomyfriend""),""lippsqcjvmirh"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),""e"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_90,knc_Latn,pl,"# Kǝla awoa jili adǝye ba ma dǝn undef warata.# Cida do nextsmallestbe ruwojin madə shima awo do nefsənzə gana kən indimmadəwo.# Nyiye integerbe kasattə.# >>> next_smallest([1, 2, 3, 4, 5])
# 2
# >>> next_smallest([5, 1, 4, 3, 2])
# 2
# >>> next_smallest([])
# undef
# >>> next_smallest([1, 1])
# undef
sub next_smallest {
    my($lst) = @_;
","sub next_smallest {
    my($lst) = @_;
    
    # Return undef if the list has less than two elements
    return undef unless @$lst >= 2;
    
    # Sort the unique elements of the list
    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};
    
    # If there is only one unique element, return undef, else return the second smallest
    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&next_smallest;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_91,knc_Latn,pl,"# Misallo: # Kalima dǝ """""", ""?"" au ""!"" lan kasatkata.# ""Kǝnasar dǝ kalima do kalima """"I"""" lan baditin ma"".# Nyiye kalmaa kada cin, kuru cidanǝm dǝ lamba dǝga isayin.# >>> is_bored(""Hello world"")
# 0
# >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
# 1
sub is_bored {
    my($S) = @_;
","my($S) = @_;
    my $count = 0;
    my @sentences = split /(?<=[.?!])\s*/, $S;
    foreach my $sentence (@sentences) {
        $sentence =~ s/^\s+|\s+$//g;
        $count++ if $sentence =~ /^I\b/i;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_bored;
        if(eq_deeply($candidate->(""Hello world""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is the sky blue?""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I love It !""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bIt""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I feel good today. I will be productive. will kill It""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You and I are going for a walk""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_92,knc_Latn,pl,"# Misalnzə'a.# False waltǝ gǝrjin suro lamarra gadeyen.# Faljin lamba fal dǝga faljin sum gade indi dǝga, kuru lamba samma samma integers.# Awo shiro function gultin dəga lamba 3 gojin.# >>> any_int(5, 2, 7)
# 1
# >>> any_int(3, 2, 2)
# """"
# >>> any_int(3, -2, 1)
# 1
# >>> any_int(3.6, -2.2, 2)
# """"
sub any_int {
    my($x, $y, $z) = @_;
","sub any_int {
    my($x, $y, $z) = @_;
    
    # Check if all inputs are integers
    return """" unless defined $x && defined $y && defined $z;
    return """" unless $x =~ /^-?\d+$/ && $y =~ /^-?\d+$/ && $z =~ /^-?\d+$/;
    
    # Check if any number is the sum of the other two
    return 1 if $x == $y + $z;
    return 1 if $y == $x + $z;
    return 1 if $z == $x + $y;
    
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&any_int;
        if(eq_deeply($candidate->(2, 3, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.5, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.5, 5, 3.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.2, 2.2, 2.2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-4, 6, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3.0, 4, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_93,knc_Latn,pl,"# Misal: # Kalamma bas ro kasatsәyin.# Kǝrma dǝ suro English alphabetben.# hawar dǝwo ruwo dǝn na 2 fuwu dǝn tǝdin dǝga.# Futu shiye ka'alawuwa samma faltin, kuru kammabo samma faltin # Cida do hawar laa gojin, kuru suro adǝben coding sǝdin.# >>> encode(""test"")
# ""TGST""
# >>> encode(""This is a message"")
# ""tHKS KS C MGSSCGG""
sub encode {
    my($message) = @_;
","sub encode {
    my($message) = @_;
    $message =~ tr/A-Za-z/N-ZA-Mn-za-m/;
    $message =~ tr/aeiouAEIOU/cgkqwCGKQW/;
    return $message;
}

# Example usage
print encode(""test""), ""\n"";       # Output: TGST
print encode(""This is a message""), ""\n""; # Output: tHKS KS C MGSSCGG","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encode;
        if(eq_deeply($candidate->(""TEST""),""tgst"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir""),""mWDCSKR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YES""),""ygs"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""This is a message""),""tHKS KS C MGSSCGG"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_94,knc_Latn,pl,"# Misal: # Nyiye taman kura kura kura dəga fando kuru sum do lambaanzəbe dəga waltə.# Nyiye integerbe kasattə.# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd([0, 8, 1, 2, 1, 7])
# 7
sub skjkasdkd {
    my($lst) = @_;
","sub skjkasdkd {
    my ($lst) = @_;

    # Helper function to determine if a number is prime
    sub is_prime {
        my ($num) = @_;
        return 0 if $num < 2;
        for my $i (2 .. sqrt($num)) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }

    # Find the largest prime in the array
    my $largest_prime = -1;
    foreach my $num (@$lst) {
        if (is_prime($num)) {
            $largest_prime = $num if $num > $largest_prime;
        }
    }

    # Return the sum of the digits of the largest prime
    if ($largest_prime > 0) {
        my $sum_of_digits = 0;
        $sum_of_digits += $_ for split //, $largest_prime;
        return $sum_of_digits;
    }

    return 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&skjkasdkd;
        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([127, 97, 8192]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_95,knc_Latn,pl,"# Misal: # Cida dǝye waltǝ '' dǝga cinna ma dǝ, shi donyi hash dǝ banna ma wo.# case au key samma so dǝ string lan suwandin, otherwise return ''.# Hash təna, 1 waltə 1 sa sandi key samma suro lowerben sandima strings.# >>> check_dict_case({""a"" => ""apple"", ""b"" => ""banana""})
# 1
# >>> check_dict_case({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# """"
# >>> check_dict_case({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# """"
# >>> check_dict_case({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# """"
# >>> check_dict_case({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# 1
sub check_dict_case {
    my($dict) = @_;
","sub check_dict_case {
    my($dict) = @_;
    return '' unless %$dict;

    my $all_lower = 1;
    my $all_upper = 1;

    for my $key (keys %$dict) {
        if ($key !~ /^[a-z]+$/) {
            $all_lower = 0;
        }
        if ($key !~ /^[A-Z]+$/) {
            $all_upper = 0;
        }
    }
    
    return ($all_lower || $all_upper) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_dict_case;
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""b"" => ""banana""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""STATE"" => ""NC"", ""ZIP"" => ""12345""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_96,knc_Latn,pl,"# misallo: # integers sandima lamba faida kuru gana n lan.# Kəndobe shawaribe kasatkatə lamba kalkal gənyi kuru waltə lamba burobedən n koljin.# >>> count_up_to(5)
# [2, 3]
# >>> count_up_to(11)
# [2, 3, 5, 7]
# >>> count_up_to(0)
# []
# >>> count_up_to(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to(1)
# []
# >>> count_up_to(18)
# [2, 3, 5, 7, 11, 13, 17]
sub count_up_to {
    my($n) = @_;
","sub count_up_to {
    my($n) = @_;
    my @primes;
    for my $num (2 .. $n - 1) {
        my $is_prime = 1;
        for my $div (2 .. sqrt($num)) {
            if ($num % $div == 0) {
                $is_prime = 0;
                last;
            }
        }
        push @primes, $num if $is_prime;
    }
    return @primes;
}

# Example usage:
# my @result = count_up_to(11);
# print ""@result\n"";  # Output: 2 3 5 7","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_up_to;
        if(eq_deeply($candidate->(5),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_97,knc_Latn,pl,"# Misal: # Tǝmanzǝ dǝ sambisoro kalkalro.# Awo do unit digit nza lan tuwandin ma.# Kəndobe integers indi gojin kuru warrata # >>> multiply(148, 412)
# 16
# >>> multiply(19, 28)
# 72
# >>> multiply(2020, 1851)
# 0
# >>> multiply(14, -15)
# 20
sub multiply {
    my($a, $b) = @_;
","sub multiply {
    my($a, $b) = @_;
    my $unit_digit_a = abs($a) % 10;
    my $unit_digit_b = abs($b) % 10;
    return $unit_digit_a * $unit_digit_b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&multiply;
        if(eq_deeply($candidate->(148, 412),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19, 28),72)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2020, 1851),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14, -15),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(76, 67),42)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 27),49)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_98,knc_Latn,pl,"# Misallo: # String s təna, lamba kambo kura kura suro indices evenben isayin.# >>> count_upper(""aBCdEf"")
# 1
# >>> count_upper(""abcdefg"")
# 0
# >>> count_upper(""dBBE"")
# 0
sub count_upper {
    my($s) = @_;
","sub count_upper {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, $s;
    
    for (my $i = 0; $i < @chars; $i += 2) {
        if ($chars[$i] =~ /[AEIOU]/) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_upper;
        if(eq_deeply($candidate->(""aBCdEf""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdefg""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dBBE""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""B""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""U""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EEEE""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_99,knc_Latn,pl,"# Misalnzə'a.# integers indi lan, zero lan yaktin.# kuru integers karunguwa dəga waltəyin. Lamba dəga tilo waljin.# Kəndobe lambabe wakiljin (string) suwandin# >>> closest_integer(""10"")
# 10
# >>> closest_integer(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
sub closest_integer {
    my($value) = @_;
","sub closest_integer {
    my($value) = @_;
    
    # Convert the string value to a number
    my $number = 0 + $value;
    
    # Compute the floor and ceiling of the number
    my $floor = int($number);
    my $ceiling = $number > $floor ? $floor + 1 : $floor;
    
    # Determine the integer to round to
    if ($number < 0) {
        # For negative numbers, closer to zero means returning the lower number
        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;
    } else {
        # For positive numbers, closer to zero means returning the lower number
        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&closest_integer;
        if(eq_deeply($candidate->(""10""),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""14.5""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""-15.5""),-16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15.3""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_100,knc_Latn,pl,"# Misal: # i dǝ shima lamba do karewa suro daraja dǝye (i+1).# Lambawa suro daraja wosobe suro arrayben, na doni index lan element dǝn # - lamba evenbe fuwuye ma n evenbe wo. # - lamba lambabe burobedǝye ngawobe n dǝ burobedǝro waljiya. # Lambawa suro daraja gade dә shima: # Kәrma buro salakye dәn kattiwuwa n mbeji.# Lamba hayyabe n təwandənadə, nyiye kawulan darajawa kəryebe n tədin.# >>> make_a_pile(3)
# [3, 5, 7]
sub make_a_pile {
    my($n) = @_;
","sub make_a_pile {
    my ($n) = @_;
    my @pile;
    my $current_stones = $n;
    
    for my $level (1..$n) {
        push @pile, $current_stones;
        if ($n % 2 == 0) {
            $current_stones += 2;  # Increment by next even number
        } else {
            $current_stones += 2;  # Increment by next odd number (which is also +2)
        }
    }
    
    return @pile;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_a_pile;
        if(eq_deeply($candidate->(3),[3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_101,knc_Latn,pl,"# Misallo: # String dǝga kalmawa ro yaksǝ kuru kalmawa dǝga fasaljin.# Nyiye kalmaa kada comma au na'a gade-gade lan yektәgәna. Cida nyiye shima # >>> words_string(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
sub words_string {
    my($s) = @_;
","sub words_string {
    my ($s) = @_;
    my @words = split /[,\s]+/, $s;
    return \@words;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_string;
        if(eq_deeply($candidate->(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi, my name""),[""Hi"", ""my"", ""name""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ahmed     , gamal""),[""ahmed"", ""gamal""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_102,knc_Latn,pl,"# Misallo: # lamba jili adǝ ba, daji shi kәndo dә waltә -1 cin.# Lamba even kurama suro lamba [x, y] suron.# Kəndo adə lamba ngalwobe x-a y-a gojin kuru return # >>> choose_num(12, 15)
# 14
# >>> choose_num(13, 12)
# -1
sub choose_num {
    my($x, $y) = @_;
","sub choose_num {
    my($x, $y) = @_;
    return -1 if $x > $y;
    
    # Swap x and y if x is greater than y
    ($x, $y) = ($y, $x) if $x > $y;
    
    for (my $i = $y; $i >= $x; $i--) {
        return $i if $i % 2 == 0;
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&choose_num;
        if(eq_deeply($candidate->(12, 15),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(33, 12354),12354)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5234, 5233),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 29),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 7),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(546, 546),546)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_103,knc_Latn,pl,"# Misal: # Sa n də nəm kurazəna m, waltə -1 diwo.# Jaza dəga integers karənga ro kokkatə kuru binary ro kalaktə.# average integers from n to m (n-a m-a dəro suron).# Nyiye lamba n kuru m indi kəllata, kuru cidanǝm shima lamba # >>> rounded_avg(1, 5)
# ""0b11""
# >>> rounded_avg(7, 5)
# -1
# >>> rounded_avg(10, 20)
# ""0b1111""
# >>> rounded_avg(20, 33)
# ""0b11010""
sub rounded_avg {
    my($n, $m) = @_;
","sub rounded_avg {
    my ($n, $m) = @_;
    
    return -1 if $n > $m;
    
    my $sum = 0;
    my $count = $m - $n + 1;
    
    for my $i ($n .. $m) {
        $sum += $i;
    }
    
    my $average = int(($sum / $count) + 0.5);
    return sprintf(""0b%b"", $average);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rounded_avg;
        if(eq_deeply($candidate->(1, 5),""0b11"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 13),""0b1010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(964, 977),""0b1111001010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(996, 997),""0b1111100100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(560, 851),""0b1011000010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185, 546),""0b101101110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(362, 496),""0b110101101"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(350, 902),""0b1001110010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(197, 233),""0b11010111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 1),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 5),""0b101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_104,knc_Latn,pl,"# Misallo: # Note: Array doni waltǝnadǝ diwal kǝrmabedǝro yaktin.# Awowa la suro numbe tilonzəye ba.# Array kəratəlan lamba kalkallo x təwandəna.# >>> unique_digits([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits([152, 323, 1422, 10])
# []
sub unique_digits {
    my($x) = @_;
","sub unique_digits {
    my ($x) = @_;
    my @result;

    foreach my $num (@$x) {
        if ($num !~ /[02468]/) {
            push @result, $num;
        }
    }
    
    return sort { $a <=> $b } @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique_digits;
        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_105,knc_Latn,pl,"# Misallo: # ""Kaduwu"", ""Kaduwu"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"", ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi"" ""Kadi""# Awo suwudindəga falzəyin, kuru aruwuwa falloso su nəmkuranzəbe falzəyin # Lamba hayyabe mbeji, lamba 1-9 sammason, # >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length([])
# []
# If the array has any strange number ignore it:
# >>> by_length([1, -1, 55])
# [""One""]
sub by_length {
    my($arr) = @_;
","sub by_length {
    my ($arr) = @_;
    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);
    
    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;
    my @result = map { $names[$_] } @filtered_sorted_reversed;
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&by_length;
        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 55]),[""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 3, 2]),[""Three"", ""Two"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 4, 8]),[""Nine"", ""Eight"", ""Four""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_106,knc_Latn,pl,"# Misal: # Shi factorial of i də shima lamba 1 lan səta i ro kawattə (1 * 2 * ... * i).# Wu dǝ 1 lan baditin.# au sum lambabe 1 lan səta i ro yedei. # andbe n nəmkurabe suwudin, alamanna taman indexbe i də shima factorial of ibewo i dǝ even ro waljiya.# Kәndo f do n'a alamaram ro gojin ma, # >>> f(5)
# [1, 2, 6, 24, 15]
sub f {
    my($n) = @_;
","sub f {
    my($n) = @_;
    my @result;

    for my $i (1..$n) {
        if ($i % 2 == 0) {
            my $factorial = 1;
            $factorial *= $_ for 1..$i;
            push @result, $factorial;
        } else {
            my $sum = 0;
            $sum += $_ for 1..$i;
            push @result, $sum;
        }
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&f;
        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_107,knc_Latn,pl,"# Misal 1: # integer palindromes do suro range ((1, n), suron mbeji.# Lamba hayyabe n təwandənadən, array la'a fulujin shidonyi lamba even a kuru odd a mbeji # >>> even_odd_palindrome(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
sub even_odd_palindrome {
    my($n) = @_;
","sub even_odd_palindrome {
    my($n) = @_;
    my $even_count = 0;
    my $odd_count = 0;
    for my $i (1..$n) {
        if ($i == reverse $i) {
            if ($i % 2 == 0) {
                $even_count++;
            } else {
                $odd_count++;
            }
        }
    }
    return [$even_count, $odd_count];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_palindrome;
        if(eq_deeply($candidate->(123),[8, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),[6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(25),[5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_108,knc_Latn,pl,"# Misallo -123 ye alama alama -1, 2, kuru 3.# Lamba la'a lamba la'a wo, daji lamba buro salakye shiro signed sayində shima lamba la'a wo: # lamba do lamba do sum nzərabe > 0 lan kara. # Kəndo coun_nums ruwozəna shidonyi integerbe kasatkatə kuru waltəyin # >>> count_nums([])
# 0
# >>> count_nums([-1, 11, -11])
# 1
# >>> count_nums([1, 1, 2])
# 3
sub count_nums {
    my($arr) = @_;
","sub count_nums {
    my($arr) = @_;
    my $count = 0;

    foreach my $num (@$arr) {
        my $sum_of_digits = 0;
        my @digits = split //, $num;
        $sum_of_digits += shift @digits; # add the signed digit
        $sum_of_digits += $_ for @digits;
        $count++ if $sum_of_digits > 0;
    }

    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_nums;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_109,knc_Latn,pl,"# Misallo: # Note: Array dǝga tawadǝro awowa gade-gade mbeji.# Sa array dǝ banna yaye daji 1 ruwotǝ.# daji return 1 else return ''. # Adəbe waneye raktə sandilan asutinma awoa saminlan yaktənadəga.# Na badiyarambe suro arrayben, shima index 0th.# Na dǝwo dareram dǝga wuzǝna dǝro, shiya dǝga wuzǝna.# Kəndo fal kərmabedə ma'ananzə awoa arraybe sammaso falro kalaktə.# Nyiye letәmin kәndobe nәmcinzәbe loktuwa ngәwu ro.# Kǝndowa fuletǝbe dǝga kǝla awowa dǝwo kǝla dǝlan gǝnatǝna dǝga: # adǝye raksǝ kalkallo fasalbe kǝla futǝ kalkallo gǝnyi ro yaktin, diwal # Lambawa suro arraybe dәga kasattin. Cida nyibe dә shima fandowa.# Andeye array 'arr' integers N arr[1], arr[2], ..., arr[N] lan kara.# >>> move_one_ball([3, 4, 5, 1, 2])
# 1
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball([3, 5, 4, 1, 2])
# """"
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
sub move_one_ball {
    my($arr) = @_;
","sub move_one_ball {
    my ($arr) = @_;
    my $n = scalar @$arr;
    return 1 if $n == 0;

    for my $i (0 .. $n - 1) {
        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);
        if (is_sorted(\@shifted)) {
            return 1;
        }
    }
    return '';
}

sub is_sorted {
    my ($arr) = @_;
    for my $i (0 .. $#$arr - 1) {
        return 0 if $arr->[$i] > $arr->[$i + 1];
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&move_one_ball;
        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_110,knc_Latn,pl,"# Misallo: # A'a, ""A'a"" ro waltǝ.# awowa lst1be samma so, ""YES"" ruotə.# Awowa kate lst1 a lst2 a faltǝ mowonjin maa,# Lambawa kate lst1 a lst2 lan faltin dә kalkal gәnyi.# Nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmbe nəmgade nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe nəmbe# kuru awowa faltǝbe suwudin nojin.# Suro kaziyi adən, nyiye kəndowa faidatəbe awowa indi lambabe gojin, # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
sub exchange {
    my($lst1, $lst2) = @_;
","sub exchange {
    my ($lst1, $lst2) = @_;
    
    # Check if lst1 is already all-even
    my $all_even = 1;
    foreach my $num (@$lst1) {
        if ($num % 2 != 0) {
            $all_even = 0;
            last;
        }
    }
    return ""YES"" if $all_even;

    # Check if there is at least one even number in lst2
    my $can_exchange = 0;
    foreach my $num (@$lst2) {
        if ($num % 2 == 0) {
            $can_exchange = 1;
            last;
        }
    }

    # Calculate the count of odd numbers in lst1
    my $odd_count_lst1 = 0;
    foreach my $num (@$lst1) {
        $odd_count_lst1++ if ($num % 2 != 0);
    }

    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange
    if ($can_exchange && $odd_count_lst1 > 0) {
        return ""YES"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&exchange;
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 200], [200, 200]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_111,knc_Latn,pl,"# Misal: # Suro ka'idawa kadaben awo fal wajin maa, samma so waltǝne.# Kalam do kambo soro waltǝyin ma dǝn kuru suronzan lamba dǝye faljin.# String doni ruwowa gana-a na-a wakiljin ma, hash fal fallo kalaktəyin # >>> histogram(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""b b b b a"")
# {""b"" => 4}
# >>> histogram("""")
# {}
sub histogram {
    my($test) = @_;
","sub histogram {
    my ($test) = @_;
    my %count;

    # Split the input string by spaces and count occurrences of each letter
    $count{$_}++ for split ' ', $test;

    # Determine the maximum count
    my $max_count = 0;
    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;

    # Collect all letters with the maximum count
    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;

    return \%result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&histogram;
        if(eq_deeply($candidate->(""a b b a""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c a b""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d g""),{""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""b b b b a""),{""b"" => 4})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),{})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),{""a"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_112,knc_Latn,pl,"# Misal # Nyiye array do suronzan jaza string-a 1/'-a mbeji dǝga waltǝmin.# String dǝ palindrome lan bowotǝyin sa dǝro waltǝro kuru fuwuro kalkalro waljiya.# daji letǝgǝram jazabe dǝ palindrome ro waljin.# Andeye kərtə indi s a c, nyiye awowa s lan kərtəwa c lan kərtəwa samma so koltəna.# Cida dǝ.# >>> reverse_delete(""abcde"", ""ae"")
# [""bcd"", """"]
# >>> reverse_delete(""abcdef"", ""b"")
# [""acdef"", """"]
# >>> reverse_delete(""abcdedcba"", ""ab"")
# [""cdedc"", 1]
sub reverse_delete {
    my($s, $c) = @_;
","sub reverse_delete {
    my($s, $c) = @_;
    
    # Create a hash of characters to be deleted for quick lookup
    my %chars_to_delete = map { $_ => 1 } split //, $c;
    
    # Remove characters that need to be deleted
    $s =~ s/[$c]//g;
    
    # Check if the resulting string is a palindrome
    my $is_palindrome = ($s eq reverse $s) ? 1 : '';

    # Return the resulting string and palindrome check
    return [$s, $is_palindrome];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&reverse_delete;
        if(eq_deeply($candidate->(""abcde"", ""ae""),[""bcd"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef"", ""b""),[""acdef"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""ab""),[""cdedc"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dwik"", ""w""),[""dik"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a"", ""a""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", """"),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""v""),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""vabba"", ""v""),[""abba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""mamma"", ""mia""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_113,knc_Latn,pl,"# Lambawa gananzəbe suro i'th stringbe suro inputben.# string i də suro inputben. "" na doni i's samma lamba  lan faltin.# Awowa fuletəbe falloso i də shima lamba awowa kəske suro # Arraybe suro Stringsben təwandəna, na shi String woso aruwuwa baslan dagənadə, array fallo suwudin.# >>> odd_count([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
sub odd_count {
    my($lst) = @_;
","sub odd_count {
    my ($lst) = @_;
    my @output;
    foreach my $str (@$lst) {
        my $odd_count = 0;
        $odd_count++ while $str =~ /[13579]/g;
        push @output, ""the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput."";
    }
    return \@output;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&odd_count;
        if(eq_deeply($candidate->([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_114,knc_Latn,pl,"# Misal # Numburowa kada.# Array integersbe numsbe təna, sum ngəwu sub-arraybe ganamabe fandə # >>> minSubArraySum([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum([-1, -2, -3])
# -6
sub minSubArraySum {
    my($nums) = @_;
","sub minSubArraySum {
    my($nums) = @_;
    my $minSum = $nums->[0];
    my $currentSum = 0;
    
    foreach my $num (@$nums) {
        $currentSum += $num;
        if ($currentSum < $minSum) {
            $minSum = $currentSum;
        }
        if ($currentSum > 0) {
            $currentSum = 0;
        }
    }
    
    return $minSum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minSubArraySum;
        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_115,knc_Latn,pl,"# Misal 1: # Lamba do buckets dәga sәkkәna dәga fәlezәyin.# Cida nyi dә shima bucket-a lan bowowa dәga koltәro faidatә.# kuru bucket samma so dә nәm kәnasar fal mbeji.# Kәji njibe woso bucket laa mbeji shidonyi faidata njiye sәtәyin, # kuru 1 suro layibe woson awo fal njibe wakiljin.# Nyiye ngaltǝwa kǝla kǝlabe kǝlabe kǝlabe kǝlabe dǝga kǝlabe fal ro wakiltǝ.# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
sub max_fill {
    my($grid, $capacity) = @_;
","sub max_fill {
    my($grid, $capacity) = @_;
    my $total_water_units = 0;
    
    for my $row (@$grid) {
        for my $unit (@$row) {
            $total_water_units += $unit;
        }
    }
    
    my $bucket_uses = int(($total_water_units + $capacity - 1) / $capacity);
    return $bucket_uses;
}

# Examples
print max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . ""\n""; # 6
print max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . ""\n""; # 5
print max_fill([[0, 0, 0], [0, 0, 0]], 5) . ""\n""; # 0","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_fill;
        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_116,knc_Latn,pl,"# Adǝgai diwo dǝ tǝdin: # Lamba tilo tilo samənnabe, daraja decimalbe lan yaktə.# Lamba falbe suro binaryben wakilzayin, futə fuwuzənaben.# Kata adǝn, nyiye aruwuwa integersbe gǝnyi-kalkal ba wo son yaktǝyin # >>> sort_array([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
sub sort_array {
    my($arr) = @_;
","sub sort_array {
    my($arr) = @_;
    return [sort { sprintf(""%b"", $a) =~ tr/1// <=> sprintf(""%b"", $b) =~ tr/1// || $a <=> $b } @$arr];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_117,knc_Latn,pl,"# Misal: # Note: Input string dən harawa-a na'a-a bas mbeji ro tǝmanǝmin.# Soro nəmkambo s bedə, daji kəndobe diwal kəndobe baro waltəyin.# N konsonant, kalma anyi suro string sben fəlejin.# function do shiro array sammasobe suwudinma suro string s do suronzən kalkallo # String s kuru lamba nbe mbeji, nyiye cida diwalbe s3d3ga s3d3na.# >>> select_words(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words(""simple white space"", 2)
# []
# >>> select_words(""Hello world"", 4)
# [""world""]
# >>> select_words(""Uncle sam"", 3)
# [""Uncle""]
sub select_words {
    my($s, $n) = @_;
","sub select_words {
    my($s, $n) = @_;
    return [] if $s eq '';
    
    my @words = split(/\s+/, $s);
    my @result;
    
    foreach my $word (@words) {
        my $consonant_count = () = $word =~ /[^aeiouAEIOU]/g;
        push @result, $word if $consonant_count == $n;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&select_words;
        if(eq_deeply($candidate->(""Mary had a little lamb"", 4),[""little""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mary had a little lamb"", 3),[""Mary"", ""lamb""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""simple white space"", 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world"", 4),[""world""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Uncle sam"", 3),[""Uncle""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("""", 4),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_118,knc_Latn,pl,"# Misal: # Nyiye rangnǝmbe dǝro waljin shi donyi suro Englishbe dǝn ruwo bas mbeji ro.# Kǝla awaa do awaa do samǝn dǝn.# Vowels badiyaram-a datǝ-a dǝye gǝnyi. String ba wo ro waltǝmin ǝnyi maa.# konsonant indi suro kalmadǝbe kǝlanzǝbe (kalam-a kǝrmai-a yaktǝbe).# Nyiye kalmawa laa cina. Cida nәm dә shima kambo karәngәna kambo kate dәn dazәyin ma.# >>> get_closest_vowel(""yogurt"")
# ""u""
# >>> get_closest_vowel(""FULL"")
# ""U""
# >>> get_closest_vowel(""quick"")
# """"
# >>> get_closest_vowel(""ab"")
# """"
sub get_closest_vowel {
    my($word) = @_;
","sub get_closest_vowel {
    my($word) = @_;
    my @chars = split //, $word;
    my $vowel = '';
    my @vowels = qw(a e i o u A E I O U);
    my %vowel_hash = map { $_ => 1 } @vowels;

    for (my $i = $#chars - 1; $i > 0; $i--) {
        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {
            $vowel = $chars[$i];
            last;
        }
    }

    return $vowel;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_closest_vowel;
        if(eq_deeply($candidate->(""yogurt""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""full""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""easy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eAsy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ali""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bad""),""a"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""most""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ba""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""quick""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""anime""),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Asia""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Above""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_119,knc_Latn,pl,"# Misal: # 'Yaye' warrata'a sa laan diwal kalkallo cinna ma mbeji maa, kuru 'Ayi' warrata'a maa.# ""()) "" dǝ ba.# misallo: string '(())))' dǝ ngǝla, amma string # String S dǝ ngǝla ro gotǝyin sa kuru son sǝkǝ parentheses samma suro S dǝro.# order laa, shiye sǝkkǝ string dǝ kalkalro waljin.# Cida nǝm dǝ shima waneye mowonzǝ kǝltin kǝla nzǝli indi dǝga kǝltin dǝga.# kurtə """" (_) "" au kurtəwa karəngə """") "" ro bas.# Nyiye array la'a indi suwondin, sandi indi samma soye open lan kara.# >>> match_parens([""()("", "")""])
# ""Yes""
# >>> match_parens(["")"", "")""])
# ""No""
sub match_parens {
    my($lst) = @_;
","sub match_parens {
    my($lst) = @_;
    my ($a, $b) = @$lst;
    
    # Helper to check if a string is good (i.e., parentheses balanced)
    sub is_good {
        my ($str) = @_;
        my $balance = 0;
        for my $ch (split //, $str) {
            $balance++ if $ch eq '(';
            $balance-- if $ch eq ')';
            return 0 if $balance < 0; # Too many closing parens
        }
        return $balance == 0; # Balanced if zero
    }
    
    # Check both combinations
    return ""Yes"" if is_good($a . $b) || is_good($b . $a);
    return ""No"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&match_parens;
        if(eq_deeply($candidate->([""()("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", "")""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()(())"", ""())())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")())"", ""(()()(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(())))"", ""(()())((""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""()"", ""())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()("", ""()))()""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(((("", ""((())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")(()"", ""(()(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")("", "")(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", ""(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_120,knc_Latn,pl,"# Misal 1: # nəm kuruwu k-be lamba k nguwu suro arr lan.# Array arr integersbe a kuru lamba ngal kbe təwandənadən, array sortedbe warratə # >>> maximum([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
sub maximum {
    my($arr, $k) = @_;
","sub maximum {
    my($arr, $k) = @_;
    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order
    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&maximum;
        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_121,knc_Latn,pl,"# Misalnzə'a.# Kəla integerbe kasattənyibe ladən, sum awowabe ganamabe sammabe suro na au tiloben.# >>> solution([5, 8, 7, 1])
# 12
# >>> solution([3, 3, 3, 3, 3])
# 9
# >>> solution([30, 13, 24, 321])
# 0
sub solution {
    my($lst) = @_;
","sub solution {
    my($lst) = @_;
    my $sum = 0;
    for (my $i = 0; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solution;
        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 9]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_122,knc_Latn,pl,"# Misal: # sum də elements dəwo lamba indi kozəna ba dəwo first k elements dəwo arr lan.# Array integersbe ar kuru integer kbe təwandənadən, return # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
sub add_elements {
    my($arr, $k) = @_;
","sub add_elements {
    my ($arr, $k) = @_;
    my $sum = 0;
    for my $i (0..$k-1) {
        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add_elements;
        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1], 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_123,knc_Latn,pl,"# get_odd_collatz(5) waltə [1, 5] # Collatz sequence 5 ye dǝ [5, 16, 8, 4, 2, 1], adǝye sǝkkǝ lamba ganama dǝ 1 kuru 5 dǝma. # Misallo: # 2. array returnbedǝ sortayin suro kǝla fuwutuwuyen.# 1. Collatz ((1) shima [1].# Note: # Ka'idabe shima, taman nbe yaye, sequence də sambisoro 1 ro yiko.# Kalmadə buron təwandənadə, kalmadə buron təwandənadə 3 kəmburam buron təwandənadə.# kalma buroye dǝgai: kalma buroye dǝ even yaye, kalma fuwubedǝ shima fal suro # futu fuletənadə: lamba ngalwobe n lan baditin. daji kalma woso nalan tuwandin.# Shi Collatz conjecture dǝ shima conjecture suro konkomiben shido kǝla sequence bayantǝnaben kara.# Lamba hayyabe n təwandənadə, lamba ngalauta suwudin shidoni lamba ganadə suro kollatzben.# >>> get_odd_collatz(5)
# [1, 5]
sub get_odd_collatz {
    my($n) = @_;
","sub get_odd_collatz {
    my ($n) = @_;
    my %odd_numbers;
    
    while ($n != 1) {
        $odd_numbers{$n} = 1 if $n % 2 != 0;
        if ($n % 2 == 0) {
            $n = $n / 2;
        } else {
            $n = 3 * $n + 1;
        }
    }
    $odd_numbers{1} = 1;
    
    return sort { $a <=> $b } keys %odd_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_odd_collatz;
        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[1, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_124,knc_Latn,pl,"# 4. Loktu dǝye futu: mm-dd-yyyy ye dǝro waljin.# 3. Kәntagә dә nduma gana-a au 12 kozәnyi ro waljin.# 2. Lamar 1,3,5,7,8,10,12 lan kәntagә dә 1 kozənyi au 31 kozənyi. Lamar 4,6,9,11 lan kәntagә dә 1 kozənyi au 30 kozənyi. Lamar 2 lan kәntagә dә 1 kozənyi au 29 kozənyi.# 1. Kǝla datǝbedǝ ba.# Kǝnda shima dǝ kalkalro waljiya kaidaa fuwuye samma so dǝga kǝlzǝna ma: # sa'a dǝ kalkalro waljiya 1 waltǝyin, sa'a dǝ kalkalro waljiya ba'a '"".# Nyiye kәla kәndobe ruotәna shidonyi datәbe bayanjin kuru # >>> valid_date(""03-11-2000"")
# 1
# >>> valid_date(""15-01-2012"")
# """"
# >>> valid_date(""04-0-2040"")
# """"
# >>> valid_date(""06-04-2020"")
# 1
# >>> valid_date(""06/04/2020"")
# """"
sub valid_date {
    my($date) = @_;
","sub valid_date {
    my ($date) = @_;
    
    # Check if date is empty
    return '' if !$date;
    
    # Date pattern for mm-dd-yyyy
    if ($date =~ /^(\d{2})-(\d{2})-(\d{4})$/) {
        my ($month, $day, $year) = ($1, $2, $3);
        
        # Check month validity
        return '' if $month < 1 || $month > 12;
        
        # Check day validity based on the month
        my %days_in_month = (
            1 => 31, 2 => 29, 3 => 31, 4 => 30,
            5 => 31, 6 => 30, 7 => 31, 8 => 31,
            9 => 30, 10 => 31, 11 => 30, 12 => 31
        );
        
        return '' if $day < 1 || $day > $days_in_month{$month};
        
        # If all conditions are satisfied, return 1
        return 1;
    }
    
    # If date does not match the pattern, return ''
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&valid_date;
        if(eq_deeply($candidate->(""03-11-2000""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15-01-2012""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-0-2040""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-04-2020""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""01-01-2007""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""03-32-2011""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-31-3000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-06-2005""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""21-31-2000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-12-2003""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04122003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""20030412""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04-12""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-2003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_125,knc_Latn,pl,"# Misalnzə'a.# alphabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 # commas lan yektəyin ',' commas ba ma'a, adadu ka'ala ganabe suro fasalben yektəyin.# Kalmabe suro ladən, waltə kəltəram kalmabe nəmfarak na ladən, waneye na la laan ba suro ruwo do kulashinma dǝn mbeji ro waljin.# >>> split_words(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words(""abcdef"")
# 3
sub split_words {
    my($txt) = @_;
","sub split_words {
    my($txt) = @_;
    
    # Check if whitespace exists in the string
    if ($txt =~ /\s/) {
        my @words = split(/\s+/, $txt);
        return \@words;
    }
    # If no whitespace, check for commas
    elsif ($txt =~ /,/) {
        my @words = split(/,/, $txt);
        return \@words;
    }
    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters
    else {
        my @chars = split(//, $txt);
        my $count = 0;
        foreach my $char (@chars) {
            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {
                $count++;
            }
        }
        return $count;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&split_words;
        if(eq_deeply($candidate->(""Hello world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world,!""),[""Hello"", ""world,!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaabb""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaBb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_126,knc_Latn,pl,"# Misalnzə'a.# lamba, return '"". lamba kalkal ba kuru integerslan.# sǝkǝ, suro nǝm gade-gadebe.# Lambawa arraybe təna, waltə yikkolzayin au yikkolzayin ba.# >>> is_sorted([5])
# 1
# >>> is_sorted([1, 2, 3, 4, 5])
# 1
# >>> is_sorted([1, 3, 2, 4, 5])
# """"
# >>> is_sorted([1, 2, 3, 4, 5, 6])
# 1
# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
# 1
# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
# """"
# >>> is_sorted([1, 2, 2, 3, 3, 4])
# 1
# >>> is_sorted([1, 2, 2, 2, 3, 4])
# """"
sub is_sorted {
    my($lst) = @_;
","sub is_sorted {
    my($lst) = @_;
    my %count;
    
    for (my $i = 0; $i < @$lst; $i++) {
        $count{$lst->[$i]}++;
        
        # Check for more than one duplicate
        if ($count{$lst->[$i]} > 2) {
            return '';
        }
        
        # Check if the array is not sorted
        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {
            return '';
        }
    }
    
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_sorted;
        if(eq_deeply($candidate->([5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_127,knc_Latn,pl,"# [input/output] samfurwa: # Sa loktuwa indi dǝ kalkal gǝnyi maa, ""Ayi"" ruotǝ.# sawadəro, ""AYI"" waltəgǝ.# Nəm kurtəbedə lamba burobedǝro waljiya, ""YES"" ruwotǝ, # Nəmkuranzədə 1, shi donyi lamba burobedən gənyi.# Misal, na samnowa (1, 3), (2, 4) dǝga (2, 3) # Nəmkambowa suro lamba primebe wo.# Cida nyiye shima nəmngəwu ndikate awo indi anyibe kurtəlan.# Sa loktə falro, sha asutin badiyaramnzədə gana au tilo datənzədəga.# badiyaram-a datǝ-a samma mbeji.# Loktuwa dǝga dǝga dǝga samǝn, adǝye ma'ananzǝ loktu (kǝla fuwu, dare) dǝga dǝga.# na shi awowa sammaso integersbe indi. Misallo, awowa sammaso = (kambo, dare) = (1, 2).# Nyiye loktu indi nya nya nya, # >>> intersection([1, 2], [2, 3])
# ""NO""
# >>> intersection([-1, 1], [0, 4])
# ""NO""
# >>> intersection([-3, -1], [-5, 5])
# ""YES""
sub intersection {
    my($interval1, $interval2) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num <= 1;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub intersection {
    my ($interval1, $interval2) = @_;

    my $start1 = $interval1->[0];
    my $end1 = $interval1->[1];
    my $start2 = $interval2->[0];
    my $end2 = $interval2->[1];

    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;
    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;

    if ($intersection_start <= $intersection_end) {
        my $intersection_length = $intersection_end - $intersection_start;
        return is_prime($intersection_length) ? ""YES"" : ""NO"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersection;
        if(eq_deeply($candidate->([1, 2], [2, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1], [0, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, -1], [-5, 5]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, 2], [-4, 0]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-11, 2], [-1, -1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [3, 5]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [1, 2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -2], [-3, -2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_128,knc_Latn,pl,"# Misal: # Note: return undef for empty arr.  kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru kuru# lamba wo so suro arrayben, 1, -1 au 0 lan wakiltin.# sum of magnitudes of integers times product of all signs  lamba sammabe sammabe kəltəbedə# Nyiye integer arr la'a cin kuru nyiye waltə'a diwo.# >>> prod_signs([1, 2, 2, -4])
# 9
# >>> prod_signs([0, 1])
# 0
# >>> prod_signs([])
# undef
sub prod_signs {
    my($arr) = @_;
","sub prod_signs {
    my($arr) = @_;
    return undef if scalar(@$arr) == 0;

    my $sum_magnitudes = 0;
    my $product_signs = 1;

    for my $num (@$arr) {
        $sum_magnitudes += abs($num);
        
        if ($num > 0) {
            $product_signs *= 1;
        } elsif ($num < 0) {
            $product_signs *= -1;
        } else {
            $product_signs *= 0;
        }
    }

    return $sum_magnitudes * $product_signs;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prod_signs;
        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_129,knc_Latn,pl,"# Misal: # Futu daraja cellbe kalkallo waljin futu laan karəngəro lejin.# Jawab dә tawadә ro kasatkata.# lst_A[j] = lst_B[j] # lst_A[i] < lst_B[i] kuru j (1 <= j <i) yedeiyen, andeye # lst_B, kalma gade lan, index integerbe mbeji i (1 <= i <= k) # (Lanzan sandiya lst_A-a lst_B-a lan bowotǝyin), lst_A dǝ kalkalzǝ gana.# Ngawo awowa darajabe cell A kuru B lan gozanaben,# Zawal A (nǝmkuranzǝ k) dǝ zauro ganawo nasha B (nǝmkuranzǝ k) dǝga kozǝna ro tǝmazǝna sa # Nyiye rangnәm lan gәnyi lejin.# awowa gade-gade mbeji).# Awo do nəm kuranzə k ye də cell k ye ro lejin (ba'a)# cell. # awo gade lan, cellwa do nyi-a kǝrǝnǝm-a kǝlzǝyin ma so ro lejin# cell yeso, kuru suro step yeso yen cellwa karuwa yeso ro lejin, # Nyiye diwal gana la'a nəmkuranzə k suro grid lan tuwondin.# inclusive dǝ kalkalro loktu fallo suro cell dǝn suro grid dǝyen tuwandin.# cell gadegaden samma taman mbeji. Lamba samma suro rang [1, N * N] # Kəla gridben, layi N-a kalanga N-a (N >= 2) kuru lamba ngal k, # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
sub minPath {
    my($grid, $k) = @_;
","sub minPath {
    my ($grid, $k) = @_;
    my $n = scalar @$grid;

    # Create direction vectors for up, down, left, right moves
    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);

    # Priority queue to store paths using a lexicographically ordered array
    my @queue;
    for my $i (0..$n-1) {
        for my $j (0..$n-1) {
            push @queue, [[$grid->[$i][$j]], $i, $j];
        }
    }

    # Sort the initial cells based on their values to start with minimum paths
    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;

    # Implement a breadth-first search that continues until we have a path of length k
    while (@queue) {
        my $current = shift @queue;
        my ($path, $x, $y) = @$current;

        # Return the first path of length k since paths are checked in lexicographical order
        return @$path if scalar @$path == $k;

        # Explore neighboring cells
        for my $direction (@directions) {
            my ($dx, $dy) = @$direction;
            my ($nx, ny) = ($x + $dx, $y + $dy);
            
            # Check for valid cell
            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {
                my @new_path = (@$path, $grid->[$nx][$ny]);
                push @queue, [\@new_path, $nx, $ny];
            }
        }
        # Keep the queue ordered by lexicographical order of paths
        @queue = sort { 
            my ($a_path, $b_path) = ($a->[0], $b->[0]);
            for my $i (0..$#$a_path) {
                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];
            }
        } @queue;
    }
}

# Example usage:
#print join("", "", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), ""\n"";  # [1, 2, 1]
#print join("", "", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), ""\n"";  # [1]","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minPath;
        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_130,knc_Latn,pl,"# Misal: # Lamba Tribonaccibe buro salakbe n + 1be.# Nyiye lamba wofilabe n nyiye, nyiye array returnbe fulujin# = 2 + 3 + 3 = 8 # tri(3) = tri(2) + tri(1) + tri(4) # tri(4) = 3 # tri(2) = 1 + (2 / 2) = 2 # Misallo: # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sa n dǝ gayirtin maa. # tri (n) = 1 + n / 2, sa n dǝ even ma wo.# tri(1) = 3 # Tribonacci sequence dǝ waltǝ kǝnǝngatǝnzǝ lan bayantin: # Amma, awo amsoye nozanyi dǝ shima Tribonacci sequence wo.# Ndu yaye Fibonacci sequence nozǝna, isawuwuye kǝraza kuruwu suro # >>> tri(3)
# [1, 3, 2, 8]
sub tri {
    my($n) = @_;
","sub tri {
    my ($n) = @_;
    my @sequence = (3);  # starting with tri(1) = 3

    for my $i (1 .. $n) {
        if ($i % 2 == 0) {
            push @sequence, 1 + $i / 2;
        } else {
            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) / 2) : 0);
            push @sequence, $val;
        }
    }

    return @sequence;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&tri;
        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_131,knc_Latn,pl,"# Misallo: # 0 waltǝyin sa alama samma samma.# Lamba hayyabe n təwandənadən, lamba lamba lambabe kəskeye suwudin.# >>> digits(1)
# 1
# >>> digits(4)
# 0
# >>> digits(235)
# 15
sub digits {
    my($n) = @_;
","my @digits = split //, $n;
    my $product = 1;
    my $has_odd = 0;

    foreach my $digit (@digits) {
        if ($digit % 2 != 0) {
            $product *= $digit;
            $has_odd = 1;
        }
    }

    return $has_odd ? $product : 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digits;
        if(eq_deeply($candidate->(5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(54),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(120),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5014),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(98765),315)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5576543),2625)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2468),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_132,knc_Latn,pl,"# na do kam fal suro subsequence yedə nested tədin.# Cida dəga 1 waltəyin sa kuru tilo sa nəmngəwu kalkallo suro bracketsben mbeji maa kuru fallo.# Kǝla cidabe donyi string donyi suro karewa kurtəbe bas lan gojin ma.# >>> is_nested(""[[]]"")
# 1
# >>> is_nested(""[]]]]]]][[[[[]"")
# """"
# >>> is_nested(""[][]"")
# """"
# >>> is_nested(""[]"")
# """"
# >>> is_nested(""[[][]]"")
# 1
# >>> is_nested(""[[]][["")
# 1
sub is_nested {
    my($string) = @_;
","sub is_nested {
    my ($string) = @_;
    my @stack;

    for my $char (split //, $string) {
        if ($char eq '[') {
            push @stack, $char;
        } elsif ($char eq ']') {
            if (@stack && $stack[-1] eq '[') {
                pop @stack;
                return 1 if @stack; # Check for nesting
            } else {
                return """"; # Unbalanced brackets
            }
        }
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_nested;
        if(eq_deeply($candidate->(""[[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]][[[[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[]]]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][][[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]][[""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[][]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[[[[[""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_133,knc_Latn,pl,"# Misal: # Awowa suro arraybedəga sammason datəgəram datəgəram sammason ro yikkoltin.# Nyiye sum lamba squaredbe suro arraybe dən suwudə, # Nyiye lamba kada tədin.# >>> lst([1.0, 2.0, 3.0])
# 14
# >>> lst([1.0, 4.0, 9.0])
# 98
# >>> lst([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst([1.4, 4.2, 0.0])
# 29
# >>> lst([-2.4, 1.0, 1.0])
# 6
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my($lst) = @_;
    my $sum = 0;
    foreach my $num (@$lst) {
        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);
        $sum += $ceil_num ** 2;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_134,knc_Latn,pl,"# Misal: # Note: ""word"" dǝ alama alama kada kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate# Kalma laa, kuru """" gade.# of a given string dǝ alama alphabetibe wo kuru dǝ  gǝnyi.# Kəndobe 1 warratəyin alama darebedə # >>> check_if_last_char_is_a_letter(""apple pie"")
# """"
# >>> check_if_last_char_is_a_letter(""apple pi e"")
# 1
# >>> check_if_last_char_is_a_letter(""apple pi e "")
# """"
# >>> check_if_last_char_is_a_letter("""")
# """"
sub check_if_last_char_is_a_letter {
    my($txt) = @_;
","sub check_if_last_char_is_a_letter {
    my ($txt) = @_;
    $txt =~ s/\s+$//; # Trim trailing spaces
    return '' if $txt eq ''; 

    if ($txt =~ /([^a-zA-Z])([a-zA-Z])$/ && $1 eq ' ') {
        return 1;
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_if_last_char_is_a_letter;
        if(eq_deeply($candidate->(""apple""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie 1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pie""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_135,knc_Latn,pl,"# Misal: # Darajawa fal.# awo jili adǝ ba ma'a kuru return -1. Array dǝn ba ro waljin.# shi dǝ awo dǝwo fuwunzǝro kǝlzǝnyi dǝga kura au tilo ba.# Cida la'a do index kura awo la'a ma'ana dəga waltəyin ma.# >>> can_arrange([1, 2, 4, 3, 5])
# 3
# >>> can_arrange([1, 2, 3])
# -1
sub can_arrange {
    my($arr) = @_;
","sub can_arrange {
    my ($arr) = @_;
    for my $i (1 .. $#$arr) {
        if ($arr->[$i] < $arr->[$i - 1]) {
            return $i;
        }
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&can_arrange;
        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_136,knc_Latn,pl,"# Misal: # Suro lamba ngalwotəgənaben, sandiya undef lan warrata.# Lamba hayyabe kəlanzan suro arrayben.# Kuruma suro integers fulutinben, kuru b shima ganawo # Kǝla fasalbe duwo array (a, b) suwudin, na dǝwo 'a' dǝ shima # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
# [undef, 1]
# >>> largest_smallest_integers([])
# [undef, undef]
# >>> largest_smallest_integers([0])
# [undef, undef]
sub largest_smallest_integers {
    my($lst) = @_;
","sub largest_smallest_integers {
    my ($lst) = @_;
    my ($largest_neg, $smallest_pos);

    foreach my $num (@$lst) {
        if ($num < 0) {
            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;
        } elsif ($num > 0) {
            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;
        }
    }
    
    return ($largest_neg, $smallest_pos);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_smallest_integers;
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_137,knc_Latn,pl,"# Note: Lamba hayyabe sha aruwuwabe wakiljin maa, floating point də waneye . au , # Futu undefbe waratain sa darajawanzə tilo lan.# lamba hayyabe, kuru lamba kura faltəbe suro jili faltəbe cinzəben. # Awowa integersbe, floatsbe, au stringsbe wakiljinma suwandin.# >>> compare_one(1, 2.5)
# 2.5
# >>> compare_one(1, ""2,3"")
# ""2,3""
# >>> compare_one(""5,1"", ""6"")
# ""6""
# >>> compare_one(""1"", 1)
# undef
sub compare_one {
    my($a, $b) = @_;
","sub compare_one {
    my ($a, $b) = @_;

    # Convert potential string numbers with ',' into float representation
    $a =~ s/,/./g if $a =~ /,/;
    $b =~ s/,/./g if $b =~ /,/;

    # Auto-detect type by checking if string has non-numeric parts
    my $a_is_num = $a =~ /^\d+(\.\d+)?$/;
    my $b_is_num = $b =~ /^\d+(\.\d+)?$/;

    if ($a_is_num && $b_is_num) {
        # Compare as numbers
        if ($a < $b) {
            return $b;
        } elsif ($a > $b) {
            return $a;
        } else {
            return undef;
        }
    } else {
        # Compare as strings
        if ($a lt $b) {
            return $b;
        } elsif ($a gt $b) {
            return $a;
        } else {
            return undef;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare_one;
        if(eq_deeply($candidate->(1, 2),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2.5),2.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, ""2,3""),""2,3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5,1"", ""6""),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""2""),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", 1),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_138,knc_Latn,pl,"# Misal # Lamba n təwandəna dəga lamba 4 kəltəlan ruwotəyin nowatamadəga asutin.# >>> is_equal_to_sum_even(4)
# """"
# >>> is_equal_to_sum_even(6)
# """"
# >>> is_equal_to_sum_even(8)
# 1
sub is_equal_to_sum_even {
    my($n) = @_;
","sub is_equal_to_sum_even {
    my($n) = @_;

    # A number can be expressed as the sum of four positive even numbers
    # if and only if it is greater than or equal to 8 and is even
    if ($n >= 8 && $n % 2 == 0) {
        return 1;
    } else {
        return """";
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_equal_to_sum_even;
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_139,knc_Latn,pl,"# Misallo: # na doni n > 0 # brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! # Brazilbe factorial dəga fasartəna:# >>> special_factorial(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
sub special_factorial {
    my($n) = @_;
","sub special_factorial {
    my($n) = @_;
    my $result = 1;
    
    for my $i (1 .. $n) {
        $result *= factorial($i);
    }
    
    return $result;
}

sub factorial {
    my($num) = @_;
    my $fact = 1;

    for my $i (1 .. $num) {
        $fact *= $i;
    }

    return $fact;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&special_factorial;
        if(eq_deeply($candidate->(4),288)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),34560)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),125411328000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_140,knc_Latn,pl,"# daji na'a sammaso -  lan faltin# kuru string lan na 2 kozənaro na fallo mbeji, # Kalma kalkallo cinna, na'a sammaso alama alama alamabe lan faltin, # >>> fix_spaces("" Example"")
# ""Example""
# >>> fix_spaces("" Example 1"")
# ""Example_1""
# >>> fix_spaces("" Example 2"")
# ""_Example_2""
# >>> fix_spaces("" Example 3"")
# ""_Example-3""
sub fix_spaces {
    my($text) = @_;
","sub fix_spaces {
    my($text) = @_;
    $text =~ s/ {3,}/-/g;   # Replace 3 or more spaces with a hyphen
    $text =~ s/ /_/g;       # Replace remaining spaces with underscores
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fix_spaces;
        if(eq_deeply($candidate->(""Example""),""Example"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir Hanif ""),""Mudasir_Hanif_"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Exa   mple""),""Exa-mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_141,knc_Latn,pl,"# Misal: # - Kǝndodǝ ngawo dot dǝben awo fal suro adǝyen: ['txt', 'exe', 'dll'] # Latinbe alphabetbe dә ('a'-'z' and 'A'-'Z').# - Substring dǝwo kawu dot dǝyen dǝ mbu gǝnyi, kuru ruwozǝ letter dǝga badijin # - Su fayilbe dәn na fallan dot fal mbeji.# - Su filebe dǝ numbe yakkǝ kozǝnyi (""0"" - ""9"") lan.# sandima kǝla:# Su fayilbe dǝ sandima kalkalro gotǝyin sa kuru sandi samma sowa kǝndon kuntenro.# 'Yaye' sa su filebe kalkalro waljiya, kuru 'Ayi' waltə suwudin.# Kǝla cidabe su fayilbe wakiljinbe gojin, kuru waltǝyin # >>> file_name_check(""example.txt"")
# ""Yes""
# >>> file_name_check(""1example.dll"")
# ""No""
sub file_name_check {
    my($file_name) = @_;
","sub file_name_check {
    my($file_name) = @_;
    
    # Check if there's exactly one dot and split the string
    my @parts = split(/\./, $file_name);
    return 'No' unless scalar(@parts) == 2;

    # Extract the name and the extension
    my ($name, $extension) = @parts;

    # Check if the extension is valid
    return 'No' unless $extension =~ /^(txt|exe|dll)$/;

    # Check if the name starts with a letter
    return 'No' unless $name =~ /^[a-zA-Z]/;

    # Check the number of digits in the name
    my $digit_count = () = $name =~ /[0-9]/g;
    return 'No' if $digit_count > 3;

    # If all conditions are met, return 'Yes'
    return 'Yes';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&file_name_check;
        if(eq_deeply($candidate->(""example.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1example.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s1sdf3.asd""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MY16FILE3.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""His12FILE94.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_Y.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""?aREYA.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""/this_is_valid.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.wow""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txtexe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#this2_i4s_5valid.ten""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""@this1_is6_valid.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_12valid.6exe4.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""all.exe.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_No.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is3youfault.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""no_one#knows.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1I563_Yes3.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_Yes3.txtt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final..txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final132""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_f4indsartal132.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_142,knc_Latn,pl,"# Misal: # Futu shiye awoa suro arraybe dəga faljin kuru sandi index nzadə ngəwusoro 3 au 4 gənyi, daji shi kəndo dəye jimla awoa suro arraybe dəga faljin dəga suwudin.# kawattə 3 kuru lamba kalkallo cubejin indesnzə kawattə 4 kuru kawattə 3 gənyi maa.# Kəndo adəye integerbe kasattin. Lamba samma suro arrayben, kəndo dəye integerbe kasattin square ro waljin indesnzadə shima a # ""  kǝla kǝn indin# >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my ($lst) = @_;
    my $sum = 0;

    for my $i (0 .. @$lst - 1) {
        if ($i % 3 == 0) {
            $sum += $lst->[$i] ** 2;
        } elsif ($i % 4 == 0) {
            $sum += $lst->[$i] ** 3;
        } else {
            $sum += $lst->[$i];
        }
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1, 2, 3]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 9]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_143,knc_Latn,pl,"# Misal 1: # kalmadǝ suro kǝla kalmadǝbe bǝlinbedǝ shima kalmadǝ burobe dǝga falro waljin.# nəmkuranzǝ dǝ lamba faida, # kuru kaiyya kalma suro jumla buroye dǝga suwudǝro waljin, # jimladәye kalima laa mbeji nәm karuwa laa yaktәna, # Nyiye kәla bayan laa ro cin, # >>> words_in_sentence(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
sub words_in_sentence {
    my($sentence) = @_;
","sub words_in_sentence {
    my($sentence) = @_;
    
    # Function to check if a number is prime
    sub is_prime {
        my $num = shift;
        return 0 if $num < 2;
        for (my $i = 2; $i * $i <= $num; ++$i) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }
    
    my @words = split(' ', $sentence);
    my @prime_length_words;
    
    foreach my $word (@words) {
        my $length = length($word);
        if (is_prime($length)) {
            push(@prime_length_words, $word);
        }
    }
    
    return join(' ', @prime_length_words);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_in_sentence;
        if(eq_deeply($candidate->(""This is a test""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""lets go for swimming""),""go for"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""there is no place available here""),""there is no place"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi I am Hussein""),""Hi am Hussein"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go for it""),""go for it"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here is""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_144,knc_Latn,pl,"# X, kuru n sandima fraction faidabewo, kuru sandiya 0 lan notənyi.# <numerator>/<denominator> na lamba lambabe a kuru lambabe samma lamba kalkallo.# Sandi x a kuru n a ndaso samma, sandima wakil kalmabe dalami yakkəbewo, kuru sandiye fasal adəlan tədin, # X * n. Kəndobe 1 waltəgəna x * n lamba kalkallo waljiya kuru '' # Cida nyibe shima kəndowa faidatə bayanna adəga kəskejinma.# >>> simplify(""1/5"", ""5/1"")
# 1
# >>> simplify(""1/6"", ""2/1"")
# """"
# >>> simplify(""7/10"", ""10/2"")
# """"
sub simplify {
    my($x, $n) = @_;
","sub simplify {
    my ($x, $n) = @_;
    
    # Parse the fractions
    my ($x_num, $x_den) = split('/', $x);
    my ($n_num, $n_den) = split('/', $n);
    
    # Cross-multiply to find the product of the fractions
    # x * n = (x_num * n_num) / (x_den * n_den)
    my $prod_num = $x_num * $n_num;
    my $prod_den = $x_den * $n_den;
    
    # Check if the product is a whole number
    return ($prod_num % $prod_den == 0) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&simplify;
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/6"", ""2/1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/1"", ""3/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/10"", ""10/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/10"", ""50/10""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/2"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""11/6"", ""6/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/3"", ""5/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/2"", ""3/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""8/4""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""1/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_145,knc_Latn,pl,"# Misallo: # Sandiya index nza suro array buroye lan kәla nәm kәlabe lan yaktә.# Note: awowa kada mbeji sandiya aruwuwa kəltaben, # suro futə fuwuyen futu sumdo lambabe lan.# Lamba hayyabe ruwotəbe shidonyi lamba hayyabe təwandənadəga yaktin.# >>> order_by_points([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points([])
# []
sub order_by_points {
    my($nums) = @_;
","sub order_by_points {
    my ($nums) = @_;
    
    # Function to calculate the sum of the digits of a number
    sub digit_sum {
        my $num = shift;
        my $sum = 0;
        $sum += $_ for split //, abs($num);
        return $sum;
    }

    # Sort the array first by sum of digits, then by index for ties
    my @sorted = sort {
        digit_sum($a) <=> digit_sum($b) ||
        $a <=> $b
    } @$nums;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&order_by_points;
        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_146,knc_Latn,pl,"# Misallo: # lamba burobe-a darebe-a lambabe-a dǝ ganama (1, 3, 5, 7, 9).# Lambawa suro arrayben 10 kozəna kuru sandi indi # Lambawa lambabe alamaram faidatəbe ruwozəyin.# >>> specialFilter([15, -73, 14, -15])
# 1
# >>> specialFilter([33, -2, -3, 45, 21, 109])
# 2
sub specialFilter {
    my($nums) = @_;
","sub specialFilter {
    my($nums) = @_;
    my $count = 0;
    foreach my $num (@$nums) {
        if ($num > 10) {
            my $str_num = abs($num) . """";
            my $first_digit = substr($str_num, 0, 1);
            my $last_digit = substr($str_num, -1, 1);
            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {
                $count++;
            }
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&specialFilter;
        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_147,knc_Latn,pl,"# Misal: # kuru a[i] + a[j] + a[k] dǝ kawattǝ 3 ye. # Lamba triplebe (a[i], a[j], a[k]) a lan fando na i < j < k, # Awoa i (1 ≤ i ≤ n) sammason, taman a[i] = i * i - i + 1. # Nyiye lamba ngalwobe n təna. Nyiye integer array a nəmkuranzəbe n tədin.# >>> get_max_triples(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
sub get_max_triples {
    my($n) = @_;
","sub get_max_triples {
    my($n) = @_;
    my @a;
    
    # Generate the array a
    for my $i (1..$n) {
        $a[$i - 1] = $i * $i - $i + 1;
    }
    
    my $count = 0;
    
    # Check all triples (a[i], a[j], a[k]) where i < j < k
    for my $i (0..$n-3) {
        for my $j ($i+1..$n-2) {
            for my $k ($j+1..$n-1) {
                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {
                    $count++;
                }
            }
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_max_triples;
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),36)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),53361)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_148,knc_Latn,pl,"# Misalnzə'a.# su dinabe kalkal gǝnyi.# Cida dǝye array ba wo suwudin planet1 au planet2 # Kǝngal ro karǝngǝ dǝ.# Kate orbit planet1be-a orbit planet2be-a lan kara, yaktǝgǝram # Kəndo dəbe waltəyin array suron shi donyi dunya sammasobe mbeji kuru shi orbit nzə də shima # Futu shila do su dunyabe indi ro gojin ma, sandima strings planet1 a kuru planet2.# Uranus, Neptune. # Mercury, shi kǝn tilon dǝ Venus, daji Dunya, Mars, Jupiter, Saturn, # Dunyawa indi mbeji suro na samibe lan: shi doni kəngalye karəngəma wo.# >>> bf(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
sub bf {
    my($planet1, $planet2) = @_;
","sub bf {
    my ($planet1, $planet2) = @_;
    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');

    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);

    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};

    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});

    ($start, $end) = ($end, $start) if $start > $end;

    return [@planets[$start+1 .. $end-1]];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&bf;
        if(eq_deeply($candidate->(""Jupiter"", ""Neptune""),[""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Mercury""),[""Venus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mercury"", ""Uranus""),[""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Neptune"", ""Venus""),[""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mars"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jupiter"", ""Makemake""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_149,knc_Latn,pl,"# Misallo: # Nyiye raksә kalmaa samma so nәm karungәna kalkal ro gojin.# Kәndo dәye array stringsbe suro kәndoro yikkәna.# Kalma indi dǝ nǝmkuranza tilo, letǝram dǝga alphabetiya lan yaktǝ.# Adəye array dəga kalkallo kəndo.# Kǝla awowabe dǝga wuzǝna dǝ kalkalro waljin, kuru nyiye # kuru suronzǝye suronzǝ gade mbeji.# Array dǝ sambisoro string-a kuru lamba-a dǝn gǝnyi, # kuru resulted array dəga sortain order lan returnjin, # stringwa do nəmkuranzǝ ganama dǝga gǝrjin, # Cida do awowa kәla kәlabe shiro string gultin dәga kәla kәla kәlabe ro gojin,# >>> list_sort([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
sub sorted_list_sum {
    my($lst) = @_;
","sub list_sort {
    my ($lst) = @_;

    # Filter out strings with odd length
    my @filtered = grep { length($_) % 2 == 0 } @$lst;

    # Sort strings first by length, then alphabetically
    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sorted_list_sum;
        if(eq_deeply($candidate->([""aa"", ""a"", ""aaa""]),[""aa""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""b"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_150,knc_Latn,pl,"# Misal: # lamba kura kuru daraja y yaktin.# Fasal kəske shidonyi taman xbe waratajinma sa n shima # >>> x_or_y(7, 34, 12)
# 34
# >>> x_or_y(15, 8, 5)
# 5
sub x_or_y {
    my($n, $x, $y) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num < 2;
    for (my $i = 2; $i * $i <= $num; $i++) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub x_or_y {
    my ($n, $x, $y) = @_;
    return is_prime($n) ? $x : $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&x_or_y;
        if(eq_deeply($candidate->(7, 34, 12),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 33, 5212),33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1259, 3, 52),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7919, -1, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3609, 1245, 583),583)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(91, 56, 129),129)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 34, 1234),1234)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 0),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_151,knc_Latn,pl,"# Lambawa la'a suro array yen sandima ganama. Lambawa la'a diyeu ba au lamba kalkal gənyi ro yaktəyin.# Lambawa arraybe təna, sum lambabe karəngəbe suwudin # >>> double_the_difference([1, 3, 2, 0])
# 10
# >>> double_the_difference([-1, -2, 0])
# 0
# >>> double_the_difference([9, -2])
# 81
# >>> double_the_difference([0])
# 0
# If the input array is empty, return 0.
sub double_the_difference {
    my($lst) = @_;
","sub double_the_difference {
    my ($lst) = @_;
    my $sum = 0;

    foreach my $num (@$lst) {
        if ($num =~ /^\d+$/ && $num % 2 != 0) {
            $sum += $num ** 2;
        }
    }
    
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&double_the_difference;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5.0, 4.0]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_152,knc_Latn,pl,"# misal: # tamanzədə 0, kuru, jarabtənyi maa, tamanzədə nəmgade dawu kate zanzə-a nəmkambo-a ye.# Arraywa nəmkura falbe suwudin futu nəmngəwu awoa zanzanadəga.# Nyiye array indi na'a kuruwu fal-a nəmngəwu fal-a tədəna, na index woso na fal fəlejin.# Cida nyi dә shima kam laa jaza matәwa laa kalkal ro asuzәna ma.# Tawadǝro faida'a notǝ-a kǝltǝ-a.# Kәnәngalan awo wa dәga fәlejin dә, ra'a dәga kuru hangalnәm dәga loktu adәben mbeji dә shima# Tǝmangǝna ande samma hangal adǝga tangǝna loktu ajarra laa ngǝwuro tǝmazǝna dǝn.# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
sub compare {
    my($game, $guess) = @_;
","sub compare {
    my($game, $guess) = @_;
    my @result;
    
    for my $i (0..$#$game) {
        my $difference = abs($game->[$i] - $guess->[$i]);
        push @result, $difference;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_153,knc_Latn,pl,"# Misal: # (kǝrtǝnzǝ dǝ -1)# return 'Slices.SErviNGSliCes' sabtǝ 'SErviNGSliCes' shima extension dunowawo.# ['SERVINGSliCes', 'Cheese', 'StuFfed'] daji nyiro diwowa ra'amma# Misallo, ""Slices"" nyiye nyiye class a kuru array a suro # Awo buron suro arrayben tuwandin dəga gowotə.# Sa nzǝrawu indi au kada mbeji maa, nyiye adǝga sǝdin.# format: ClassName.StrongestExtensionName. # Nyiye extension dunowa fandǝmin kuru string suro adǝben waltǝmin # su extensionbe dәn, duno dәye CAP-SM fraction lan cin.# Ka'ala suro su extensionbe dən, kuru SM shima lamba ka'ala ganabe wo.# Nəm duno fasalbe dəga gənatəyin: CAP shima lamba kura kurabe wo.# Kǝlafsodǝ sandilan faidatǝ fasal gǝrǝm gade fasal dǝro kǝltin.# Nyiye su classbe (string) kuru array extensionbe suwudin.# >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
sub Strongest_Extension {
    my($class_name, $extensions) = @_;
","sub Strongest_Extension {
    my ($class_name, $extensions) = @_;
    my $strongest = '';
    my $max_strength = -1e9;

    foreach my $extension (@$extensions) {
        my $cap = 0;
        my $sm = 0;

        foreach my $char (split //, $extension) {
            if ($char =~ /[A-Z]/) {
                $cap++;
            } elsif ($char =~ /[a-z]/) {
                $sm++;
            }
        }

        my $strength = $cap - $sm;
        
        if ($strength > $max_strength) {
            $max_strength = $strength;
            $strongest = $extension;
        }
    }

    return ""$class_name.$strongest"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&Strongest_Extension;
        if(eq_deeply($candidate->(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_"", [""Bb"", ""91245""]),""_.Bb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Sp"", [""671235"", ""Bb""]),""Sp.671235"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_154,knc_Latn,pl,"# Nyiye kalma 2 nyiye. Nyiye 1 waltǝne mǝradǝmin sa kalma kǝn indimi au waltǝnzǝ fal awo suro kalma burobe dǝn kunkuntin ma.# >>> cycpattern_check(""abcd"", ""abd"")
# """"
# >>> cycpattern_check(""hello"", ""ell"")
# 1
# >>> cycpattern_check(""whassup"", ""psus"")
# """"
# >>> cycpattern_check(""abab"", ""baa"")
# 1
# >>> cycpattern_check(""efef"", ""eeff"")
# """"
# >>> cycpattern_check(""himenss"", ""simen"")
# 1
sub cycpattern_check {
    my($a, $b) = @_;
","sub cycpattern_check {
    my($a, $b) = @_;
    my $len = length($b);

    for my $i (0 .. $len - 1) {
        my $rotation = substr($b, $i) . substr($b, 0, $i);
        return 1 if index($a, $rotation) != -1;
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&cycpattern_check;
        if(eq_deeply($candidate->(""xyzw"", ""xyw""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""yello"", ""ell""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""whattup"", ""ptut""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""efef"", ""fee""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abab"", ""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""winemtt"", ""tinem""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_155,knc_Latn,pl,"# Misal: # Lamba hayyabe təna. array la suro lamba even a kuru odd a sammason təwandin.# >>> even_odd_count(-12)
# [1, 1]
# >>> even_odd_count(123)
# [1, 2]
sub even_odd_count {
    my($num) = @_;
","my $evens = 0;
    my $odds = 0;
    $num = abs($num); # Handle negative numbers
    foreach my $digit (split //, $num) {
        if ($digit % 2 == 0) {
            $evens++;
        } else {
            $odds++;
        }
    }
    return [$evens, $odds];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_count;
        if(eq_deeply($candidate->(7),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-78),[1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3452),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(346211),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-345821),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-2),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-45347),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_156,knc_Latn,pl,"# Misal: # Kәndaramma: 1 <= num <= 1000 # kuru sha ruwuwa gana lan ruwun.# Lamba hayyabe mbeji, lamba Romanbe tilo nzə Stringben, # >>> int_to_mini_roman(19)
# ""xix""
# >>> int_to_mini_roman(152)
# ""clii""
# >>> int_to_mini_roman(426)
# ""cdxxvi""
sub int_to_mini_roman {
    my($number) = @_;
","my @roman_numerals = (
        [1000, 'm'],
        [900, 'cm'],
        [500, 'd'],
        [400, 'cd'],
        [100, 'c'],
        [90, 'xc'],
        [50, 'l'],
        [40, 'xl'],
        [10, 'x'],
        [9, 'ix'],
        [5, 'v'],
        [4, 'iv'],
        [1, 'i'],
    );

    my $result = '';

    for my $pair (@roman_numerals) {
        my ($value, $roman) = @$pair;
        while ($number >= $value) {
            $result .= $roman;
            $number -= $value;
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&int_to_mini_roman;
        if(eq_deeply($candidate->(19),""xix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(152),""clii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(251),""ccli"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(426),""cdxxvi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(500),""d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),""iv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(43),""xliii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(90),""xc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(94),""xciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(532),""dxxxii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(900),""cm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(994),""cmxciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),""m"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_157,knc_Latn,pl,"# Misal: # 90 digǝraye.# Kəntawu tilobe kalkal-a də, shi kərtə tilobe doni na fallin fal kalkal au kalkal gənyi.# Kәla diwal dәyen, sandiya kәla kәla kәntagә tilobe lan kara, """" gadero.# Kәnәngalan nәm yakkәle trianglebe dәga. 1 waltәyin maa sandi yakkәle dә # >>> right_angle_triangle(3, 4, 5)
# 1
# >>> right_angle_triangle(1, 2, 3)
# """"
sub right_angle_triangle {
    my($a, $b, $c) = @_;
","sub right_angle_triangle {
    my($a, $b, $c) = @_;
    # Sort the sides to identify the potential hypotenuse
    my @sides = sort { $a <=> $b } ($a, $b, $c);
    # Check if the triangle satisfies Pythagorean theorem
    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&right_angle_triangle;
        if(eq_deeply($candidate->(3, 4, 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 6, 8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 24, 25),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 12, 13),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(48, 55, 73),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_158,knc_Latn,pl,"# Alamwa, kam buro salakye suro lexicographical orderben tuwandin dəga waltəyin.# String kada suro sandiyaben lamba kura kura mbeji.# Array dǝye kalima gade-gade mbeji. Kalima do lamba nguwu lan goatǝma dǝga waltǝyin.# Futu kəndobe shiro stringsbe matindəga ruwozəyin.# >>> find_max([""name"", ""of"", ""string""])
# ""string""
# >>> find_max([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
sub find_max {
    my($words) = @_;
","sub find_max {
    my ($words) = @_;
    my $max_word = '';
    my $max_unique_chars = 0;
    
    foreach my $word (@$words) {
        my %unique_chars = map { $_ => 1 } split //, $word;
        my $unique_count = keys %unique_chars;
        
        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {
            $max_word = $word;
            $max_unique_chars = $unique_count;
        }
    }
    
    return $max_word;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_max;
        if(eq_deeply($candidate->([""name"", ""of"", ""string""]),""string"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""name"", ""enam"", ""game""]),""enam"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""abc"", ""cba""]),""abc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""gonna"", ""rock""]),""gonna"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this"", ""is"", ""a"", ""prrk""]),""this"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""b""]),""b"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""play"", ""play""]),""play"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_159,knc_Latn,pl,"# Misal: # Kawu karewa ngǝwuso ba yaye, karewa ngǝwuso nya'a, amma kuwayaye kǝnza'a.# adadu karewabe ngawo kәmbube lan kolzanabe dǝga ] # [Lambawa karewabe nya'atәna ngawo kәmbube lan, # Amma kәmaa karewa ngәwu kәmbu kәnәmbe dә ro kәmbu dәga kәmburo waljin.# Nyi dǝ kǝnǝngǝli kǝnǝngama, kuru nyiye karuwa laa laa kǝnǝngǝna,# >>> eat(5, 6, 10)
# [11, 4]
# >>> eat(4, 8, 9)
# [12, 1]
# >>> eat(1, 10, 10)
# [11, 0]
# >>> eat(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
sub eat {
    my($number, $need, $remaining) = @_;
","sub eat {
    my($number, $need, $remaining) = @_;
    my $total_eaten = $number + $need;
    if ($remaining >= $need) {
        $remaining -= $need;
    } else {
        $total_eaten = $number + $remaining;
        $remaining = 0;
    }
    return [$total_eaten, $remaining];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&eat;
        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_160,knc_Latn,pl,"# Operator array də, kam falle operator mbeji, kuru operand array də, kam indi operands mbeji.# Operand də lamba la'ar integers gənyi.# Kəntawu operatorbe də nəmkuranzə operandbe dəga fallo yaktin.# Note: # => jaza dә = 9 # jaza dǝ = 2 + 3 * 4 - 5 # array = [2, 3, 4, 5] # kam dowo kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla# Misal: # Kǝla fuwunna (**)# Fatowa yaktǝbe ( //) # Kawattǝ (*) # Subtraction ( - ) # Kǝska (+) # Kǝndo algebrabe buroye: # Bayan adǝga waltǝyin kuru waltǝyin bayanna adǝbe.# Array indidə integerbe. Array indi tədəna faidatin algebrabe garjin.# Operator-a operand-a indi tədəna. Array buro salakbedə kəndo algebrabe furtəbe mbeji, kuru sub do_algebra {
    my($operator, $operand) = @_;
","sub do_algebra {
    my ($operator, $operand) = @_;
    my $expression = $operand->[0];
    
    for my $i (0 .. $#$operator) {
        my $op = $operator->[$i];
        my $num = $operand->[$i + 1];
        
        if ($op eq '//') {
            $expression = ""int($expression / $num)"";
        } else {
            $expression .= "" $op $num"";
        }
    }
    
    return eval $expression;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&do_algebra;
        if(eq_deeply($candidate->([""**"", ""*"", ""+""], [2, 3, 4, 5]),37)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""+"", ""*"", ""-""], [2, 3, 4, 5]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""//"", ""*""], [7, 3, 4]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_161,knc_Latn,pl,"# Misalnzə'a.# Kәndo dәye jaza kәla jazabe dәga waltә zәktәyin.# Suro stringben harawa ba mbeji maa, string dǝga waltǝ.# awo gadedǝro adǝgai gǝne.# s[i] shima harawu, nәm kura-kura dә cidiyanzәga kәrәngәna au kәrәngәnza dә cidiyanzәga kәrәngәna, # Nyiye string s.# >>> solve(""1234"")
# ""4321""
# >>> solve(""ab"")
# ""AB""
# >>> solve(""#a@C"")
# ""#A@c""
sub solve {
    my($s) = @_;
","sub solve {
    my($s) = @_;
    if ($s =~ /[a-zA-Z]/) {
        $s =~ s/([a-z])|([A-Z])/defined $1 ? uc($1) : lc($2)/ge;
    } else {
        $s = reverse($s);
    }
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(""AsDf""),""aSdF"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1234""),""4321"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),""AB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#a@C""),""#A@c"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#AsdfW^45""),""#aSDFw^45"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#6@2""),""2@6#"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#$a^D""),""#$A^d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#ccc""),""#CCC"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_162,knc_Latn,pl,"# 'Text' dǝ kalkal ba ma, undef dǝga waltǝyin.# String 'text' təna, waltə md5 hash equivalent string nzə gozəna.# >>> string_to_md5(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
sub string_to_md5 {
    my($text) = @_;
","use Digest::MD5 qw(md5_hex);

    if ($text eq '') {
        return undef;
    }

    return md5_hex($text);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_to_md5;
        if(eq_deeply($candidate->(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_163,knc_Latn,pl,"# Misallo: # kuru b, futǝ kǝrmabe lan.# Lamba indi kəllata a kuru b, lamba evenbe a kuru b lan gojin.# >>> generate_integers(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers(10, 14)
# []
sub generate_integers {
    my($a, $b) = @_;
","sub generate_integers {
    my($a, $b) = @_;
    my @result;
    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);
    
    for my $i ($start..$end) {
        push @result, $i if $i % 2 == 0;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&generate_integers;
        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 89),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
