task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,mni_Beng,rb,"পীরিবা থ্রেশহোল্দ।পীরিবা মশীংশিংগী এরেজ অসিদা, দগী হেন্না নক্নবা মশীং অনি লৈব্রা হায়বদু য়েংসি।# >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)
# false
# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# true
def has_close_elements(numbers, threshold)
","def has_close_elements(numbers, threshold)
  numbers.combination(2).any? { |a, b| (a - b).abs < threshold }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_has_close_elements
    candidate = method(:has_close_elements)
    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))
    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))
    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))
    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))
    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))
    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))
    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))
  end
end
"
HumanEval_1,mni_Beng,rb,"ইনপুত স্ত্রিংদা লৈরিবা স্পেস অমহেক্তবু ইগনোর তৌরো.তোঙানবা কাংলুপশিং অসি চাং মান্ননা লৈ (অপনবা লৈতবা ব্রেক খুদিংমক মতিক চানা কুপশিল্লি) অমসুং অমগা অমগা নক্ননা লৈতে।গ্রুপশিংদুবু তোঙানবা স্ত্রিংশিংদা খায়দোক্লু অমসুং মদুগী এরেদু হল্লকউ.মসিগী ফঙ্কসন অসিগী ইনপুত অসি নেস্ত তৌরবা পরান্থেসশিংগী কাংলুপ কয়া য়াউবা স্ত্রিং অমনি। অদোমগী পান্দমদি # >>> separate_paren_groups.call(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
def separate_paren_groups(paren_string)
","def separate_paren_groups(paren_string)
  # Remove spaces from the string
  paren_string = paren_string.gsub("" "", """")
  
  result = []
  current_group = """"
  balance = 0

  paren_string.each_char do |char|
    current_group += char
    balance += 1 if char == '('
    balance -= 1 if char == ')'

    if balance == 0 && !current_group.empty?
      result << current_group
      current_group = """"
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_separate_paren_groups
    candidate = method(:separate_paren_groups)
    assert_equal([""(()())"", ""((()))"", ""()"", ""((())()())""], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([""()"", ""(())"", ""((()))"", ""(((())))""], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([""(()(())((())))""], candidate.call(""(()(())((())))""))
    assert_equal([""()"", ""(())"", ""(()())""], candidate.call(""( ) (( )) (( )( ))""))
  end
end
"
HumanEval_2,mni_Beng,rb,"নম্বর অদুগী দেসিমেল পার্টদু হল্লকই. (মথক্কী শরুক অসি মতম পুম্বদা 1দগী হেন্না পীকই)অমসুং ইন্তিজর পার্ত (মখাদা পীরবা মশীংদগী হেন্না পীকপা খ্বাইদগী চাউবা ইন্তিজর) অমসুং দেসিমেলশিং পোজিতিব ওইবা ফ্লোতিং পোইন্ত নম্বর অমা পীরবদি, মসিবু দা দিকমপোজিৎ তৌবা য়াই।# >>> truncate_number.call(3.5)
# 0.5
def truncate_number(number)
","def truncate_number(number)
  number - number.to_i
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_truncate_number
    candidate = method(:truncate_number)
    assert_equal(0.5, candidate.call(3.5))
    assert_equal(0.25, candidate.call(1.25))
    assert_equal(0.0, candidate.call(123.0))
  end
end
"
HumanEval_3,mni_Beng,rb,"মদুগী মতুংদা ফংসন অসিনা ত্রেৎ হন্দোক্কদবনি। মদু নৎত্রবদি মদু ফোলস হন্দোক্কদবনি।শূন্যগী মখাদা লৈরবদি অদোমগী থবক অসি শূন্যগী মখাদা লৈরবদি খঙদোকপা অদুনি, অমসুং বেঙ্ক একাউন্ত অমদা শেল থাদবা অমসুং লৌথোকপগী থবক কয়া অমা পীরি।# >>> below_zero.call([1, 2, 3])
# false
# >>> below_zero.call([1, 2, -4, 5])
# true
def below_zero(operations)
","def below_zero(operations)
  balance = 0
  operations.each do |operation|
    balance += operation
    return true if balance < 0
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_zero
    candidate = method(:below_zero)
    assert_equal(false, candidate.call([]))
    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))
    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))
    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))
    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))
    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))
  end
end
"
HumanEval_4,mni_Beng,rb,"MAD = চাংচত্তা। x - x_মেন্না।ইলিমেন্ত অমসুং সেন্তরপোইন্ত (মসিগী কেস অসিদা মেজিন):মেন্যন এবসোলুত দিভিয়ারেন্স অসি অমগা অমগা দেতা সেৎ অসিগী ময়াই ওইবা অদুগী অকোয়বদা লৈ।ইনপুত নম্বরশিংগী অয়াবা পীরবা এরে অমগীদমক, মেন্যন এবসোলুত দিভিয়েসনগী মশিং থী।# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])
# 1.0
def mean_absolute_deviation(numbers)
","def mean_absolute_deviation(numbers)
  mean = numbers.sum.to_f / numbers.size
  deviations = numbers.map { |num| (num - mean).abs }
  deviations.sum / numbers.size
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_mean_absolute_deviation
    candidate = method(:mean_absolute_deviation)
    assert_equal(0.5, candidate.call([1.0, 2.0]))
    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))
    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
  end
end
"
HumanEval_5,mni_Beng,rb,"ইনপুত এরেগী পরিং নাইবা ইলিমেন্ত অনিগী মরক্তা নম্বর 'দিলিমিতেতর' অমা হাপচিনবিয়ু ∀numbers' # >>> intersperse.call([], 4)
# []
# >>> intersperse.call([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
def intersperse(numbers, delimeter)
","def intersperse(numbers, delimeter)
  return numbers if numbers.empty?
  result = []
  numbers.each_with_index do |num, index|
    result << num
    result << delimeter unless index == numbers.size - 1
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersperse
    candidate = method(:intersperse)
    assert_equal([], candidate.call([], 7))
    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))
    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))
  end
end
"
HumanEval_6,mni_Beng,rb,"খুদম ওইনা (() (()) দা নেস্তিংগী খ্বাইদগী ৱাংবা থাক অনি লৈরি অদুগা ((())) দা অহুম লৈ। কাংলুপ খুদিংমক্কী ওইনা, পরানতেসকী খ্বাইদগী অঙম্বা থাক্কী এনস্তেজিং পুথোকপা।মসিগী ফঙ্কসন অসিগী ইনপুত অসি স্পেসশিংনা খায়দোকপা নেস্ত তৌরবা পরান্থেসিসশিংগীদমক মলতিপল গ্রুপশিংবু মহুৎ শিনবা স্ত্রিং অমনি।# >>> parse_nested_parens.call(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
def parse_nested_parens(paren_string)
","def parse_nested_parens(paren_string)
  paren_string.split.map do |group|
    max_depth = current_depth = 0
    group.chars.each do |char|
      if char == '('
        current_depth += 1
        max_depth = [max_depth, current_depth].max
      elsif char == ')'
        current_depth -= 1
      end
    end
    max_depth
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_nested_parens
    candidate = method(:parse_nested_parens)
    assert_equal([2, 3, 1, 3], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([1, 2, 3, 4], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([4], candidate.call(""(()(())((())))""))
  end
end
"
HumanEval_7,mni_Beng,rb,"ইনপুত মেত্রিক্সকী স্ত্রিংশিং অসি পীরিবা সবস্ত্রিং য়াওরিবা স্ত্রিংশিংগীদমক খক্তমক ফিল্তর তৌই# >>> filter_by_substring.call([], ""a"")
# []
# >>> filter_by_substring.call([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
def filter_by_substring(strings, substring)
","def filter_by_substring(strings, substring)
  strings.select { |string| string.include?(substring) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_substring
    candidate = method(:filter_by_substring)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
    assert_equal([""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""))
    assert_equal([""grunt"", ""prune""], candidate.call([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""))
  end
end
"
HumanEval_8,mni_Beng,rb,"খূৎশুমল অসি 0গা মান্নগদবনি অমসুং খূৎশুমলগী পোত্থোক অসি 1গা মান্নগদবনি।ইন্তিজরশিংগী অরে অমা পীরিবগীদমক্তা, এরে অমগী ইন্তিজর পুম্নমক্কী অপুনবা অমসুং পোত্থোক য়াওবা এরে অমা হল্লকই.# >>> sum_product.call([])
# [0, 1]
# >>> sum_product.call([1, 2, 3, 4])
# [10, 24]
def sum_product(numbers)
","def sum_product(numbers)
  sum = numbers.reduce(0, :+)
  product = numbers.reduce(1, :*)
  [sum, product]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_product
    candidate = method(:sum_product)
    assert_equal([0, 1], candidate.call([]))
    assert_equal([3, 1], candidate.call([1, 1, 1]))
    assert_equal([100, 0], candidate.call([100, 0]))
    assert_equal([15, 105], candidate.call([3, 5, 7]))
    assert_equal([10, 10], candidate.call([10]))
  end
end
"
HumanEval_9,mni_Beng,rb,"মথং-মনাও নাইনা।পীরবা ইন্তিজরশিংগী এরে অমদগী, পীরবা মখৈ ফংবা খ্বাইদগী য়াম্বা এলিমেন্তকী এরে অমা শেম্মু # >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
def rolling_max(numbers)
","def rolling_max(numbers)
  max_so_far = numbers.first
  numbers.map do |num|
    max_so_far = [max_so_far, num].max
  end
end

# Example usage:
# puts rolling_max([1, 2, 3, 2, 3, 4, 2]).inspect","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rolling_max
    candidate = method(:rolling_max)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))
    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))
  end
end
"
HumanEval_10,mni_Beng,rb,"- স্ত্রিংগী অরোইবদা, পালিন্দ্রোমিক সফিক্সকী মমাংদা লাকপা স্ত্রিং প্রিফিক্স অমা হাপচিনবা।- পলিন্দ্রোম ওইরিবা পীরিবা স্ত্রিংগী খ্বাইদগী শাংবা পোস্তফিক্স অদু ফংলু. অলগোরিথমগী ৱাখল্লোন অসি য়াম্না লায়বনি:পীরিবা স্ত্রিং অমদগী হৌবা খ্বাইদগী অতেনবা পালিন্দ্রোম অদু ফংলু. # >>> make_palindrome.call("""")
# """"
# >>> make_palindrome.call(""cat"")
# ""catac""
# >>> make_palindrome.call(""cata"")
# ""catac""
def make_palindrome(string)
","def make_palindrome(string)
  return string if string.empty?

  def is_palindrome?(s)
    s == s.reverse
  end

  (0...string.length).reverse_each do |i|
    if is_palindrome?(string[i..-1])
      return string + string[0...i].reverse
    end
  end

  string
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_palindrome
    candidate = method(:make_palindrome)
    assert_equal("""", candidate.call(""""))
    assert_equal(""x"", candidate.call(""x""))
    assert_equal(""xyzyx"", candidate.call(""xyz""))
    assert_equal(""xyx"", candidate.call(""xyx""))
    assert_equal(""jerryrrej"", candidate.call(""jerry""))
  end
end
"
HumanEval_11,mni_Beng,rb,"বাইনারি XOR অসি ইনপুতশিং অসিদা পাংথোকউ অমসুং ফল অদু স্ত্রিং অমা ওইনা হল্লকউ. ইনপুত অসি 1 অমসুং 0 খক্তগী ওইবা a অমসুং b স্ত্রিং অনিনি।# >>> string_xor.call(""010"", ""110"")
# ""100""
def string_xor(a, b)
","def string_xor(a, b)
  result = """"
  a.length.times do |i|
    result << (a[i] == b[i] ? ""0"" : ""1"")
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_xor
    candidate = method(:string_xor)
    assert_equal(""010010"", candidate.call(""111000"", ""101010""))
    assert_equal(""0"", candidate.call(""1"", ""1""))
    assert_equal(""0101"", candidate.call(""0101"", ""0000""))
  end
end
"
HumanEval_12,mni_Beng,rb,"ইনপুত এরেগী মশিং থীদ্রবদি, শিং অসি শিং অমগুম্না হন্না পীগনি.মল্তিপল শিংগী কেসতা অহানবা অমা হল্লকই।# >>> longest.call([])
# nil
# >>> longest.call([""a"", ""b"", ""c""])
# ""a""
# >>> longest.call([""a"", ""bb"", ""ccc""])
# ""ccc""
def longest(strings)
","def longest(strings)
  return nil if strings.empty?
  strings.max_by(&:length)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_longest
    candidate = method(:longest)
    assert_equal(nil, candidate.call([]))
    assert_equal(""x"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""zzzz"", candidate.call([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]))
  end
end
"
HumanEval_13,mni_Beng,rb,"অপুনবা মশীং a অমসুং b অনিগী খ্বাইদগী চাউবা কমন দিভিজর অমা হল্লকপা # >>> greatest_common_divisor.call(3, 5)
# 1
# >>> greatest_common_divisor.call(25, 15)
# 5
def greatest_common_divisor(a, b)
","def greatest_common_divisor(a, b)
  while b != 0
    a, b = b, a % b
  end
  a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_greatest_common_divisor
    candidate = method(:greatest_common_divisor)
    assert_equal(1, candidate.call(3, 7))
    assert_equal(5, candidate.call(10, 15))
    assert_equal(7, candidate.call(49, 14))
    assert_equal(12, candidate.call(144, 60))
  end
end
"
HumanEval_14,mni_Beng,rb,"ইনপুত স্ত্রিংগী খ্বাইদগী অতেনবাদগী খ্বাইদগী শাংবা ফাওবগী প্রিফিক্স পুম্নমক্কী এরে অমা হল্লকই# >>> all_prefixes.call(""abc"")
# [""a"", ""ab"", ""abc""]
def all_prefixes(string)
","def all_prefixes(string)
  (1..string.length).map { |i| string[0, i] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_all_prefixes
    candidate = method(:all_prefixes)
    assert_equal([], candidate.call(""""))
    assert_equal([""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""], candidate.call(""asdfgh""))
    assert_equal([""W"", ""WW"", ""WWW""], candidate.call(""WWW""))
  end
end
"
HumanEval_15,mni_Beng,rb,"স্পেস-দিলিমিতেদ নম্বরশিং য়াওবা স্ত্রিং অমা 0দগী হৌদুনা n ফাওবা য়াওনা হল্লকই. # >>> string_sequence.call(0)
# ""0""
# >>> string_sequence.call(5)
# ""0 1 2 3 4 5""
def string_sequence(n)
","def string_sequence(n)
  (0..n).to_a.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_sequence
    candidate = method(:string_sequence)
    assert_equal(""0"", candidate.call(0))
    assert_equal(""0 1 2 3"", candidate.call(3))
    assert_equal(""0 1 2 3 4 5 6 7 8 9 10"", candidate.call(10))
  end
end
"
HumanEval_16,mni_Beng,rb,"স্ত্রিং অমা পীরবদি, মসিদা করম্বা মখলগী ময়েকশিং য়াওবগে হায়বদু খঙদোকউ (কেস অমহেক্তগী খেন্নবা লৈতনা) ।# >>> count_distinct_characters.call(""xyzXYZ"")
# 3
# >>> count_distinct_characters.call(""Jerry"")
# 4
def count_distinct_characters(string)
","def count_distinct_characters(string)
  string.downcase.chars.uniq.count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_distinct_characters
    candidate = method(:count_distinct_characters)
    assert_equal(0, candidate.call(""""))
    assert_equal(5, candidate.call(""abcde""))
    assert_equal(5, candidate.call(""abcdecadeCADE""))
    assert_equal(1, candidate.call(""aaaaAAAAaaaa""))
    assert_equal(5, candidate.call(""Jerry jERRY JeRRRY""))
  end
end
"
HumanEval_17,mni_Beng,rb,"'হায়' - কোয়ার্টার নোত, মতম অমখক্তং চৎলি।'ও' - নোট ময়াই, বিট অনি লৈ।'ও' - নোত পুম্নমক, বিৎ মরি লৈ।মসিদা ৱারী অমা লৈ:অরোইবা নত্তে।অদোমগী থবক অসি স্ত্রিং অসিবু পার্স তৌবনি অমসুং ইন্তিজরশিংগী এরে অমা হল্লকপনি মদুগী মখাতানা কয়াম য়াম্না থাবগে হায়বদুনি ।মসিগী ফঙ্কসন অসিগী ইনপুত অসি অখন্নবা ASCII ফোর্মেত অমদা ম্যুজিকেল নোৎশিং উৎলিবা স্ত্রিং অমনি।# >>> parse_music.call(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
def parse_music(music_string)
","def parse_music(music_string)
  # Split the input string into individual notes.
  notes = music_string.split

  # Map each note to its corresponding number of beats.
  notes.map do |note|
    case note
    when 'o'
      4
    when 'o|'
      2
    when '.|'
      1
    else
      0
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_music
    candidate = method(:parse_music)
    assert_equal([], candidate.call(""""))
    assert_equal([4, 4, 4, 4], candidate.call(""o o o o""))
    assert_equal([1, 1, 1, 1], candidate.call("".| .| .| .|""))
    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(""o| o| .| .| o o o o""))
    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(""o| .| o| .| o o| o o|""))
  end
end
"
HumanEval_18,mni_Beng,rb,"পীরিবা সবস্ত্রিং অদু ওরিজিনেল স্ত্রিং অদুদা কয়া কয়ারক হন্না ফংলিবগে হায়বদু ফংলু। অমগা অমগা মান্নরিবা কেসশিং অদু মশীং থী।# >>> how_many_times.call("""", ""a"")
# 0
# >>> how_many_times.call(""aaa"", ""a"")
# 3
# >>> how_many_times.call(""aaaa"", ""aa"")
# 3
def how_many_times(string, substring)
","def how_many_times(string, substring)
  return 0 if substring.empty?
  count = 0
  i = 0
  while i <= string.length - substring.length
    if string[i, substring.length] == substring
      count += 1
    end
    i += 1
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_how_many_times
    candidate = method(:how_many_times)
    assert_equal(0, candidate.call("""", ""x""))
    assert_equal(4, candidate.call(""xyxyxyx"", ""x""))
    assert_equal(4, candidate.call(""cacacacac"", ""cac""))
    assert_equal(1, candidate.call(""john doe"", ""john""))
  end
end
"
HumanEval_19,mni_Beng,rb,"খ্বাইদগী পীকপাদগী খ্বাইদগী চাউবা ফাওবা মশিং য়াওবা স্ত্রিংদু হল্লকইচৎনবা য়াবা অপাম্বশিংদি 'শূন্য', 'অমুক', 'অহুম', 'অতুম', 'নুংথৌ', 'নঙা', ' তরুক', 'সপ্তম', 'অটহুম' অমসুং 'নৌ'।ইনপুত অসি 'নিল' দগী 'নিন' ফাওবগী স্পেস-দিলিমিতেদ ন্যুমরেলশিংগী স্ত্রিং অমনি।# >>> sort_numbers.call(""three one five"")
# ""one three five""
def sort_numbers(numbers)
","def sort_numbers(numbers)
  numeral_map = {
    'zero' => 0,
    'one' => 1,
    'two' => 2,
    'three' => 3,
    'four' => 4,
    'five' => 5,
    'six' => 6,
    'seven' => 7,
    'eight' => 8,
    'nine' => 9
  }

  number_words = numbers.split
  sorted_numbers = number_words.sort_by { |word| numeral_map[word] }
  sorted_numbers.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_numbers
    candidate = method(:sort_numbers)
    assert_equal("""", candidate.call(""""))
    assert_equal(""three"", candidate.call(""three""))
    assert_equal(""three five nine"", candidate.call(""three five nine""))
    assert_equal(""zero four five seven eight nine"", candidate.call(""five zero four seven nine eight""))
    assert_equal(""zero one two three four five six"", candidate.call(""six five four three two one zero""))
  end
end
"
HumanEval_20,mni_Beng,rb,"অতোপ্পা মশিংশিংশিং অদু মথং-মনাও নাইনা হন্দোক্লু (অমুক পীকপা মশিং, হেন্না চাউবা মশিং) ।পীরিবা নম্বরশিংগী এরে (অমুক্কী ওইনা অনীগী শাংবদগী) অমগা অমগা খ্বাইদগী নক্নবা অনি খনবিয়ু অমসুং হল্লকপীয়ু # >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
def find_closest_elements(numbers)
","def find_closest_elements(numbers)
  sorted_numbers = numbers.sort
  closest_pair = [sorted_numbers[0], sorted_numbers[1]]
  min_difference = (sorted_numbers[1] - sorted_numbers[0]).abs

  (1...(sorted_numbers.length - 1)).each do |i|
    current_difference = (sorted_numbers[i + 1] - sorted_numbers[i]).abs
    if current_difference < min_difference
      min_difference = current_difference
      closest_pair = [sorted_numbers[i], sorted_numbers[i + 1]]
    end
  end

  closest_pair
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_closest_elements
    candidate = method(:find_closest_elements)
    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))
    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))
    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))
    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))
    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))
  end
end
"
HumanEval_21,mni_Beng,rb,"অসুম্না খ্বাইদগী পীকপা মশীং অসি 0 ওইগনি অমসুং খ্বাইদগী চাউবা মশীং অসি 1 ওইগনি ।মশীংগী এরে অমা (অমুক্কী ওইনা ইলিমেন্ত অনিগী) পীরবদি, মদুগী এরে অদুদা লিনিয়র ত্রান্সফোর্মেসন অমা এপ্লাই তৌ, # >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
def rescale_to_unit(numbers)
","def rescale_to_unit(numbers)
  min = numbers.min
  max = numbers.max
  range = max - min
  return numbers.map { |num| (num - min) / range.to_f }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rescale_to_unit
    candidate = method(:rescale_to_unit)
    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))
    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))
    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))
  end
end
"
HumanEval_22,mni_Beng,rb,"ইন্তিজরশিংগীদমক পীরিবা rbthon ভেল্যুশিংগী এরে অমা হেক্তা ফিল্তর তৌরো # >>> filter_integers.call([""a"", 3.14, 5])
# [5]
# >>> filter_integers.call([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
def filter_integers(values)
","def filter_integers(values)
  values.select { |value| value.is_a?(Integer) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_integers
    candidate = method(:filter_integers)
    assert_equal([], candidate.call([]))
    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, ""adasd""]))
    assert_equal([3, 3, 3], candidate.call([3, ""c"", 3, 3, ""a"", ""b""]))
  end
end
"
HumanEval_23,mni_Beng,rb,"পীরিবা স্ত্রিংগী রিটর্ন লেংথক # >>> strlen.call("""")
# 0
# >>> strlen.call(""abc"")
# 3
def strlen(string)
","strlen = lambda do |string|
  string.length
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strlen
    candidate = method(:strlen)
    assert_equal(0, candidate.call(""""))
    assert_equal(1, candidate.call(""x""))
    assert_equal(9, candidate.call(""asdasnakj""))
  end
end
"
HumanEval_24,mni_Beng,rb,"পীরিবা n মশীং অমগীদমক, nদগী হেন্না পীকপা, nবু মান্ননা য়েন্থোকপা খ্বাইদগী চাওবা মশীংদু খংদোকউ।# >>> largest_divisor.call(15)
# 5
def largest_divisor(n)
","def largest_divisor(n)
  (n - 1).downto(1) do |i|
    return i if n % i == 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_divisor
    candidate = method(:largest_divisor)
    assert_equal(1, candidate.call(3))
    assert_equal(1, candidate.call(7))
    assert_equal(5, candidate.call(10))
    assert_equal(50, candidate.call(100))
    assert_equal(7, candidate.call(49))
  end
end
"
HumanEval_25,mni_Beng,rb,"ইনপুত নম্বর অসি ফেক্তর পুম্নমক্কী পোত্থোক অদুগা মান্নগদবনি।ফেক্তরশিং অসিগী মনুংদা অমমম অসি ফেক্তরাইজেসনদা হেক হেক থোক্লকপগা মান্নবা মশীংদা এরে তৌগদবনি।পীরিবা ইন্তিজর অমগী প্রাইম ফেক্তরশিংগী এরেবু খ্বাইদগী পীকপাদগী খ্বাইদগী চাউবা ফাওবগী মথং-মনাওদা হল্লকই।# >>> factorize.call(8)
# [2, 2, 2]
# >>> factorize.call(25)
# [5, 5]
# >>> factorize.call(70)
# [2, 5, 7]
def factorize(n)
","def factorize(n)
  factors = []
  divisor = 2
  while n > 1
    while n % divisor == 0
      factors << divisor
      n /= divisor
    end
    divisor += 1
  end
  factors
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_factorize
    candidate = method(:factorize)
    assert_equal([2], candidate.call(2))
    assert_equal([2, 2], candidate.call(4))
    assert_equal([2, 2, 2], candidate.call(8))
    assert_equal([3, 19], candidate.call(57))
    assert_equal([3, 3, 19, 19], candidate.call(3249))
    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))
    assert_equal([3, 19, 19, 19], candidate.call(20577))
    assert_equal([2, 3, 3], candidate.call(18))
  end
end
"
HumanEval_26,mni_Beng,rb,"ইনপুত অদুদা য়াওরিবা ইলিমেন্তশিংগী মথং-মনাওদু চপ মান্ননা থম্মু।ইন্তিজরশিংগী এরে অমদগী, অমদগী হেন্না থোকপা ইলিমেন্ত পুম্নমক লৌথোকউ.# >>> remove_duplicates.call([1, 2, 3, 2, 4])
# [1, 3, 4]
def remove_duplicates(numbers)
","def remove_duplicates(numbers)
  numbers.select { |num| numbers.count(num) == 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_duplicates
    candidate = method(:remove_duplicates)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))
  end
end
"
HumanEval_27,mni_Beng,rb,"পীরিবা স্ত্রিং অমগীদমক, অপ্পরকেস কেরেক্তরশিং অপ্পরকেস অমসুং অপ্পরকেস কেরেক্তরশিং অপ্পরকেসদা ওন্থোকউ. # >>> flip_case.call(""Hello"")
# ""hELLO""
def flip_case(string)
","def flip_case(string)
  string.swapcase
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_flip_case
    candidate = method(:flip_case)
    assert_equal("""", candidate.call(""""))
    assert_equal(""hELLO!"", candidate.call(""Hello!""))
    assert_equal(""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"", candidate.call(""These violent delights have violent ends""))
  end
end
"
HumanEval_28,mni_Beng,rb,"স্ত্রিংশিংগী পরিংশিংবু স্ত্রিং অমখক্তদা পুনশিন্নবা # >>> concatenate.call([])
# """"
# >>> concatenate.call([""a"", ""b"", ""c""])
# ""abc""
def concatenate(strings)
","def concatenate(strings)
  strings.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_concatenate
    candidate = method(:concatenate)
    assert_equal("""", candidate.call([]))
    assert_equal(""xyz"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""xyzwk"", candidate.call([""x"", ""y"", ""z"", ""w"", ""k""]))
  end
end
"
HumanEval_29,mni_Beng,rb,"পীরিবা প্রিফিক্স অমগা লোয়ননা হৌবা স্ত্রিংশিংগী ইনপুত এরে অমখক্তমক ফিল্তর তৌ।# >>> filter_by_prefix.call([], ""a"")
# []
# >>> filter_by_prefix.call([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
def filter_by_prefix(strings, prefix)
","def filter_by_prefix(strings, prefix)
  strings.select { |string| string.start_with?(prefix) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_prefix
    candidate = method(:filter_by_prefix)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
  end
end
"
HumanEval_30,mni_Beng,rb,"এরেদা লৈবা পোজিতিব নম্বরশিংখক্তমক হল্লকই.# >>> get_positive.call([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
def get_positive(l)
","get_positive = lambda do |l|
  l.select { |num| num > 0 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_positive
    candidate = method(:get_positive)
    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))
    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))
    assert_equal([], candidate.call([-1, -2]))
    assert_equal([], candidate.call([]))
  end
end
"
HumanEval_31,mni_Beng,rb,"পীরিবা মশীং অদু প্রাইম ওইরবদি চুম্মি, অদুগা করিগুম্বা নত্ত্রবদি ফাল্ গ হায়না হল্লকই।# >>> is_prime.call(6)
# false
# >>> is_prime.call(101)
# true
# >>> is_prime.call(11)
# true
# >>> is_prime.call(13441)
# true
# >>> is_prime.call(61)
# true
# >>> is_prime.call(4)
# false
# >>> is_prime.call(1)
# false
def is_prime(n)
","is_prime = lambda do |n|
  return false if n <= 1
  return true if n == 2
  return false if n.even?

  max_divisor = Math.sqrt(n).to_i
  (3..max_divisor).step(2).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_prime
    candidate = method(:is_prime)
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(101))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(13441))
    assert_equal(true, candidate.call(61))
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(1))
    assert_equal(true, candidate.call(5))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(17))
    assert_equal(false, candidate.call(85))
    assert_equal(false, candidate.call(77))
    assert_equal(false, candidate.call(255379))
  end
end
"
HumanEval_33,mni_Beng,rb,"ইন্দেক্সশিং অসিগা মান্নবা ভেল্যুশিংগা মান্ননা, অদুবু মখল খায়দোকপা।l' অসি ইন্দিক্সশিং অদুদা lগা মান্নৈ, অদুগা মসিগী ভেল্যুশিং অদু ইন্দিক্সশিং অদুদা মান্নৈ, অদুগা মখোয়শিং অদুদি তরেৎনা য়েন্থোকপা য়াদে।মসিগী ফঙ্কসন্না এরে l অমা লৌই অমসুং এরে l' অমা রিটর্ন তৌই ।# >>> sort_third.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
def sort_third(l)
","def sort_third(l)
  divisible_by_three = l.each_with_index.select { |_, idx| idx % 3 == 0 }.map(&:first).sort
  l.each_with_index.map { |val, idx| idx % 3 == 0 ? divisible_by_three.shift : val }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_third
    candidate = method(:sort_third)
    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))
    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))
    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))
    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))
  end
end
"
HumanEval_34,mni_Beng,rb,"এরে অমদা মথং-মনাও নাইরবা মখলগী মচাকশিং হল্লকই# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
def unique(l)
","def unique(l)
  l.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique
    candidate = method(:unique)
    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_35,mni_Beng,rb,"এরেদা খ্বাইদগী য়াম্বা ইলিমেন্ত হল্লকই.# >>> max_element.call([1, 2, 3])
# 3
# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
def max_element(l)
","def max_element(l)
  l.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_element
    candidate = method(:max_element)
    assert_equal(3, candidate.call([1, 2, 3]))
    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))
  end
end
"
HumanEval_36,mni_Beng,rb,"দিজিৎ 7 অসি 11 নত্ত্রগা 13 দা য়েন্থোকপা য়াবা nদগী হন্থবা ইন্তিজরশিংদা থোকপা মশীংদু হল্লকই. # >>> fizz_buzz.call(50)
# 0
# >>> fizz_buzz.call(78)
# 2
# >>> fizz_buzz.call(79)
# 3
def fizz_buzz(n)
","def fizz_buzz(n)
  count = 0
  (1...n).each do |i|
    if i % 11 == 0 || i % 13 == 0
      count += i.to_s.count('7')
    end
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fizz_buzz
    candidate = method(:fizz_buzz)
    assert_equal(0, candidate.call(50))
    assert_equal(2, candidate.call(78))
    assert_equal(3, candidate.call(79))
    assert_equal(3, candidate.call(100))
    assert_equal(6, candidate.call(200))
    assert_equal(192, candidate.call(4000))
    assert_equal(639, candidate.call(10000))
    assert_equal(8026, candidate.call(100000))
  end
end
"
HumanEval_37,mni_Beng,rb,"lগী ইন্দিসিস মশীং অমমমগী ভেল্যুদা, অদুবু মখল খায়দোকপা।l' অসি ইদর ইন্দিক্সশিংদা lগা মান্নৈ, অদুগা ইদর ইন্দিক্সশিংদা মসিগী ভেল্যুশিং অসি মান্নৈ ।মসিগী ফঙ্কসন্না এরে l অমা লৌই অমসুং এরে l' অমা রিটর্ন তৌই ।# >>> sort_even.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_even.call([5, 6, 3, 4])
# [3, 6, 5, 4]
def sort_even(l)
","def sort_even(l)
  even_indices = l.each_index.select { |i| i.even? }
  even_values = even_indices.map { |i| l[i] }.sort
  
  even_index = 0
  l.each_with_index.map do |value, index|
    if index.even?
      even_values[even_index].tap { even_index += 1 }
    else
      value
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_even
    candidate = method(:sort_even)
    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))
    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
  end
end
"
HumanEval_39,mni_Beng,rb,"prime_fib না ফিবোনাক্সি মশীং অমা ওইরিবা অমসুং প্রাইম ওইবা n-th নম্বর হল্লকই। # >>> prime_fib.call(1)
# 2
# >>> prime_fib.call(2)
# 3
# >>> prime_fib.call(3)
# 5
# >>> prime_fib.call(4)
# 13
# >>> prime_fib.call(5)
# 89
def prime_fib(n)
","def prime_fib(n)
  require 'prime'
  
  fibs = Enumerator.new do |y|
    a, b = 0, 1
    loop do
      a, b = b, a + b
      y << b
    end
  end
  
  prime_fibs = fibs.lazy.select { |fib| Prime.prime?(fib) }
  prime_fibs.first(n).last
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_fib
    candidate = method(:prime_fib)
    assert_equal(2, candidate.call(1))
    assert_equal(3, candidate.call(2))
    assert_equal(5, candidate.call(3))
    assert_equal(13, candidate.call(4))
    assert_equal(89, candidate.call(5))
    assert_equal(233, candidate.call(6))
    assert_equal(1597, candidate.call(7))
    assert_equal(28657, candidate.call(8))
    assert_equal(514229, candidate.call(9))
    assert_equal(433494437, candidate.call(10))
  end
end
"
HumanEval_40,mni_Beng,rb,"শম্না জিরো ওইগনি, অমসুং অতোপ্পা মওংদা ফোলস ওইগনি।করিগুম্বা এরে অদুদা তোঙানবা এলিমেন্ত অহুম লৈরবদি মসি তশেংবনি হায়না হল্লকই।triples_sum_to_zeroনা ইন্তিজরশিংগী এরে অমা ইনপুৎ ওইনা লৌই.# >>> triples_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> triples_sum_to_zero.call([1, 3, -2, 1])
# true
# >>> triples_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])
# true
# >>> triples_sum_to_zero.call([1])
# false
def triples_sum_to_zero(l)
","def triples_sum_to_zero(l)
  n = l.length
  (0...n-2).each do |i|
    ((i+1)...n-1).each do |j|
      ((j+1)...n).each do |k|
        return true if l[i] + l[j] + l[k] == 0
      end
    end
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triples_sum_to_zero
    candidate = method(:triples_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, 5, -1]))
    assert_equal(true, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(false, candidate.call([1, 2, 5, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(false, candidate.call([1, 3, 5, -100]))
    assert_equal(false, candidate.call([100, 3, 5, -100]))
  end
end
"
HumanEval_41,mni_Beng,rb,"হায়রিবা ফংসন অসিনা অসিগুম্বা কোলিজনগী মশীং অদু পুথোকই।মখোয়গী ত্রেজেক্তরীদা মখোয়না থেংনবা তৌদ্রবগুম্না।অদুম ওইনমক, কারশিং অসি মপাঙ্গল কনবা অমসুং মপাঙ্গল লৈ; মসিনা মরম ওইদুনা মখোয়না লেপ্তনা চৎলি।করিগুম্বা কার অমনা তংদুদগী তংদুদা চৎলগা তংদুদগী তংদুদা চৎলিবা কার অমদা থেংনবা মতমদাগাড়ী খুদিংমক চপ মান্নবা থুনা চৎলি। গাড়ী অনি থেংনবা য়াই হায়রি।গাড়ী অনিগী সেত অনি অসি য়োংচাক্কী মখুৎ অদুদগী য়াম্না লাপ্না চৎলি।গাড়ী nনা লামথংদগী তংদুদা চৎলি; অমুক্তং, গাড়ী nগী তোঙানবা সেত অমা মপুং ফানা অচুম্বা, মপুং ফানা শাংদোক্লবা লম্বী অমা খল্লু।def car_race_collision(n)
","def car_race_collision(n)
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_car_race_collision
    candidate = method(:car_race_collision)
    assert_equal(4, candidate.call(2))
    assert_equal(9, candidate.call(3))
    assert_equal(16, candidate.call(4))
    assert_equal(64, candidate.call(8))
    assert_equal(100, candidate.call(10))
  end
end
"
HumanEval_42,mni_Beng,rb,"এলিমেন্তশিং ১না ইনক্রিমেন্ত তৌরবা এরে অমা হল্লকই.# >>> incr_list.call([1, 2, 3])
# [2, 3, 4]
# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
def incr_list(l)
","def incr_list(l)
  l.map { |x| x + 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_incr_list
    candidate = method(:incr_list)
    assert_equal([], candidate.call([]))
    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))
    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_43,mni_Beng,rb,"শম্না জিরো ওইগনি, অমসুং অতোপ্পা মওংদা ফোলস ওইগনি।করিগুম্বা এরে অদুদা তোঙানবা এলিমেন্ত অনি লৈরবদি মসি ত্রেৎ ওইনা হল্লকইpairs_sum_to_zeroনা ইন্তিজরশিংগী এরে অমা ইনপুৎ ওইনা লৌই.# >>> pairs_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> pairs_sum_to_zero.call([1, 3, -2, 1])
# false
# >>> pairs_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])
# true
# >>> pairs_sum_to_zero.call([1])
# false
def pairs_sum_to_zero(l)
","def pairs_sum_to_zero(l)
  num_set = l.to_set
  l.each do |num|
    return true if num != 0 && num_set.include?(-num)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pairs_sum_to_zero
    candidate = method(:pairs_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))
  end
end
"
HumanEval_44,mni_Beng,rb,"বেজ নম্বরশিং অসি 10দগী হন্থৈ।কনভর্সন তৌরবা মতুংদা স্ত্রিং রিপ্রজেন্তেসন হল্লকই.ইনপুত নম্বর x গী ন্যুমরিকেল বেজ অসি বেজদা হোংবা।# >>> change_base.call(8, 3)
# ""22""
# >>> change_base.call(8, 2)
# ""1000""
# >>> change_base.call(7, 2)
# ""111""
def change_base(x, base)
","def change_base(x, base)
  return '0' if x == 0
  digits = []
  while x > 0
    digits << (x % base).to_s
    x /= base
  end
  digits.reverse.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_change_base
    candidate = method(:change_base)
    assert_equal(""22"", candidate.call(8, 3))
    assert_equal(""100"", candidate.call(9, 3))
    assert_equal(""11101010"", candidate.call(234, 2))
    assert_equal(""10000"", candidate.call(16, 2))
    assert_equal(""1000"", candidate.call(8, 2))
    assert_equal(""111"", candidate.call(7, 2))
    assert_equal(""2"", candidate.call(2, 3))
    assert_equal(""3"", candidate.call(3, 4))
    assert_equal(""4"", candidate.call(4, 5))
    assert_equal(""5"", candidate.call(5, 6))
    assert_equal(""6"", candidate.call(6, 7))
    assert_equal(""7"", candidate.call(7, 8))
  end
end
"
HumanEval_45,mni_Beng,rb,"ত্রিএঙ্গল অমগী সাইদ অমগী অশাংবা অমসুং অৱাংবা রিটর্ন এরিয়া পীবা।# >>> triangle_area.call(5, 3)
# 7.5
def triangle_area(a, h)
","def triangle_area(a, h)
  (a * h) / 2.0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(7.5, candidate.call(5, 3))
    assert_equal(2.0, candidate.call(2, 2))
    assert_equal(40.0, candidate.call(10, 8))
  end
end
"
HumanEval_46,mni_Beng,rb,"অনুগ্রহপূর্বক fib4 নম্বর সিক্বেন্সকী n-শুবা ইলিমেন্তপু মপুং ফানা কম্প্যুত তৌনবা ফংসন অমা ইবিয়ু। রিকরসন শিজিন্নরোইদবনি।ফিবর 4 (n) -> ফিবর 4 (n-1) + ফিবর 4 (n-2) + ফিবর 4 (n-3) + ফিবর 4 (n-4) ।ফিব 4 ((3) -> 0 ফিব 4 ((2) -> 2 ফিব 4 ((1) -> 0 ফিব 4 ((0) -> 0 Fib4 নম্বর সিক্বেন্স অসি মখাদা পীরিবা অসিগুম্না ৱাহন্থোক পীরিবা ফিবোনাক্সি সিক্বেন্সকা মান্নবা সিক্বেন্স অমনি:# >>> fib4.call(5)
# 4
# >>> fib4.call(6)
# 8
# >>> fib4.call(7)
# 14
def fib4(n)
","def fib4(n)
  return 0 if n == 0 || n == 1 || n == 3
  return 2 if n == 2

  fib4_seq = [0, 0, 2, 0]
  (4..n).each do |i|
    fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4]
  end
  fib4_seq[n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib4
    candidate = method(:fib4)
    assert_equal(4, candidate.call(5))
    assert_equal(28, candidate.call(8))
    assert_equal(104, candidate.call(10))
    assert_equal(386, candidate.call(12))
  end
end
"
HumanEval_47,mni_Beng,rb,"এরে lদা লৈরিবা ইলিমেন্তশিংগী মেদিয়নদু হল্লকই. # >>> median.call([3, 1, 2, 4, 5])
# 3
# >>> median.call([-10, 4, 6, 1000, 10, 20])
# 15.0
def median(l)
","def median(l)
  sorted = l.sort
  len = sorted.length
  if len.odd?
    sorted[len / 2]
  else
    (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_median
    candidate = method(:median)
    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))
    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))
    assert_equal(5, candidate.call([5]))
    assert_equal(5.5, candidate.call([6, 5]))
    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))
  end
end
"
HumanEval_48,mni_Beng,rb,"পীরবা স্ত্রিং অসি পালিন্দ্রোম অমা ওইব্রা য়েংশিল্লি # >>> is_palindrome.call("""")
# true
# >>> is_palindrome.call(""aba"")
# true
# >>> is_palindrome.call(""aaaaa"")
# true
# >>> is_palindrome.call(""zbcd"")
# false
def is_palindrome(text)
","is_palindrome = lambda do |text|
  text == text.reverse
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_palindrome
    candidate = method(:is_palindrome)
    assert_equal(true, candidate.call(""""))
    assert_equal(true, candidate.call(""aba""))
    assert_equal(true, candidate.call(""aaaaa""))
    assert_equal(false, candidate.call(""zbcd""))
    assert_equal(true, candidate.call(""xywyx""))
    assert_equal(false, candidate.call(""xywyz""))
    assert_equal(false, candidate.call(""xywzx""))
  end
end
"
HumanEval_49,mni_Beng,rb,"2^n মোদ্যুলো পি (নুমেরিকশিং খঙগদবনি) হল্লকই।# >>> modp.call(3, 5)
# 3
# >>> modp.call(1101, 101)
# 2
# >>> modp.call(0, 101)
# 1
# >>> modp.call(3, 11)
# 8
# >>> modp.call(100, 101)
# 1
def modp(n, p)
","def modp(n, p)
  return 1 if p == 1
  2.pow(n, p)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_modp
    candidate = method(:modp)
    assert_equal(3, candidate.call(3, 5))
    assert_equal(2, candidate.call(1101, 101))
    assert_equal(1, candidate.call(0, 101))
    assert_equal(8, candidate.call(3, 11))
    assert_equal(1, candidate.call(100, 101))
    assert_equal(4, candidate.call(30, 5))
    assert_equal(3, candidate.call(31, 5))
  end
end
"
HumanEval_51,mni_Beng,rb,"remove_vowels অসি ভোকেল য়াওদবা স্ত্রিং অমা লৌদুনা স্ত্রিং অমা হল্লকপা ফংসন অমনি. # >>> remove_vowels.call("""")
# """"
# >>> remove_vowels.call(""abcdef"")
# ""bcdf""
# >>> remove_vowels.call(""aaaaa"")
# """"
# >>> remove_vowels.call(""aaBAA"")
# ""B""
# >>> remove_vowels.call(""zbcd"")
# ""zbcd""
def remove_vowels(text)
","def remove_vowels(text)
  text.delete('aeiouAEIOU')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_vowels
    candidate = method(:remove_vowels)
    assert_equal("""", candidate.call(""""))
    assert_equal(""bcdf
ghjklm"", candidate.call(""abcdef
ghijklm""))
    assert_equal(""fdcb"", candidate.call(""fedcba""))
    assert_equal("""", candidate.call(""eeeee""))
    assert_equal(""cB"", candidate.call(""acBAA""))
    assert_equal(""cB"", candidate.call(""EcBOO""))
    assert_equal(""ybcd"", candidate.call(""ybcd""))
  end
end
"
HumanEval_52,mni_Beng,rb,"করিগুম্বা এরে l দা লৈবা নম্বর খুদিংমক থ্রেশহোল্দ tগী মখাদা লৈরবদি truly হল্লকই. # >>> below_threshold.call([1, 2, 4, 10], 100)
# true
# >>> below_threshold.call([1, 20, 4, 10], 5)
# false
def below_threshold(l, t)
","def below_threshold(l, t)
  l.all? { |num| num < t }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_threshold
    candidate = method(:below_threshold)
    assert_equal(true, candidate.call([1, 2, 4, 10], 100))
    assert_equal(false, candidate.call([1, 20, 4, 10], 5))
    assert_equal(true, candidate.call([1, 20, 4, 10], 21))
    assert_equal(true, candidate.call([1, 20, 4, 10], 22))
    assert_equal(true, candidate.call([1, 8, 4, 10], 11))
    assert_equal(false, candidate.call([1, 8, 4, 10], 10))
  end
end
"
HumanEval_53,mni_Beng,rb,"x অমসুং yগী মশীং অনি পুন্সিনবীয়ু # >>> add.call(2, 3)
# 5
# >>> add.call(5, 7)
# 12
def add(x, y)
","add = ->(x, y) { x + y }","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(1, candidate.call(0, 1))
    assert_equal(1, candidate.call(1, 0))
    assert_equal(5, candidate.call(2, 3))
    assert_equal(12, candidate.call(5, 7))
    assert_equal(12, candidate.call(7, 5))
  end
end
"
HumanEval_54,mni_Beng,rb,"ৱাহৈ অনিগী ময়েকশিং মান্নব্রা হায়বদু য়েংউ।# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# true
# >>> same_chars.call(""abcd"", ""dddddddabc"")
# true
# >>> same_chars.call(""dddddddabc"", ""abcd"")
# true
# >>> same_chars.call(""eabcd"", ""dddddddabc"")
# false
# >>> same_chars.call(""abcd"", ""dddddddabce"")
# false
# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# false
def same_chars(s0, s1)
","def same_chars(s0, s1)
  s0.chars.uniq.all? { |char| s1.include?(char) } &&
  s1.chars.uniq.all? { |char| s0.include?(char) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_same_chars
    candidate = method(:same_chars)
    assert_equal(true, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc""))
    assert_equal(true, candidate.call(""abcd"", ""dddddddabc""))
    assert_equal(true, candidate.call(""dddddddabc"", ""abcd""))
    assert_equal(false, candidate.call(""eabcd"", ""dddddddabc""))
    assert_equal(false, candidate.call(""abcd"", ""dddddddabcf""))
    assert_equal(false, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddddabc""))
    assert_equal(false, candidate.call(""aabb"", ""aaccc""))
  end
end
"
HumanEval_55,mni_Beng,rb,"n-th ফিবোনাক্সি নম্বরদু হল্লকউ. # >>> fib.call(10)
# 55
# >>> fib.call(1)
# 1
# >>> fib.call(8)
# 21
def fib(n)
","def fib(n)
  return n if n <= 1
  fib(n - 1) + fib(n - 2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib
    candidate = method(:fib)
    assert_equal(55, candidate.call(10))
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(8))
    assert_equal(89, candidate.call(11))
    assert_equal(144, candidate.call(12))
  end
end
"
HumanEval_56,mni_Beng,rb,"ওপনিং ব্রেকেট খুদিংমক্তা মরি লৈনবা ক্লোজিং ব্রেকেট অমা লৈরবদি true হল্লকই. ব্রেকেতশিং অসি ""<"" অমসুং "">""গী স্ত্রিং অমনি.# >>> correct_bracketing.call(""<"")
# false
# >>> correct_bracketing.call(""<>"")
# true
# >>> correct_bracketing.call(""<<><>>"")
# true
# >>> correct_bracketing.call(""><<>"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.chars.each do |char|
    if char == '<'
      balance += 1
    elsif char == '>'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""<>""))
    assert_equal(true, candidate.call(""<<><>>""))
    assert_equal(true, candidate.call(""<><><<><>><>""))
    assert_equal(true, candidate.call(""<><><<<><><>><>><<><><<>>>""))
    assert_equal(false, candidate.call(""<<<><>>>>""))
    assert_equal(false, candidate.call(""><<>""))
    assert_equal(false, candidate.call(""<""))
    assert_equal(false, candidate.call(""<<<<""))
    assert_equal(false, candidate.call("">""))
    assert_equal(false, candidate.call(""<<>""))
    assert_equal(false, candidate.call(""<><><<><>><>><<>""))
    assert_equal(false, candidate.call(""<><><<><>><>>><>""))
  end
end
"
HumanEval_57,mni_Beng,rb,"এরে ইলিমেন্তশিং অসি মোনোটোনিক ওইনা হেনগৎলকপা নত্রগা হন্থরকপা ওইরবদি trull রিদর তৌই.# >>> monotonic.call([1, 2, 4, 20])
# true
# >>> monotonic.call([1, 20, 4, 10])
# false
# >>> monotonic.call([4, 1, 0, -10])
# true
def monotonic(l)
","def monotonic(l)
  increasing = true
  decreasing = true

  (0...l.length - 1).each do |i|
    if l[i] < l[i + 1]
      decreasing = false
    elsif l[i] > l[i + 1]
      increasing = false
    end
  end

  increasing || decreasing
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_monotonic
    candidate = method(:monotonic)
    assert_equal(true, candidate.call([1, 2, 4, 10]))
    assert_equal(true, candidate.call([1, 2, 4, 20]))
    assert_equal(false, candidate.call([1, 20, 4, 10]))
    assert_equal(true, candidate.call([4, 1, 0, -10]))
    assert_equal(true, candidate.call([4, 1, 1, 0]))
    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))
    assert_equal(true, candidate.call([9, 9, 9, 9]))
  end
end
"
HumanEval_58,mni_Beng,rb,"এরে অনিগীদমক মথং-মনাও নাইনা শেম্বা তোপ তোপ্পা কমন ইলিমেন্তশিং হল্লকই.# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common.call([5, 3, 2, 8], [3, 2])
# [2, 3]
def common(l1, l2)
","def common(l1, l2)
  (l1 & l2).uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_common
    candidate = method(:common)
    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))
    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))
    assert_equal([], candidate.call([4, 3, 2, 8], []))
  end
end
"
HumanEval_59,mni_Beng,rb,"nগী খ্বাইদগী চাউবা প্রাইম ফেক্তরদু হল্লকই। n > 1 অমসুং প্রাইম নত্তে হায়না লৌরো। # >>> largest_prime_factor.call(13195)
# 29
# >>> largest_prime_factor.call(2048)
# 2
def largest_prime_factor(n)
","def largest_prime_factor(n)
  factor = 2
  while factor * factor <= n
    if n % factor == 0
      n /= factor
    else
      factor += 1
    end
  end
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_prime_factor
    candidate = method(:largest_prime_factor)
    assert_equal(5, candidate.call(15))
    assert_equal(3, candidate.call(27))
    assert_equal(7, candidate.call(63))
    assert_equal(11, candidate.call(330))
    assert_equal(29, candidate.call(13195))
  end
end
"
HumanEval_60,mni_Beng,rb,"sum_to_n অসি 1 দগী n ফাওবগী মশীংশিং পুশিল্লিবা ফংসন অমনি। # >>> sum_to_n.call(30)
# 465
# >>> sum_to_n.call(100)
# 5050
# >>> sum_to_n.call(5)
# 15
# >>> sum_to_n.call(10)
# 55
# >>> sum_to_n.call(1)
# 1
def sum_to_n(n)
","def sum_to_n(n)
  (1..n).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_to_n
    candidate = method(:sum_to_n)
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(6))
    assert_equal(66, candidate.call(11))
    assert_equal(465, candidate.call(30))
    assert_equal(5050, candidate.call(100))
  end
end
"
HumanEval_61,mni_Beng,rb,"ওপনিং ব্রেকেট খুদিংমক্তা মরি লৈনবা ক্লোজিং ব্রেকেট অমা লৈরবদি true হল্লকই. ""{"" অমসুং ""}""গী স্ত্রিং অমা ওইগনি.# >>> correct_bracketing.call(""("")
# false
# >>> correct_bracketing.call(""()"")
# true
# >>> correct_bracketing.call(""(()())"")
# true
# >>> correct_bracketing.call("")(()"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.each_char do |char|
    if char == '('
      balance += 1
    elsif char == ')'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""()""))
    assert_equal(true, candidate.call(""(()())""))
    assert_equal(true, candidate.call(""()()(()())()""))
    assert_equal(true, candidate.call(""()()((()()())())(()()(()))""))
    assert_equal(false, candidate.call(""((()())))""))
    assert_equal(false, candidate.call("")(()""))
    assert_equal(false, candidate.call(""(""))
    assert_equal(false, candidate.call(""((((""))
    assert_equal(false, candidate.call("")""))
    assert_equal(false, candidate.call(""(()""))
    assert_equal(false, candidate.call(""()()(()())())(()""))
    assert_equal(false, candidate.call(""()()(()())()))()""))
  end
end
"
HumanEval_62,mni_Beng,rb,"হায়রিবা পোলিনোমিএল অসিগী দেরিভেতিবপু চপ মান্নবা মওংদা হল্লকই. xs[0] + xs[1] * x + xs[2] * x^2 + .... xs অসি পোলিনোমিএল অমগী কোইফিসেন্তশিংবু মহুৎ শিন্মী।# >>> derivative.call([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative.call([1, 2, 3])
# [2, 6]
def derivative(xs)
","def derivative(xs)
  return [] if xs.length < 2
  xs.each_with_index.map { |coef, index| coef * index }[1..-1]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_derivative
    candidate = method(:derivative)
    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))
    assert_equal([2, 6], candidate.call([1, 2, 3]))
    assert_equal([2, 2], candidate.call([3, 2, 1]))
    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))
    assert_equal([], candidate.call([1]))
  end
end
"
HumanEval_63,mni_Beng,rb,"অনুগ্রহপূর্বক ফিবফিব নম্বর সিক্বেন্সকী n-শুবা ইলিমেন্তপু মপুং ফানা কম্প্যুত তৌনবা ফংসন অমা ইবিয়ু।ফিবিবিব (n) == ফিবিবিব (n-1) + ফিবিবিব (n-2) + ফিবিবিব (n-3) ।ফিবফিব (২) == ১ ফিবফিব (২) == 0 ফিবফিব (০) == 0 ফিবোনেচি সিক্বেন্সকী মতুং ইন্না ফিবোনেচি নম্বর সিক্বেন্স অসি মখাদা পীরিবা অসিগা মান্নৈ:# >>> fibfib.call(1)
# 0
# >>> fibfib.call(5)
# 4
# >>> fibfib.call(8)
# 24
def fibfib(n)
","def fibfib(n)
  return 0 if n == 0 || n == 1
  return 1 if n == 2

  a, b, c = 0, 0, 1
  (3..n).each do
    a, b, c = b, c, a + b + c
  end
  c
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fibfib
    candidate = method(:fibfib)
    assert_equal(1, candidate.call(2))
    assert_equal(0, candidate.call(1))
    assert_equal(4, candidate.call(5))
    assert_equal(24, candidate.call(8))
    assert_equal(81, candidate.call(10))
    assert_equal(274, candidate.call(12))
    assert_equal(927, candidate.call(14))
  end
end
"
HumanEval_64,mni_Beng,rb,"খুদম: ভোকেল, অদুবু মসি পীরবা ৱাহৈগী অরোইবদা লৈবা মতমদা খক্তনি।মতাং অসিদা ভোকেলশিং অসি 'a', 'e', 'i', 'o', 'u'নি। মফম অসিদা, 'y' অসিসু a নি।ইনপুট ওইনা ৱাহৈ অমা অমসুং স্ত্রিং অদুদা লৈরিবা ভোকেলশিংগী মশিংদু হল্লকই.ভোকেল্স_কাউন্ত হায়বা ফংসন অমা ইদুনা মদুদা # >>> vowels_count.call(""abcde"")
# 2
# >>> vowels_count.call(""ACEDY"")
# 3
def vowels_count(s)
","def vowels_count(s)
  vowels = ['a', 'e', 'i', 'o', 'u']
  count = 0
  
  s.chars.each_with_index do |char, index|
    if vowels.include?(char.downcase)
      count += 1
    elsif char.downcase == 'y' && index == s.length - 1
      count += 1
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_vowels_count
    candidate = method(:vowels_count)
    assert_equal(2, candidate.call(""abcde""))
    assert_equal(3, candidate.call(""Alone""))
    assert_equal(2, candidate.call(""key""))
    assert_equal(1, candidate.call(""bye""))
    assert_equal(2, candidate.call(""keY""))
    assert_equal(1, candidate.call(""bYe""))
    assert_equal(3, candidate.call(""ACEDY""))
  end
end
"
HumanEval_65,mni_Beng,rb,"Shift > দিজিতশিংগী মশীং ওইরবদি, দিজিতশিং অদু হন্দোক্লগা হল্লকপা।অমসুং ফলদু স্ত্রিং অমা ওইনা হল্লকই. ইন্তিজর x গী দিজিতশিংবু সর্কুলর ওইনা হোংদোকউ, দিজিতশিংদু হোংদোক্তুনা হকথেংননা হোংদোকউ।# >>> circular_shift.call(12, 1)
# ""21""
# >>> circular_shift.call(12, 2)
# ""12""
def circular_shift(x, shift)
","def circular_shift(x, shift)
  digits = x.to_s.chars
  num_digits = digits.length

  if shift > num_digits
    return digits.reverse.join
  else
    shift = shift % num_digits
    shifted_digits = digits.rotate(-shift)
    return shifted_digits.join
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_circular_shift
    candidate = method(:circular_shift)
    assert_equal(""001"", candidate.call(100, 2))
    assert_equal(""12"", candidate.call(12, 2))
    assert_equal(""79"", candidate.call(97, 8))
    assert_equal(""21"", candidate.call(12, 1))
    assert_equal(""11"", candidate.call(11, 101))
  end
end
"
HumanEval_66,mni_Beng,rb,"খুদমশিং: ASCII কোদশিংইনপুত ওইনা স্ত্রিং অমা লৌদুনা মথক থংবা ময়েকশিংগী অপুনবা খক্তমক হল্লক্লিবা ফংসন অমা ইশিনবিয়ু' তৌগদবা থবকশিং# >>> digitSum.call("""")
# 0
# >>> digitSum.call(""abAB"")
# 131
# >>> digitSum.call(""abcCd"")
# 67
# >>> digitSum.call(""helloE"")
# 69
# >>> digitSum.call(""woArBld"")
# 131
# >>> digitSum.call(""aAaaaXa"")
# 153
def digitSum(s)
","def digitSum(s)
  s.chars.select { |char| char =~ /[A-Z]/ }.map(&:ord).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digitSum
    candidate = method(:digitSum)
    assert_equal(0, candidate.call(""""))
    assert_equal(131, candidate.call(""abAB""))
    assert_equal(67, candidate.call(""abcCd""))
    assert_equal(69, candidate.call(""helloE""))
    assert_equal(131, candidate.call(""woArBld""))
    assert_equal(153, candidate.call(""aAaaaXa""))
    assert_equal(151, candidate.call("" How are yOu?""))
    assert_equal(327, candidate.call(""You arE Very Smart""))
  end
end
"
HumanEval_67,mni_Beng,rb,"এক্সাম্বেলগীদমক্তা: কস্ততা লৈবা মেঙ্গোগী মহৈ মশিংদু হন্দোক্কনি।ওরেঞ্জ অমসুং আপেল অমসুং মহৈ-মরোংশিংগী অপুনবা মশীং তাকপা ইন্তিজর মশীং এপল, ওরেঞ্জ, অমসুং মেঙ্গোগী মহৈ-মরোংশিং। গী অপুনবা মশিং তাক্লিবা স্ত্রিং অদু পীরবদিমদুগী মনুংদা লৈবা মহৈ-মরোংগী কার্দ অমদা য়েন্থোকই।মসিগী থবক অসিদা, নহাক্না থাউ অমসুং ওরেঞ্জ মশীং অমা মহুৎ শিনবা স্ত্রিং অমা পীগনি।# >>> fruit_distribution.call(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution.call(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution.call(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution.call(""100 apples and 1 oranges"", 120)
# 19
def fruit_distribution(s, n)
","def fruit_distribution(s, n)
  numbers = s.scan(/\d+/).map(&:to_i)
  apples = numbers[0]
  oranges = numbers[1]
  total_fruits = n
  mangos = total_fruits - (apples + oranges)
  mangos
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fruit_distribution
    candidate = method(:fruit_distribution)
    assert_equal(8, candidate.call(""5 apples and 6 oranges"", 19))
    assert_equal(10, candidate.call(""5 apples and 6 oranges"", 21))
    assert_equal(2, candidate.call(""0 apples and 1 oranges"", 3))
    assert_equal(2, candidate.call(""1 apples and 0 oranges"", 3))
    assert_equal(95, candidate.call(""2 apples and 3 oranges"", 100))
    assert_equal(0, candidate.call(""2 apples and 3 oranges"", 5))
    assert_equal(19, candidate.call(""1 apples and 100 oranges"", 120))
  end
end
"
HumanEval_68,mni_Beng,rb,"খুদম 1:করিগুম্বা মান্নদবা ভেল্যুশিং লৈত্রবদি নত্রগা পীরবা এরে অদু মপুং ফাদ্রবদি, [] হল্লকই।পল তৌরবা নোদ অদু এরে অমদা হল্লক্কদবনি, [ smalest_value, মসিগী ইন্দেক্স ], করিগুম্বা মান্নবা খ্বাইদগী পীকপা মান্নবা ভেল্যু লৈবা নোদ ময়াম অমা ফংলবদি খ্বাইদগী পীকপা ইন্দেক্স লৈবা নোদদু হল্লকই. পিক তৌরবা নোদ অদু খ্বাইদগী পীকপা মান্নবা ভেল্যু লৈবা নোদ ওইগদবনি।নহাক্কী থবক অসি নোদ অমদগী লৌথোকপা অমসুং মদু অমুক হন্না থাগৎপনি।""নেগেতিব ওইদবা ইন্তিজর নোদশিং য়াওবা ত্রী অমগী মশা অমা মহুৎ শিনবা এরে অমা পীরবদি # >>> pluck.call([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck.call([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck.call([])
# []
# Example 4:
# >>> pluck.call([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
def pluck(arr)
","def pluck(arr)
  smallest_even = nil
  smallest_index = nil
  
  arr.each_with_index do |value, index|
    if value.even?
      if smallest_even.nil? || value < smallest_even
        smallest_even = value
        smallest_index = index
      end
    end
  end

  smallest_even.nil? ? [] : [smallest_even, smallest_index]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pluck
    candidate = method(:pluck)
    assert_equal([2, 1], candidate.call([4, 2, 3]))
    assert_equal([2, 1], candidate.call([1, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))
    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))
    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))
    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))
    assert_equal([], candidate.call([7, 9, 7, 1]))
  end
end
"
HumanEval_69,mni_Beng,rb,"খুদমশিং: অসিগুম্বা ভেল্যু অমত্তা লৈত্রবদি, -১ হল্লকই।ইন্তিজর অমগী ফ্রিক্বেন্সি অসি এরেদা থোকপা মশীং অদুবুনি।জিরো, অমসুং ইন্তিজর মশাগী ভেল্যুদগী হেন্না চাওবা নত্ত্রগা মান্নবা ফ্রিক্বেন্সি অমা লৈ।অদোম্না পোজিতিব ইন্তিজরশিংগী নোন-ইশিক ওইবা এরে অমা পীরি। দগী হেন্না চাওবা খ্বাইদগী চাউবা ইন্তিজরদু হল্লকপীয়ু।# >>> search.call([4, 1, 2, 2, 3, 1])
# 2
# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search.call([5, 5, 4, 4, 4])
# -1
def search(lst)
","def search(lst)
  freq_hash = lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }
  valid_numbers = freq_hash.select { |num, freq| freq >= num }.keys
  valid_numbers.empty? ? -1 : valid_numbers.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_search
    candidate = method(:search)
    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))
    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))
    assert_equal(-1, candidate.call([3, 3]))
    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))
    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))
    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))
    assert_equal(2, candidate.call([3, 2, 8, 2]))
    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))
    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))
    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))
    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))
    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))
    assert_equal(1, candidate.call([1]))
    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))
    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))
    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))
    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))
    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))
    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))
    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))
    assert_equal(-1, candidate.call([10]))
    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))
    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))
    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))
    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))
  end
end
"
HumanEval_70,mni_Beng,rb,"খুদমশিং: মদুদগী লেমহৌরিবা ইন্তিজরশিংগী মেক্সিমম, অদুদগী মিনিমম অসিনচিংবা।ময়েক লারবা মখল খায়দোকপা হায়বসি, করিগুম্বা অদোম্না খ্বাইদগী পীকপা ভেল্যুদগী হৌরবদি, ইন্তিজরশিংগী এরে অমা পীরবদি, এরেদু অখন্নবা মথং-মনাওদা হল্লকই।# >>> strange_sort_list.call([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list.call([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list.call([])
# []
def strange_sort_list(lst)
","def strange_sort_list(lst)
  result = []
  lst.sort!
  until lst.empty?
    result << lst.shift
    result << lst.pop unless lst.empty?
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strange_sort_list
    candidate = method(:strange_sort_list)
    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))
    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))
    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))
    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))
    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))
    assert_equal([], candidate.call([]))
    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))
    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))
    assert_equal([111111], candidate.call([111111]))
  end
end
"
HumanEval_71,mni_Beng,rb,"খুদম: অহুমশুবা নাকলদগী হেন্না।নাকল অহুমগী অপুনবা অসি হেন্না চাউবা ওইরবদি নাকল অহুম্না ত্রিএঙ্গেল অমা শেম্মি ।মদু নৎত্রবদি -1 হল্লকই।করিগুম্বা নাকল অহুম অসিনা চৎনবা য়াবা ত্রিএঙ্গল অমা শেম্লবদি ত্রিএঙ্গল অদু দিসিমেল পোইন্ট 2দা রাউন্দ তৌগনি।ত্রি-কোন্থা অমগী নাকল অহুমগী অশাং অদু পীরদুনা, গী এরিয়াদু হল্লকই।# >>> triangle_area.call(3, 4, 5)
# 6.0
# >>> triangle_area.call(1, 2, 10)
# -1
def triangle_area(a, b, c)
","def triangle_area(a, b, c)
  # Check for valid triangle
  if a + b > c && a + c > b && b + c > a
    # Calculate the semi-perimeter
    s = (a + b + c) / 2.0
    # Calculate the area using Heron's formula
    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))
    # Round to 2 decimal points
    return area.round(2)
  else
    return -1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(6.0, candidate.call(3, 4, 5))
    assert_equal(-1, candidate.call(1, 2, 10))
    assert_equal(8.18, candidate.call(4, 8, 5))
    assert_equal(1.73, candidate.call(2, 2, 2))
    assert_equal(-1, candidate.call(1, 2, 3))
    assert_equal(16.25, candidate.call(10, 5, 7))
    assert_equal(-1, candidate.call(2, 6, 3))
    assert_equal(0.43, candidate.call(1, 1, 1))
    assert_equal(-1, candidate.call(2, 2, 10))
  end
end
"
HumanEval_72,mni_Beng,rb,"খুদম: করিগুম্বা ওবজেক্ত q অসি বেলেন্স তৌরবদি (মসি পালিন্দ্রোমিক এরে অমনি) অমসুং মসিগী ইলিমেন্তশিংগী অপুনবা অসি খ্বাইদগী ৱাংবা ওইথোকপা য়াবা ভেল্যু wদগী হন্থবা নত্ত্রগা মান্নরবদি উরগনি।করিগুম্বা ওবজেক্ত q অদুনা ফ্লাই তৌরবদি তশেংবনি, অদুগা করিগুম্বা নত্ত্রবদি ফোল্তনি হায়বা ফংসন অমা ইগনি।# >>> will_it_fly.call([1, 2], 5)
# false
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly.call([3, 2, 3], 1)
# false
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly.call([3, 2, 3], 9)
# true
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly.call([3], 5)
# true
# # 3 is less than the maximum possible weight, and it's balanced.
def will_it_fly(q, w)
","def will_it_fly(q, w)
  is_palindrome = q == q.reverse
  total_weight = q.sum
  is_balanced_and_under_weight = is_palindrome && total_weight <= w
  is_balanced_and_under_weight
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_will_it_fly
    candidate = method(:will_it_fly)
    assert_equal(true, candidate.call([3, 2, 3], 9))
    assert_equal(false, candidate.call([1, 2], 5))
    assert_equal(true, candidate.call([3], 5))
    assert_equal(false, candidate.call([3, 2, 3], 1))
    assert_equal(false, candidate.call([1, 2, 3], 6))
    assert_equal(true, candidate.call([5], 5))
  end
end
"
HumanEval_73,mni_Beng,rb,"খুদম ওইনা: অদোম্না ইলিমেন্ত অমবু অতোপ্পা ইলিমেন্ত অমগা হোংদোকপা য়াই।এরে অসি পালিন্দ্রোমিক ওইহন্নবগীদমক হোংদোকপা মথৌ তাই। পালিন্দ্রোমিক এরে অসি ইন্তিজরশিংগী এরে অমা পীদুনা, # >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change.call([1, 2, 3, 2, 1])
# 0
def smallest_change(arr)
","def smallest_change(arr)
  changes = 0
  left = 0
  right = arr.length - 1

  while left < right
    if arr[left] != arr[right]
      changes += 1
    end
    left += 1
    right -= 1
  end

  changes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_smallest_change
    candidate = method(:smallest_change)
    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))
    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))
    assert_equal(1, candidate.call([1, 4, 2]))
    assert_equal(1, candidate.call([1, 4, 4, 2]))
    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))
    assert_equal(0, candidate.call([3, 1, 1, 3]))
    assert_equal(0, candidate.call([1]))
    assert_equal(1, candidate.call([0, 1]))
  end
end
"
HumanEval_74,mni_Beng,rb,"খুদমশিং করিগুম্বা এরে অনীমক্তা চেরশিংগী মশীং মান্নরবদি, অহানবা এরেদু হল্লকই.এরেগী স্ত্রিং পুম্নমক্তা লৈরিবা কারশিংগী অপুনবা মশিং অদু অতোপ্পা এরে অদুদগী হন্থৈ।ষ্ট্রিংশিংগী এরে অনী লৌবা অমসুং ষ্ট্রিংশিং য়াওবা এরেদু হল্লকপা ফংসন অমা ইগনি# >>> total_match.call([], [])
# []
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
def total_match(lst1, lst2)
","def total_match(lst1, lst2)
  total_chars1 = lst1.map(&:length).sum
  total_chars2 = lst2.map(&:length).sum

  if total_chars1 < total_chars2
    lst1
  elsif total_chars2 < total_chars1
    lst2
  else
    lst1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_total_match
    candidate = method(:total_match)
    assert_equal([], candidate.call([], []))
    assert_equal([""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]))
    assert_equal([""4""], candidate.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]))
    assert_equal([""hI"", ""Hi""], candidate.call([""hi"", ""admin""], [""hI"", ""Hi""]))
    assert_equal([""hI"", ""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]))
    assert_equal([], candidate.call([], [""this""]))
    assert_equal([], candidate.call([""this""], []))
  end
end
"
HumanEval_75,mni_Beng,rb,"খুদম: (a) অসি 100দগী হন্থবনি হায়বা খঙলবদি।অমসুং অতোপ্পা ৱাফমদা অরানবা।পীরিবা মশীং অসি প্রাইম নম্বর 3গী মলতিপ্লিকেসন ওইরবদি ত্রে হায়বা ফংসন অমা ইগনি ।# >>> is_multiply_prime.call(30)
# true
# 30 = 2 * 3 * 5
def is_multiply_prime(a)
","require 'prime'

def is_multiply_prime(a)
  return false if a >= 100
  prime_factors = a.prime_division
  return true if prime_factors.size == 3 && prime_factors.all? { |_, exponent| exponent == 1 }
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_multiply_prime
    candidate = method(:is_multiply_prime)
    assert_equal(false, candidate.call(5))
    assert_equal(true, candidate.call(30))
    assert_equal(true, candidate.call(8))
    assert_equal(false, candidate.call(10))
    assert_equal(true, candidate.call(125))
    assert_equal(true, candidate.call(105))
    assert_equal(false, candidate.call(126))
    assert_equal(false, candidate.call(729))
    assert_equal(false, candidate.call(891))
    assert_equal(true, candidate.call(1001))
  end
end
"
HumanEval_76,mni_Beng,rb,"খুদম ওইনা: x অসি nগী অচম্বা পোত্থোক্নি করিগুম্বা n**int=x  ওইরবদিn গী পোত্থোক অমসুং অতোপ্পা কেসশিংদা ফাল্ ফ ওইগনি।অদোমগী থবক অসি মশিং x অমনা অচম্বা  ওইরবদি ত্রে অমা হল্লকপা ফংসন অমা ইবনি।# >>> is_simple_power.call(1, 4)
# true
# >>> is_simple_power.call(2, 2)
# true
# >>> is_simple_power.call(8, 2)
# true
# >>> is_simple_power.call(3, 2)
# false
# >>> is_simple_power.call(3, 1)
# false
# >>> is_simple_power.call(5, 3)
# false
def is_simple_power(x, n)
","def is_simple_power(x, n)
  return false if x <= 0 || n <= 1
  return true if x == 1

  power = n
  while power <= x
    return true if power == x
    power *= n
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_simple_power
    candidate = method(:is_simple_power)
    assert_equal(true, candidate.call(16, 2))
    assert_equal(false, candidate.call(143214, 16))
    assert_equal(true, candidate.call(4, 2))
    assert_equal(true, candidate.call(9, 3))
    assert_equal(true, candidate.call(16, 4))
    assert_equal(false, candidate.call(24, 2))
    assert_equal(false, candidate.call(128, 4))
    assert_equal(false, candidate.call(12, 6))
    assert_equal(true, candidate.call(1, 1))
    assert_equal(true, candidate.call(1, 12))
  end
end
"
HumanEval_77,mni_Beng,rb,"খুদমশিং: খঙজিনগদবা: অদোম্না ইনপুত অদু মতম পুম্নমক্তা চৎনবা য়াগনি হায়না লৌবা য়াই।করিগুম্বা ইন্গেজর অসি ইন্তিজর নম্বর অমগী কিউব ওইরবদি।ইন্তিজর a অমা লৌদুনা ত্রে অমা হল্লকপা ফংসন অমা ইগনি ।# >>> iscube.call(1)
# true
# >>> iscube.call(2)
# false
# >>> iscube.call(-1)
# true
# >>> iscube.call(64)
# true
# >>> iscube.call(0)
# true
# >>> iscube.call(180)
# false
def iscube(a)
","def iscube(a)
  cube_root = a.abs**(1.0/3)
  cube_root.round**3 == a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_iscube
    candidate = method(:iscube)
    assert_equal(true, candidate.call(1))
    assert_equal(false, candidate.call(2))
    assert_equal(true, candidate.call(-1))
    assert_equal(true, candidate.call(64))
    assert_equal(false, candidate.call(180))
    assert_equal(true, candidate.call(1000))
    assert_equal(true, candidate.call(0))
    assert_equal(false, candidate.call(1729))
  end
end
"
HumanEval_78,mni_Beng,rb,"খুদমশিং: অমসুং সিম্বোলশিং A,B,C,D,E,F অসি মতম পুম্বদা অচৌবা কেসল ওই।খঙজিনগদবা: অদোম্না ইনপুত অদু মতম পুম্বদা চুম্মি নত্ত্রগা মখুৎ লৈতে হায়না লৌবা য়াই, B (= দেসিমেল 11), D (= দেসিমেল 13) ।অদোম্না মখাগী দিজিতশিংগী মশীং অমা খংদোকপা তাই: 2, 3, 5, 7, প্রাইম নম্বরশিং অসি 2, 3, 5, 7, 11, 13, 17,... হেক্সাদেসিমেল দিজিতশিং অসি 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, Fনি।অচৌবা মশীং অমা হায়বসি অচৌবা মশীং অমদগী হেন্না চাউবা মশীং অমনি।প্রাইম ওইবা দিজিতশিং (প্রাইম নম্বর, নৎত্রগা প্রাইম অমা হায়বসি নেচরেল নম্বর অমনি)হেক্সাদেকিমেল নম্বর অমা স্ত্রিং অমা ওইনা অমসুং হেক্সাদেকিমেল মশীংশিং মশীং থীবাঅদোম্না ফংসন অমা ইনবা থৌদাং লৌরে ।# >>> hex_key.call(""AB"")
# 1
# >>> hex_key.call(""1077E"")
# 2
# >>> hex_key.call(""ABED1A33"")
# 4
# >>> hex_key.call(""123456789ABCDEF0"")
# 6
# >>> hex_key.call(""2020"")
# 2
def hex_key(num)
","def hex_key(num)
  prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']
  num.chars.count { |digit| prime_hex_digits.include?(digit) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_hex_key
    candidate = method(:hex_key)
    assert_equal(1, candidate.call(""AB""))
    assert_equal(2, candidate.call(""1077E""))
    assert_equal(4, candidate.call(""ABED1A33""))
    assert_equal(2, candidate.call(""2020""))
    assert_equal(6, candidate.call(""123456789ABCDEF0""))
    assert_equal(12, candidate.call(""112233445566778899AABBCCDDEEFF00""))
  end
end
"
HumanEval_79,mni_Beng,rb,"খুদমশিং: অহেনবা ময়েকশিং অসি ফোর্মেত অদুদা মতেং পাংনবা লৈ।স্ত্রিং অদুগী অহৌবদা অমসুং অরোইবদা অহেনবা কেরেক্তর 'db' অমা লৈগনি।স্ত্রিং অদুদা লৈরিবা কেরেক্তর খুদিংমক '0' নৎত্রগা '1' ওইগনি.ফঙ্কসন অসিনা বাইনারি  অমগী মহুৎ শিনবা ময়েক খুদিংমক্না স্ত্রিং অমা হল্লকপা তাই।অদোম্না দেসিমেলগী মওংদা নম্বর অমা পীগনি অমসুং অদোমগী থবকদি মদুবু দা ওন্থোকপা অসিনি# >>> decimal_to_binary.call(15)
# ""db1111db""
# >>> decimal_to_binary.call(32)
# ""db100000db""
def decimal_to_binary(decimal)
","def decimal_to_binary(decimal)
  ""db"" + decimal.to_s(2) + ""db""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_decimal_to_binary
    candidate = method(:decimal_to_binary)
    assert_equal(""db0db"", candidate.call(0))
    assert_equal(""db100000db"", candidate.call(32))
    assert_equal(""db1100111db"", candidate.call(103))
    assert_equal(""db1111db"", candidate.call(15))
  end
end
"
HumanEval_80,mni_Beng,rb,"খুদম ওইনা: স্ত্রিং অমবু করিগুম্বা মসিগী অশাংবা অসি য়ামদ্রবদা 3 ওইরবদি haprb ওইগনি অমসুং মথং-মনাও নাইনা চৎলিবা লেত্র 3 খুদিংমক তোঙান-তোঙানবা ওইরবদি অদোমগী থবক অসি স্ত্রিং অদু haprb ওইব্রা নৎত্রগা ওইদ্রা হায়বদু য়েংশিনবনি।অদোম্না স্ত্রিং s অমা পীরি।# >>> is_happy.call(""a"")
# false
# >>> is_happy.call(""aa"")
# false
# >>> is_happy.call(""abcd"")
# true
# >>> is_happy.call(""aabb"")
# false
# >>> is_happy.call(""adb"")
# true
# >>> is_happy.call(""xyy"")
# false
def is_happy(s)
","def is_happy(s)
  return false if s.length < 3
  
  (0..s.length - 3).each do |i|
    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]
  end
  
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_happy
    candidate = method(:is_happy)
    assert_equal(false, candidate.call(""a""))
    assert_equal(false, candidate.call(""aa""))
    assert_equal(true, candidate.call(""abcd""))
    assert_equal(false, candidate.call(""aabb""))
    assert_equal(true, candidate.call(""adb""))
    assert_equal(false, candidate.call(""xyy""))
    assert_equal(true, candidate.call(""iopaxpoi""))
    assert_equal(false, candidate.call(""iopaxioi""))
  end
end
"
HumanEval_81,mni_Beng,rb,"খুদম: 0.0 E > 0.0 D- > 0.7 D > ১.০ দি+> 1.3 C- > 1.7 C > ২.০ সি+> 2.3 B- > ২.৭ B > 3.0 B+ > 3.3 A- > 3.7 A 4.0 A+ গ্লেজ এ.পি.এ. লেতর গ্রেদমখাদা পীরিবা তেবল অসি শীজিন্নদুনা লেতর গ্রেদশিংগী এরে অমা পুথোকপা ঙম্বা ফংসন অমনি: মহাক্না নহাকপু মহৈরোই খরগী জি.পি.এ.শিংগী মখল কয়া পীখ্রে অমসুং নহাক্না ইবা তাই ।মহাক্না গ্রেদিং তৌবদা শীজিন্নখিবা কোদ অদু মাংখ্রবনি।মহৈরোইশিংদা পীবা গ্রেদিংগীদমক ওজা অসিনা মশাগী অলগোরিথম শেমদুনা লাক্লি।সেমস্তর অসিগী অরোইবা চয়োলনি অমসুং ওজাশিংনা গ্রেদশিং পীবা তাই ।# >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
def numerical_letter_grade(grades)
","def numerical_letter_grade(grades)
  grades.map do |gpa|
    case 
    when gpa == 4.0
      ""A+""
    when gpa > 3.7
      ""A""
    when gpa > 3.3
      ""A-""
    when gpa > 3.0
      ""B+""
    when gpa > 2.7
      ""B""
    when gpa > 2.3
      ""B-""
    when gpa > 2.0
      ""C+""
    when gpa > 1.7
      ""C""
    when gpa > 1.3
      ""C-""
    when gpa > 1.0
      ""D+""
    when gpa > 0.7
      ""D""
    when gpa > 0.0
      ""D-""
    else
      ""E""
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_numerical_letter_grade
    candidate = method(:numerical_letter_grade)
    assert_equal([""A+"", ""B"", ""C-"", ""C"", ""A-""], candidate.call([4.0, 3, 1.7, 2, 3.5]))
    assert_equal([""D+""], candidate.call([1.2]))
    assert_equal([""D-""], candidate.call([0.5]))
    assert_equal([""E""], candidate.call([0.0]))
    assert_equal([""D"", ""D-"", ""C-"", ""B"", ""B+""], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))
    assert_equal([""E"", ""D-""], candidate.call([0.0, 0.7]))
  end
end
"
HumanEval_82,mni_Beng,rb,"খুদমশিং লং অসি প্রাইম নম্বর অমা ওইগদবনি নত্রগা ফোলস ওইগদবনি ষ্ট্রিং অমা লৌদুনা ষ্ট্রিং অদুদা হোল্দর হন্দোকপা ফংসন অমা ইগনি ।# >>> prime_length.call(""Hello"")
# true
# >>> prime_length.call(""abcdcba"")
# true
# >>> prime_length.call(""kittens"")
# true
# >>> prime_length.call(""orange"")
# false
def prime_length(string)
","def prime_length(string)
  length = string.length
  return false if length < 2

  (2..Math.sqrt(length)).each do |i|
    return false if length % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_length
    candidate = method(:prime_length)
    assert_equal(true, candidate.call(""Hello""))
    assert_equal(true, candidate.call(""abcdcba""))
    assert_equal(true, candidate.call(""kittens""))
    assert_equal(false, candidate.call(""orange""))
    assert_equal(true, candidate.call(""wow""))
    assert_equal(true, candidate.call(""world""))
    assert_equal(true, candidate.call(""MadaM""))
    assert_equal(true, candidate.call(""Wow""))
    assert_equal(false, candidate.call(""""))
    assert_equal(true, candidate.call(""HI""))
    assert_equal(true, candidate.call(""go""))
    assert_equal(false, candidate.call(""gogo""))
    assert_equal(false, candidate.call(""aaaaaaaaaaaaaaa""))
    assert_equal(true, candidate.call(""Madam""))
    assert_equal(false, candidate.call(""M""))
    assert_equal(false, candidate.call(""0""))
  end
end
"
HumanEval_83,mni_Beng,rb,"১গা হৌবা নত্ত্রগা লোইবা পোজিতিব ইন্তিজরশিং।পোজিতিব ওইবা ইন্তিজর n অমা পীরগা, n-দিজিতকী মশীংগী মশীংদু হল্লকপা def starts_one_ends(n)
","def starts_one_ends(n)
  return 0 if n <= 0

  # Count numbers starting with 1
  start_with_1 = 9 ** (n - 1)

  # Count numbers ending with 1
  end_with_1 = 9 ** (n - 1)

  # Adjust for double counting the number that both starts and ends with 1
  both_start_and_end_with_1 = 9 ** (n - 2) if n > 1
  
  start_with_1 + end_with_1 - (both_start_and_end_with_1 || 0)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_starts_one_ends
    candidate = method(:starts_one_ends)
    assert_equal(1, candidate.call(1))
    assert_equal(18, candidate.call(2))
    assert_equal(180, candidate.call(3))
    assert_equal(1800, candidate.call(4))
    assert_equal(18000, candidate.call(5))
  end
end
"
HumanEval_84,mni_Beng,rb,"খুদম পোজিতিব ওইবা ইন্তিজর N অমা পীরগা, বাইনারীদা মসিগী দিজিতশিংগী অপুনবা শমদু হল্লকউ. # >>> solve.call(1000)
# ""1""
# >>> solve.call(150)
# ""110""
# >>> solve.call(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
def solve(n)
","def solve(n)
  sum_of_digits = n.to_s.chars.map(&:to_i).sum
  sum_of_digits.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""1"", candidate.call(1000))
    assert_equal(""110"", candidate.call(150))
    assert_equal(""1100"", candidate.call(147))
    assert_equal(""1001"", candidate.call(333))
    assert_equal(""10010"", candidate.call(963))
  end
end
"
HumanEval_85,mni_Beng,rb,"খুদমশিং: ইন্তিজরশিংগী নোন-ইশিক ওইবা এরে অমা পীরদুনা, অহানবদা, ইন্দিক্সশিংদা লৈবা ইপ্যদ ইলিমেন্তশিং হাপচিল্লু..# >>> add.call([4, 2, 6, 7])
# 2
def add(lst)
","def add(lst)
  lst.each_with_index.select { |num, index| index.odd? && num.even? }.map(&:first).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(88, candidate.call([4, 88]))
    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))
    assert_equal(0, candidate.call([4, 0, 6, 7]))
    assert_equal(12, candidate.call([4, 4, 6, 8]))
  end
end
"
HumanEval_86,mni_Beng,rb,"খুদম ওইনা: খঙজিনগদবা: ৱাহৈ অমসুং স্পেসকী মথং-মনাও অদু ৱাহৈ পরেং অসিদা থমগদবনি।ascii ভেল্যুদা য়ুম্ফম ওইবা মথং-মনাও নাইনা।তা শেম্বা ময়েক খুদিংমক্না অনৌবা ৱাহৈ অমনা মহুৎ শিনগনি।স্ত্রিংগী ওর্দর তৌরবা ভর্জন, হায়রিবা অসি ৱাহৈ খুদিংমক (স্পেসনা খায়দোকপা) স্ত্রিং অমা লৌদুনা মদুগী ওর্দর তৌরবা ভর্জন অমা হল্লক্লিবা ফংসন অমা ইশিনবা.# >>> anti_shuffle.call(""Hi"")
# ""Hi""
# >>> anti_shuffle.call(""hello"")
# ""ehllo""
# >>> anti_shuffle.call(""Hello World!!!"")
# ""Hello !!!Wdlor""
def anti_shuffle(s)
","def anti_shuffle(s)
  s.split(/(\s+)/).map { |word| word.chars.sort.join }.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_anti_shuffle
    candidate = method(:anti_shuffle)
    assert_equal(""Hi"", candidate.call(""Hi""))
    assert_equal(""ehllo"", candidate.call(""hello""))
    assert_equal(""bemnru"", candidate.call(""number""))
    assert_equal(""abcd"", candidate.call(""abcd""))
    assert_equal(""Hello !!!Wdlor"", candidate.call(""Hello World!!!""))
    assert_equal("""", candidate.call(""""))
    assert_equal("".Hi My aemn is Meirst .Rboot How aer ?ouy"", candidate.call(""Hi. My name is Mister Robot. How are you?""))
  end
end
"
HumanEval_87,mni_Beng,rb,"খুদমশিং: লোয়ননা, রোলগী কোওর্দিনেৎশিংদু কলমশিংদুগী মতুং ইন্না দ্রেসিভ ওইবা মথং মনাওদা মথং-মনাও নাইহনবা।কোওর্দিনেৎশিং অসি অহানবদা মথং-মনাও নাইনা পরিং নাইনা মথং-মনাও নাইনা খায়দোকউ।এরে খুদিংমক কোওর্দিনেত - (লোং, কলমশিং) 0দগী হৌবা ওইগনি।অমসুং এরেশিংগী এরে, [(x1, y1), (x2, y2) ...] অসুম্না হল্লকই মদুদি lst, অমসুং ইন্তিজর x পীদুনা, এরেদা ইন্তিজর x ফংলবা, রোল অমদা কলমশিংগী তোঙানবা মশীং য়াউবা য়াই।মসি মেত্রিক্সকা মান্নৈ, অদুবু মেত্রিক্সকা মান্নদে,অদোম্না 2 দিমেন্সনগী দাতা অমা, নেস্তেদ এরে অমা ওইনা পীরি, # >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row.call([], 1)
# []
# >>> get_row.call([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
def get_row(lst, x)
","def get_row(lst, x)
  result = []

  lst.each_with_index do |row, i|
    row.each_with_index do |value, j|
      result << [i, j] if value == x
    end
  end

  result.sort_by { |coord| [coord[0], -coord[1]] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_row
    candidate = method(:get_row)
    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))
    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([], candidate.call([], 1))
    assert_equal([], candidate.call([[1]], 2))
    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))
  end
end
"
HumanEval_88,mni_Beng,rb,"খুদমশিং: * পীরিবা এরে অদু হোংদোক্তুনা থম্বা. খঙজিনগদবা:নৎত্রগা মদুগী অপুনবা (অহানবা ইন্দেক্স ভেল্যু, অরোইবা ইন্দেক্স ভেল্যু) অসি মান্নরবদি মদুবু তপ্না তপ্না খায়দোকপা।অদোম্না পীরিবা এরে অসি শম্না হায়রবদি (হান্না ইন্দেক্স ভেল্যু, অরোইবা ইন্দেক্স ভেল্যু) অসি ওদ্দর ওই, নেগেতিব ওইদবা ইন্তিজরশিংগী এরে অমা পীরবদি, পীরিবা এরে অদুগী কর্ব অমা মথং-মনাও খায়দোক্লবা মতুংদা হল্লকই, # >>> sort_array.call([])
# []
# >>> sort_array.call([5])
# [5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
def sort_array(array)
","def sort_array(array)
  return array if array.empty? || array.size == 1

  if (array.first + array.last).odd?
    array.sort
  else
    array.sort.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([], candidate.call([]))
    assert_equal([5], candidate.call([5]))
    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))
    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))
    assert_equal([1, 2], candidate.call([2, 1]))
    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))
    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))
  end
end
"
HumanEval_89,mni_Beng,rb,"খুদম ওইনা: মফম অনিদা অনিগী মশীংনা হন্দোক্লগা মফম অনিদা হন্থরকপা।অলফাবেৎ অসি মওং অমদা হোংদোক্কদবনি মদুদি অখন্নবা ময়েকশিং এলিফ্বেৎ অদু রোট তৌদুনা এনক্রিপ্ত তৌরবা স্ত্রিং অমা হল্লকই. স্ত্রিং অমবু আর্গুমেন্ত ওইনা লৌবা ফংসন এনক্রিপ্ত অমা শেম্মু অমসুং # >>> encrypt.call(""hi"")
# ""lm""
# >>> encrypt.call(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt.call(""gf"")
# ""kj""
# >>> encrypt.call(""et"")
# ""ix""
def encrypt(s)
","def encrypt(s)
  s.chars.map do |char|
    if char =~ /[a-z]/
      ((char.ord - 'a'.ord + 4) % 26 + 'a'.ord).chr
    elsif char =~ /[A-Z]/
      ((char.ord - 'A'.ord + 4) % 26 + 'A'.ord).chr
    else
      char
    end
  end.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encrypt
    candidate = method(:encrypt)
    assert_equal(""lm"", candidate.call(""hi""))
    assert_equal(""ewhjklnop"", candidate.call(""asdfghjkl""))
    assert_equal(""kj"", candidate.call(""gf""))
    assert_equal(""ix"", candidate.call(""et""))
    assert_equal(""jeiajeaijeiak"", candidate.call(""faewfawefaewg""))
    assert_equal(""lippsqcjvmirh"", candidate.call(""hellomyfriend""))
    assert_equal(""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", candidate.call(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""))
    assert_equal(""e"", candidate.call(""a""))
  end
end
"
HumanEval_90,mni_Beng,rb,"অসিগুম্বা ইলিমেন্ত অমা লৈত্রবদি শোয়দনা হল্লকই. এরেগী 2nd খ্বাইদগী পীকপা এলিমেন্ত হল্লক্লিবা next_smallest () ফংসন অমা ইগনি।অদোম্না ইন্তিজরশিংগী এরে অমা পীরি।# >>> next_smallest.call([1, 2, 3, 4, 5])
# 2
# >>> next_smallest.call([5, 1, 4, 3, 2])
# 2
# >>> next_smallest.call([])
# nil
# >>> next_smallest.call([1, 1])
# nil
def next_smallest(lst)
","def next_smallest(lst)
  unique_sorted = lst.uniq.sort
  unique_sorted.length >= 2 ? unique_sorted[1] : nil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_next_smallest
    candidate = method(:next_smallest)
    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))
    assert_equal(nil, candidate.call([]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(-35, candidate.call([-35, 34, 12, -45]))
  end
end
"
HumanEval_91,mni_Beng,rb,"খুদম ওইনা: ৱাহৈ পরেংশিং অসি '.', '?' নত্রগা '!' না খায়দোকই।""ঐ"" হায়বা ৱাহৈনা হৌবা ৱাহৈ পরেং অমা হায়বসি তশেংনা তশেং তশেং তশেং তশেং তশেং তশেং তশেং তশেং ওই।অদোম্না ৱাহৈ পরেং অমা পীগনি, অমসুং অদোমগী থবকদি মশিং অদু মশীং থিবনি।# >>> is_bored.call(""Hello world"")
# 0
# >>> is_bored.call(""The sky is blue. The sun is shining. I love this weather"")
# 1
def is_bored(s)
","def is_bored(s)
  sentences = s.split(/(?<=[.?!])/)
  sentences.count { |sentence| sentence.strip.start_with?('I') }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_bored
    candidate = method(:is_bored)
    assert_equal(0, candidate.call(""Hello world""))
    assert_equal(0, candidate.call(""Is the sky blue?""))
    assert_equal(1, candidate.call(""I love It !""))
    assert_equal(0, candidate.call(""bIt""))
    assert_equal(2, candidate.call(""I feel good today. I will be productive. will kill It""))
    assert_equal(0, candidate.call(""You and I are going for a walk""))
  end
end
"
HumanEval_92,mni_Beng,rb,"খুদমশিং অতোপ্পা কেস অমহেক্তদা ফোলস হল্লকই. নম্বর অমগা অতোপ্পা অনিগী অপুনবা মান্নরবদি অমসুং নম্বর খুদিংমক ইন্তিজর ওইরবদি TRUE হল্লকই।নম্বর 3 লৌবা ফংসন অমা শেম্মু।# >>> any_int.call(5, 2, 7)
# true
# >>> any_int.call(3, 2, 2)
# false
# >>> any_int.call(3, -2, 1)
# true
# >>> any_int.call(3.6, -2.2, 2)
# false
def any_int(x, y, z)
","def any_int(x, y, z)
  if [x, y, z].all? { |n| n.is_a?(Integer) }
    x == y + z || y == x + z || z == x + y
  else
    false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_any_int
    candidate = method(:any_int)
    assert_equal(true, candidate.call(2, 3, 1))
    assert_equal(false, candidate.call(2.5, 2, 3))
    assert_equal(false, candidate.call(1.5, 5, 3.5))
    assert_equal(false, candidate.call(2, 6, 2))
    assert_equal(true, candidate.call(4, 2, 2))
    assert_equal(false, candidate.call(2.2, 2.2, 2.2))
    assert_equal(true, candidate.call(-4, 6, 2))
    assert_equal(true, candidate.call(2, 1, 1))
    assert_equal(true, candidate.call(3, 4, 7))
    assert_equal(false, candidate.call(3.0, 4, 7))
  end
end
"
HumanEval_93,mni_Beng,rb,"খুদমশিং: অইবশিং খক্তমক লৌবা।ইংলিশকী অলফাবেৎতা লৈবা ভোকেল।মসিগী মথক্তা মফম অনিদা য়াওরিবা অখন্নবা ময়েক্না মেসেজ অদু মসিনা ময়েক খুদিংমক্কী কেসশিং হোংদোক-হোংজিন তৌদুনা, দা লৈরিবা ভোকেল খুদিংমক মহুৎ শিন্দোকই।মেসেজ অমা লৌরিবা অমসুং  অমা ওইনা কোদ তৌরিবা ফংসন অমা ইগনি# >>> encode.call(""test"")
# ""TGST""
# >>> encode.call(""This is a message"")
# ""tHKS KS C MGSSCGG""
def encode(message)
","def encode(message)
  vowels = 'aeiou'
  swap_vowels = {'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w'}
  
  encoded_message = message.chars.map do |char|
    if vowels.include?(char.downcase)
      new_char = swap_vowels[char.downcase]
      char == char.upcase ? new_char.upcase : new_char.downcase
    else
      char == char.upcase ? char.downcase : char.upcase
    end
  end

  encoded_message.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encode
    candidate = method(:encode)
    assert_equal(""tgst"", candidate.call(""TEST""))
    assert_equal(""mWDCSKR"", candidate.call(""Mudasir""))
    assert_equal(""ygs"", candidate.call(""YES""))
    assert_equal(""tHKS KS C MGSSCGG"", candidate.call(""This is a message""))
    assert_equal(""k dQnT kNqW wHcT Tq wRkTg"", candidate.call(""I DoNt KnOw WhAt tO WrItE""))
  end
end
"
HumanEval_94,mni_Beng,rb,"খুদমশিং: নহাক্না খ্বাইদগী চাউবা প্রাইম ভেল্যু অদু ফংগদবনি অমসুং মদুগী দিজিতশিংগী অপুনবা অদু হল্লকপা মথৌ তাই।অদোম্না ইন্তিজরশিংগী এরে অমা পীরি।# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])
# 7
def skjkasdkd(lst)
","def skjkasdkd(lst)
  require 'prime'

  # Find the largest prime number in the array
  largest_prime = lst.select { |num| Prime.prime?(num) }.max
  
  # Return 0 if no prime number is found
  return 0 if largest_prime.nil?

  # Calculate the sum of digits of the largest prime number
  largest_prime.to_s.chars.map(&:to_i).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_skjkasdkd
    candidate = method(:skjkasdkd)
    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))
    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))
    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))
    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))
    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))
    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))
    assert_equal(19, candidate.call([8191]))
    assert_equal(19, candidate.call([8191, 123456, 127, 7]))
    assert_equal(10, candidate.call([127, 97, 8192]))
  end
end
"
HumanEval_95,mni_Beng,rb,"খুদমশিং: ফংসন অসিনা পীরিবা হেশ অসি খরা লৈরবদি ফল্লস হল্লকই।কেস নত্রগা কী পুম্নমক অচৌবা কেসতা স্ত্রিংশিং ওইরবদি, অতোপ্পা ফিবমদা ফোল্দরদু ফোল্দর ফোল্দর ওইগনি.হেশ অমা পীবগা, করিগুম্বা কি পুম্নমক অসি লোয়ার দা স্ত্রিংশিং ওইরবদি তশেং ওইগনি# >>> check_dict_case.call({""a"" => ""apple"", ""b"" => ""banana""})
# true
# >>> check_dict_case.call({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# false
# >>> check_dict_case.call({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# false
# >>> check_dict_case.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# false
# >>> check_dict_case.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# true
def check_dict_case(dict)
","def check_dict_case(dict)
  return false if dict.empty?

  lowercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.downcase }
  uppercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }

  lowercase_keys || uppercase_keys
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_dict_case
    candidate = method(:check_dict_case)
    assert_equal(true, candidate.call({""p"" => ""pineapple"", ""b"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}))
    assert_equal(false, candidate.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}))
    assert_equal(true, candidate.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""}))
    assert_equal(true, candidate.call({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}))
    assert_equal(false, candidate.call({}))
  end
end
"
HumanEval_96,mni_Beng,rb,"খুদম ওইনা: প্রাইম নম্বরশিং অমসুং nদগী পীকপা ইন্তিজরশিং।নেগেতিব ওইদবা ইন্তিজর অমা লৌদুনা অহানবা n গী এরে অমা হল্লকপা ফংসন অমা ইমপ্লিমেন্ত তৌই ।# >>> count_up_to.call(5)
# [2, 3]
# >>> count_up_to.call(11)
# [2, 3, 5, 7]
# >>> count_up_to.call(0)
# []
# >>> count_up_to.call(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to.call(1)
# []
# >>> count_up_to.call(18)
# [2, 3, 5, 7, 11, 13, 17]
def count_up_to(n)
","def count_up_to(n)
  return [] if n <= 2
  primes = []
  (2...n).each do |num|
    is_prime = true
    (2..Math.sqrt(num)).each do |i|
      if num % i == 0
        is_prime = false
        break
      end
    end
    primes << num if is_prime
  end
  primes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_up_to
    candidate = method(:count_up_to)
    assert_equal([2, 3], candidate.call(5))
    assert_equal([2, 3, 5], candidate.call(6))
    assert_equal([2, 3, 5], candidate.call(7))
    assert_equal([2, 3, 5, 7], candidate.call(10))
    assert_equal([], candidate.call(0))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))
    assert_equal([], candidate.call(1))
    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))
  end
end
"
HumanEval_97,mni_Beng,rb,"খুদমশিং: ইনপুত অদু মতম পুম্নমক্তা চৎনবা য়াগনি হায়না লৌরো।মখোয়গী য়ুনিৎ দিজিতশিংগী পোত্থোক।ইন্তিজর অনি লৌবা অমসুং  হল্লকপা ফংসনদু মপুং ফাহল্লু# >>> multiply.call(148, 412)
# 16
# >>> multiply.call(19, 28)
# 72
# >>> multiply.call(2020, 1851)
# 0
# >>> multiply.call(14, -15)
# 20
def multiply(a, b)
","def multiply(a, b)
  a_unit_digit = a.abs % 10
  b_unit_digit = b.abs % 10
  a_unit_digit * b_unit_digit
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_multiply
    candidate = method(:multiply)
    assert_equal(16, candidate.call(148, 412))
    assert_equal(72, candidate.call(19, 28))
    assert_equal(0, candidate.call(2020, 1851))
    assert_equal(20, candidate.call(14, -15))
    assert_equal(42, candidate.call(76, 67))
    assert_equal(49, candidate.call(17, 27))
    assert_equal(0, candidate.call(0, 1))
    assert_equal(0, candidate.call(0, 0))
  end
end
"
HumanEval_98,mni_Beng,rb,"খুদম ওইনা: স্ত্রিং s অমা পীরবদি, অচৌবা ভোকেলশিংগী মশিং অদু ইপ্যর ইন্দিক্সশিংদা মশিং থী।# >>> count_upper.call(""aBCdEf"")
# 1
# >>> count_upper.call(""abcdefg"")
# 0
# >>> count_upper.call(""dBBE"")
# 0
def count_upper(s)
","def count_upper(s)
  vowels = ['A', 'E', 'I', 'O', 'U']
  count = 0

  s.chars.each_with_index do |char, index|
    if index.even? && vowels.include?(char)
      count += 1
    end
  end

  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_upper
    candidate = method(:count_upper)
    assert_equal(1, candidate.call(""aBCdEf""))
    assert_equal(0, candidate.call(""abcdefg""))
    assert_equal(0, candidate.call(""dBBE""))
    assert_equal(0, candidate.call(""B""))
    assert_equal(1, candidate.call(""U""))
    assert_equal(0, candidate.call(""""))
    assert_equal(2, candidate.call(""EEEE""))
  end
end
"
HumanEval_99,mni_Beng,rb,"খুদমশিং ইন্তিজর অনিদগী, মসি জিরোদগী লাপথোকপা।অমসুং খ্বাইদগী নকপা ইন্তিজরদু হল্লকই।মশীং অমা মহুৎ শিনবা ভেল্যু (স্ত্রিং) অমা লৌবা ফংসন অমা শেম্মু # >>> closest_integer.call(""10"")
# 10
# >>> closest_integer.call(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
def closest_integer(value)
","def closest_integer(value)
  number = value.to_f
  if number > 0
    (number + 0.5).floor
  else
    (number - 0.5).ceil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_closest_integer
    candidate = method(:closest_integer)
    assert_equal(10, candidate.call(""10""))
    assert_equal(15, candidate.call(""14.5""))
    assert_equal(-16, candidate.call(""-15.5""))
    assert_equal(15, candidate.call(""15.3""))
    assert_equal(0, candidate.call(""0""))
  end
end
"
HumanEval_100,mni_Beng,rb,"খুদমশিং: i অসি লেভেল (i+1) দা লৈরিবা নুঙগী মশীং অদু উৎলি।ইন্দেক্সতা ইলিমেন্ত  অমা য়াওরিবা এরে অমদা লেভেল খুদিংগী স্তোন্স মশিংদু হল্লকই- n অসি মান্নরবদি মথংগী মান্নবা মশীংদু।- মথংগী ইদ ওইবা মশীংদু, করিগুম্বা n অসি ইদ ওইরবদি।মথংগী থাক্তা লৈরিবা নুঙগী মশীং অসি:অহানবা থাক অসিদা নুঙশিং লৈ।পোজিতিব ওইবা ইন্তিজর n অমা পীরবদি, নহাক্না নুঙগী থাক n লৈবা মৈশানা শাবা য়ারি।# >>> make_a_pile.call(3)
# [3, 5, 7]
def make_a_pile(n)
","def make_a_pile(n)
  result = []
  current_stones = n
  n.times do
    result << current_stones
    current_stones += 2
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_a_pile
    candidate = method(:make_a_pile)
    assert_equal([3, 5, 7], candidate.call(3))
    assert_equal([4, 6, 8, 10], candidate.call(4))
    assert_equal([5, 7, 9, 11, 13], candidate.call(5))
    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))
    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))
  end
end
"
HumanEval_101,mni_Beng,rb,"খুদম ওইনা: স্ত্রিংদু ৱাহৈশিং থোক্না খায়দোকপা অমসুং ৱাহৈশিংগী এরে অমা হল্লকপা।নহাক্না কম্মা নত্ত্রগা স্পেসশিংনা খায়দোক্লবা ৱাহৈ পরেং অমা পীগনি। নহাক্কী থবক অসি # >>> words_string.call(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string.call(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
def words_string(s)
","def words_string(s)
  s.split(/[\s,]+/)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_string
    candidate = method(:words_string)
    assert_equal([""Hi"", ""my"", ""name"", ""is"", ""John""], candidate.call(""Hi, my name is John""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One, two, three, four, five, six""))
    assert_equal([""Hi"", ""my"", ""name""], candidate.call(""Hi, my name""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One,, two, three, four, five, six,""))
    assert_equal([], candidate.call(""""))
    assert_equal([""ahmed"", ""gamal""], candidate.call(""ahmed     , gamal""))
  end
end
"
HumanEval_102,mni_Beng,rb,"খুদম ওইনা: অসিগুম্বা মশীং অসি লৈত্রবদি, ফংসন অসিনা -1 হল্লকই।[x, y]গী রেঞ্জতা লৈবা খ্বাইদগী চাউবা ইন্তিজর মশীং ওইগনি।মসিগী ফংসন অসিনা পোজিতিব ওইবা x অমসুং y মশীং অনি লৌই অমসুং # >>> choose_num.call(12, 15)
# 14
# >>> choose_num.call(13, 12)
# -1
def choose_num(x, y)
","def choose_num(x, y)
  return -1 if x > y
  # Start looking from the largest number
  max_even = y.even? ? y : y - 1
  # Iterate downwards to find the biggest even number
  max_even.downto(x) do |n|
    return n if n.even?
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_choose_num
    candidate = method(:choose_num)
    assert_equal(14, candidate.call(12, 15))
    assert_equal(-1, candidate.call(13, 12))
    assert_equal(12354, candidate.call(33, 12354))
    assert_equal(-1, candidate.call(5234, 5233))
    assert_equal(28, candidate.call(6, 29))
    assert_equal(-1, candidate.call(27, 10))
    assert_equal(-1, candidate.call(7, 7))
    assert_equal(546, candidate.call(546, 546))
  end
end
"
HumanEval_103,mni_Beng,rb,"খুদম: করিগুম্বা n অসি mদগী হেন্না চাউরবদি, -1 হল্লকই।খ্বাইদগী নকপা ইন্তিজরদা পাউখুম অদু রাউন্দ তৌরো অমসুং মদু বাইনারিদা ওন্থোকউ।n দগী m ফাওবগী ওইবা ইন্তিজরশিংগী চাংচৎ (n অমসুং m য়াওনা) ।অদোম্না পোজিতিব ওইবা ইন্তিজর অনি n অমসুং m ফংলে, অমসুং অদোমগী থবক অসি # >>> rounded_avg.call(1, 5)
# ""0b11""
# >>> rounded_avg.call(7, 5)
# -1
# >>> rounded_avg.call(10, 20)
# ""0b1111""
# >>> rounded_avg.call(20, 33)
# ""0b11010""
def rounded_avg(n, m)
","def rounded_avg(n, m)
  return -1 if n > m

  sum = (n..m).reduce(:+)
  count = m - n + 1
  average = (sum.to_f / count).round
  ""0b"" + average.to_i.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rounded_avg
    candidate = method(:rounded_avg)
    assert_equal(""0b11"", candidate.call(1, 5))
    assert_equal(""0b1010"", candidate.call(7, 13))
    assert_equal(""0b1111001010"", candidate.call(964, 977))
    assert_equal(""0b1111100100"", candidate.call(996, 997))
    assert_equal(""0b1011000010"", candidate.call(560, 851))
    assert_equal(""0b101101110"", candidate.call(185, 546))
    assert_equal(""0b110101101"", candidate.call(362, 496))
    assert_equal(""0b1001110010"", candidate.call(350, 902))
    assert_equal(""0b11010111"", candidate.call(197, 233))
    assert_equal(-1, candidate.call(7, 5))
    assert_equal(-1, candidate.call(5, 1))
    assert_equal(""0b101"", candidate.call(5, 5))
  end
end
"
HumanEval_104,mni_Beng,rb,"খুদম ওইনা: খঙজিনগদবা: হল্লকপা এরে অসি হেনগৎলক্লিবা মথং-মনাওদা মথং-মনাও নাইহনগদবনি।মশীং অমত্তা য়াওদবা মশীংশিংপোজিতিব ইন্তিজরশিংগী এরে অমা পীরবদি x।  পুম্নমক্কী মথং-মনাও নাইরবা এরে অমা হল্লকই# >>> unique_digits.call([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits.call([152, 323, 1422, 10])
# []
def unique_digits(x)
","def unique_digits(x)
  x.select { |num| num.to_s.chars.none? { |digit| digit.to_i.even? } }.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique_digits
    candidate = method(:unique_digits)
    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))
    assert_equal([], candidate.call([152, 323, 1422, 10]))
    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))
    assert_equal([31, 135], candidate.call([135, 103, 31]))
  end
end
"
HumanEval_105,mni_Beng,rb,"খুদম ওইনা: ""অকপা"", ""অকপা অনি"", ""অকপা অহুম"", ""অকপা মরি"", ""অকপা মঙা"", ""অকপা তরুক"", ""অকপা তরেৎ"", ""অকপা নিপান"".ফল ফংলকপা এরে অদু ওন্ন-তৈনহনবা, অমসুং দিত খুদিংমকপু মসিগী চান্নবা মমিংগা মহুৎ শিনবাইন্তিজরশিংগী এরে অমা পীরদুনা, 1 অমসুং 9গী মরক্তা লৈবা ইন্তিজরশিংবু মখল খায়দোকউ,# >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length.call([])
# []
# If the array has any strange number ignore it:
# >>> by_length.call([1, -1, 55])
# [""One""]
def by_length(arr)
","def by_length(arr)
  number_names = {
    1 => ""One"",
    2 => ""Two"",
    3 => ""Three"",
    4 => ""Four"",
    5 => ""Five"",
    6 => ""Six"",
    7 => ""Seven"",
    8 => ""Eight"",
    9 => ""Nine""
  }

  filtered_sorted_reversed = arr.select { |x| x.between?(1, 9) }.sort.reverse
  filtered_sorted_reversed.map { |num| number_names[num] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_by_length
    candidate = method(:by_length)
    assert_equal([""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([""One""], candidate.call([1, -1, 55]))
    assert_equal([""Three"", ""Two"", ""One""], candidate.call([1, -1, 3, 2]))
    assert_equal([""Nine"", ""Eight"", ""Four""], candidate.call([9, 4, 8]))
  end
end
"
HumanEval_106,mni_Beng,rb,"খুদম: i গী ফেক্তোরিএল অসি 1 দগী i ফাওবগী মশীংশিং অদুগী মলতিপ্লিকেসননি (1 * 2 * ... * i) ।i অসি 1দগী হৌগনি।নত্রগা 1দগী i ফাওবগী মনুংদা লৈবা মশীংশিংগী অপুনবা।অমসুং এনগী মশিং লৈবা এরে অমা হল্লকই, হায়বদি ইন্দেক্স আইদা লৈবা ইলিমেন্তকী ভেল্যু অসি আইগী ফেক্তোরিএল ওইগনি করিগুম্বা আই অসি পয়র ওইরবদি এন অমা পেরামিতর ওইনা লৌরিবা f ফংসন অদু ইমপ্লিমেন্ত তৌ, # >>> f.call(5)
# [1, 2, 6, 24, 15]
def f(n)
","def f(n)
  (1..n).map do |i|
    if i.even?
      (1..i).inject(:*) || 1
    else
      (1..i).inject(:+)
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_f
    candidate = method(:f)
    assert_equal([1, 2, 6, 24, 15], candidate.call(5))
    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))
    assert_equal([1], candidate.call(1))
    assert_equal([1, 2, 6], candidate.call(3))
  end
end
"
HumanEval_107,mni_Beng,rb,"খুদম 1:রেঞ্জ ((1, n) য়াওনা) মনুংদা লৈবা ইন্তিজর পালিন্দ্রোমশিং।পোজিতিব ওইবা ইন্তিজর n অমা পীরবদি, মশীং মান্নবা অমসুং মান্নদবা মশীং লৈবা এরে অমা হল্লকপা # >>> even_odd_palindrome.call(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome.call(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
def even_odd_palindrome(n)
","def even_odd_palindrome(n)
  even_count = 0
  odd_count = 0

  (1..n).each do |num|
    if num.to_s == num.to_s.reverse
      if num.even?
        even_count += 1
      else
        odd_count += 1
      end
    end
  end

  [even_count, odd_count]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_palindrome
    candidate = method(:even_odd_palindrome)
    assert_equal([8, 13], candidate.call(123))
    assert_equal([4, 6], candidate.call(12))
    assert_equal([1, 2], candidate.call(3))
    assert_equal([6, 8], candidate.call(63))
    assert_equal([5, 6], candidate.call(25))
    assert_equal([4, 6], candidate.call(19))
    assert_equal([4, 5], candidate.call(9))
    assert_equal([0, 1], candidate.call(1))
  end
end
"
HumanEval_108,mni_Beng,rb,"খুদম ওইনা -123দা সিগ্নেত দিজিত -1, 2, অমসুং 3 লৈ।করিগুম্বা নম্বর অমা নেগেতিব ওইরবদি, মদুগী অহানবা সাইন তৌরবা দিজিত অদু নেগেতিব ওইগনি: মশীংগী অপুনবা মশীং > 0 লৈবা ইলিমেন্ত মশীং।ইন্তিজরশিংগী এরে অমা লৌদুনা # >>> count_nums.call([])
# 0
# >>> count_nums.call([-1, 11, -11])
# 1
# >>> count_nums.call([1, 1, 2])
# 3
def count_nums(arr)
","def count_nums(arr)
  arr.count do |num|
    num.to_s.chars.map(&:to_i).sum > 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_nums
    candidate = method(:count_nums)
    assert_equal(0, candidate.call([]))
    assert_equal(0, candidate.call([-1, -2, 0]))
    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))
    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))
    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))
    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))
    assert_equal(1, candidate.call([0, 1]))
    assert_equal(1, candidate.call([1]))
  end
end
"
HumanEval_109,mni_Beng,rb,"খুদম ওইনা: খঙজিনগদবা: পীরিবসিদা পীরিবা এরে অসিদা য়ুনিক ইলিমেন্তশিং লৈগনি হায়না গেরেন্তী পীরি।পীরিবা এরে অদু খরা লৈরবদি trull রিটর্ন তৌরো. অদুগা অমুক হন্না চুম্মি নত্রগা অমুক হন্না অরানবনি.মথক্তা পীরিবা ওপরেসন অসি পাংথোক্তুনা সোর্ট তৌরবা এরে অসি ফংহনবা য়ারবদিএরেদা লৈরিবা অহৌবা পোজিসন হায়বদি 0শুবা ইন্দেক্স।অরোইবা এরেগী ইলিমেন্ত অসি দা হোংদোক্লগনিরাইট সফর ওপরেসন অমনা এরেগী ইলিমেন্ত খুদিংমক অমগা অমগা সফর তৌই ।নহাক্না রাইট শিফ্ট ওপরেসন অসি মশীং কয়া থোক্না পাংথোকপা য়াগনি।পীরিবা এরে অদুদা মখাদা পীরিবা ওপরেসন অসি পাংথোক্কনি: মসি পাংথোক্তুনা এরে অমা হন্থবা য়াদবা মথং-মনাওদা মথং-মনাও নাইহনবা এরে অদুদা য়াওরিবা নম্বরশিং অদু খুদোংথীবা থোক্তুনা ওর্দর তৌগনি। অদোমগী থবক অসি ঐখোয়না এন ইন্তিজরশিং আরর[1], আরর[2], ..., আরর[এন]গী এরে 'আরর' অমা লৈ।# >>> move_one_ball.call([3, 4, 5, 1, 2])
# true
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball.call([3, 5, 4, 1, 2])
# false
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
def move_one_ball(arr)
","def move_one_ball(arr)
  return true if arr.empty?

  n = arr.size
  count_rotation_point = 0
  rotation_index = -1

  (0...n).each do |i|
    next_index = (i + 1) % n
    if arr[i] > arr[next_index]
      count_rotation_point += 1
      rotation_index = next_index
    end
  end

  count_rotation_point <= 1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_move_one_ball
    candidate = method(:move_one_ball)
    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))
    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))
    assert_equal(false, candidate.call([4, 3, 1, 2]))
    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))
    assert_equal(true, candidate.call([]))
  end
end
"
HumanEval_110,mni_Beng,rb,"খুদম ওইনা: মদু নৎক্রবদি, ""নো"" অমুক হন্না ফংগনি.lst1গী এলিমেন্ত পুম্নমকপু মান্নহন্নবা, ""YES"" হল্লকপাকরিগুম্বা ইলিমেন্তশিং অসি LST1 অমসুং LST2গী মরক্তা একচেঞ্জ তৌবা য়াবা ওইরবদিইস্ত1 অমসুং ইস্ত2গী মরক্তা একচেঞ্জ তৌনবগী ইলিমেন্তশিংগী মশীংদা অকক্নবা থাক লৈতে।মখোয়শিং অসিগা লোয়ননা ইস্ত1 অসি অরে অমখক্তগী এরে অমা ওইহল্লু।অমসুং ইলিমেন্তশিং একচেঞ্জ তৌবা য়াব্রা হায়বদু লেপ্পী ।মসিগী প্রোব্লেম অসিদা, অদোম্না মশীংগী এরে অনি লৌবা ফংসন অমা ইমপ্লিমেন্ত তৌগনি,# >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
def exchange(lst1, lst2)
","def exchange(lst1, lst2)
  # Check if lst1 already consists solely of even numbers
  return ""YES"" if lst1.all?(&:even?)

  # Check if there are at least as many even numbers in lst2
  # as there are odd numbers in lst1
  odd_count_lst1 = lst1.count(&:odd?)
  even_count_lst2 = lst2.count(&:even?)

  odd_count_lst1 <= even_count_lst2 ? ""YES"" : ""NO""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_exchange
    candidate = method(:exchange)
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))
    assert_equal(""NO"", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))
    assert_equal(""YES"", candidate.call([5, 7, 3], [2, 6, 4]))
    assert_equal(""NO"", candidate.call([5, 7, 3], [2, 6, 3]))
    assert_equal(""NO"", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))
    assert_equal(""YES"", candidate.call([100, 200], [200, 200]))
  end
end
"
HumanEval_111,mni_Beng,rb,"খুদম: করিগুম্বা ময়েক কয়া অমগা মান্ননা থোক্লবদি, ময়ামদু হন্না হন্না ইশিনবা।মশীং খ্বাইদগী য়াম্না হন্না পাংথোকপা অমসুং মশীং অদুগা চান্নবা মশীং য়াউবা অইবগী মমীং।স্পেস খায়দোকপা অপীকপা ময়েকশিংবু মহুৎ শিনবা স্ত্রিং অমা পীরবদি, হেশ অমা হল্লকপা # >>> histogram.call(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram.call(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""b b b b a"")
# {""b"" => 4}
# >>> histogram.call("""")
# {}
def histogram(test)
","def histogram(test)
  return {} if test.empty?

  count = Hash.new(0)

  test.split.each do |char|
    count[char] += 1
  end

  max_count = count.values.max
  count.select { |_, value| value == max_count }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_histogram
    candidate = method(:histogram)
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b b a""))
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b c a b""))
    assert_equal({""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1}, candidate.call(""a b c d g""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({""b"" => 4}, candidate.call(""b b b b a""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({}, candidate.call(""""))
    assert_equal({""a"" => 1}, candidate.call(""a""))
  end
end
"
HumanEval_112,mni_Beng,rb,"খুদম অদোম্না রিজল্ত স্ত্রিং অমসুং চেক তৌনবগীদমক চুম্মি/নকুম্মি য়াওবা এরে অমা হল্লক্কদবনি.স্ত্রিং অমবু করিগুম্বা মদুগী মমাং অমসুং মাংলোমদা মান্নবা মওংদা হন্দোক্লবদি মদু পলিন্দ্রোম কৌই।অদুদগী রিজল্ত স্ত্রিং অদু পালিন্দ্রোম ওইব্রা য়েংউ. ঐখোয়না s অমসুং c স্ত্রিং অনি পীরি, s গী সিগী কেরেক্তর অমহেক্তগা মান্নবা কেরেক্তর পুম্নমক অদোম্না মুত্থৎপা তাই।তৌগদবা থবকশিং# >>> reverse_delete.call(""abcde"", ""ae"")
# [""bcd"", false]
# >>> reverse_delete.call(""abcdef"", ""b"")
# [""acdef"", false]
# >>> reverse_delete.call(""abcdedcba"", ""ab"")
# [""cdedc"", true]
def reverse_delete(s, c)
","def reverse_delete(s, c)
  # Remove all characters in c from s
  filtered_string = s.delete(c)
  
  # Check if the filtered string is a palindrome
  is_palindrome = filtered_string == filtered_string.reverse
  
  # Return the result array
  [filtered_string, is_palindrome]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_reverse_delete
    candidate = method(:reverse_delete)
    assert_equal([""bcd"", false], candidate.call(""abcde"", ""ae""))
    assert_equal([""acdef"", false], candidate.call(""abcdef"", ""b""))
    assert_equal([""cdedc"", true], candidate.call(""abcdedcba"", ""ab""))
    assert_equal([""dik"", false], candidate.call(""dwik"", ""w""))
    assert_equal(["""", true], candidate.call(""a"", ""a""))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", """"))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", ""v""))
    assert_equal([""abba"", true], candidate.call(""vabba"", ""v""))
    assert_equal(["""", true], candidate.call(""mamma"", ""mia""))
  end
end
"
HumanEval_113,mni_Beng,rb,"ইনপুতকী i'th স্ত্রিংদা লৈবা ইপদ দিজিতশিংগী মশিং য়াওবা।ইনপুতকী স্ত্রিং i।"" মফম অসিদা আই পুম্নমক অসি নম্বর  অসিনা মহুৎ শিনগদবনি।আউতপুৎকী ইলিমেন্ত i খুদিংমক অসি "" দা য়াওরিবা অখন্নবা ইলিমেন্তশিংগী মশিং ওইগদবনি।স্ত্রিংশিংগী এরে অমা পীরগা, মদুদা স্ত্রিং খুদিংমক দিজিতশিংখক্তগী শেম্মি, এরে অমা হল্লকই. # >>> odd_count.call([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count.call([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
def odd_count(lst)
","def odd_count(lst)
  lst.map do |num_str|
    count = num_str.count('13579')
    ""the number of odd elements #{count}n the str#{count}ng #{count} of the #{count}nput.""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_odd_count
    candidate = method(:odd_count)
    assert_equal([""the number of odd elements 4n the str4ng 4 of the 4nput.""], candidate.call([""1234567""]))
    assert_equal([""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], candidate.call([""3"", ""11111111""]))
    assert_equal([""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""], candidate.call([""271"", ""137"", ""314""]))
  end
end
"
HumanEval_114,mni_Beng,rb,"খুদম মশিংইন্তিজর মশীংশিংগী এরে অমা পীরগা, মখুৎ নত্তবা সব-এরে অমগী মিনিমম সুম ফংলু # >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum.call([-1, -2, -3])
# -6
def minSubArraySum(nums)
","def minSubArraySum(nums)
  min_sum = nums[0]
  current_sum = 0
  nums.each do |num|
    if current_sum > 0
      current_sum = num
    else
      current_sum += num
    end
    min_sum = [min_sum, current_sum].min
  end
  min_sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minSubArraySum
    candidate = method(:minSubArraySum)
    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))
    assert_equal(-6, candidate.call([-1, -2, -3]))
    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))
    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))
    assert_equal(0, candidate.call([0, 10, 20, 1000000]))
    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))
    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))
    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))
    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))
    assert_equal(-10, candidate.call([-10]))
    assert_equal(7, candidate.call([7]))
    assert_equal(-1, candidate.call([1, -1]))
  end
end
"
HumanEval_115,mni_Beng,rb,"খুদম 1:অদোম্না বেকেতশিং অসি হন্থহনবগী মথৌ তাবা মশীংদু পুথোকউ.অদোমগী থবক অসি ঈশিং থোংবশিংবু থুম হাপ্পদা বেকেতশিং শীজিন্নবনি।অমসুং বেক্তর খুদিংমক্কী কেপাসিতি মান্নৈ।কূপ খুদিংমক্তা মদুদগী ঈশিং লৌথোক্নবা শীজিন্নবা য়াবা মতিক চাবা বেকেত অমা লৈ,অমসুং মথং মথং লাক্লিবা 1 খুদিংমক্না ঈশিংগী য়ুনিৎ অমখক্তমক মহুৎ শিনগনি।নহাক্না পোৎলমশিংগী চিংবা থোংবা গ্রিদ অমা পীরি। মথং খুদিংমক্না পোৎলম অমখক্তমক উৎলি, # >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
def max_fill(grid, capacity)
","def max_fill(grid, capacity)
  total_water_units = grid.flatten.sum
  (total_water_units.to_f / capacity).ceil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_fill
    candidate = method(:max_fill)
    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))
    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))
    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))
    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))
    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))
  end
end
"
HumanEval_116,mni_Beng,rb,"মসি মখাদা পীরিবা অসুম্না চৎনহনগদবনি:মান্নবা মশীংগী 1গীদমক্তা, দেসিমেল ভেল্যুদা য়ুম্ফম ওইদুনা মখল খায়দোকউ.বাইনারিগী মওং অসিদা মথং মথং হেনগৎলকপা মওংদা লৈবা মশীংশিং।মসিগী কেতা অসিদা, নহাক্না নেগেতিব ওইদবা ইন্তিজরশিংগী এরে অমা গী মতুং ইন্না সেয়র তৌগদবনি।# >>> sort_array.call([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array.call([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array.call([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
def sort_array(arr)
","def sort_array(arr)
  arr.sort_by { |n| [n.to_s(2).count('1'), n] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))
    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))
    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))
    assert_equal([], candidate.call([]))
    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))
    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
  end
end
"
HumanEval_117,mni_Beng,rb,"খুদমশিং: খঙজিনগদবা: অদোম্না ইনপুৎ স্ত্রিং অদুদা অখন্নবা ময়েকশিং অমসুং স্পেসশিং খক্তমক য়াউই হায়না লৌবা য়াই।করিগুম্বা স্ত্রিং s অসি মরুম ওইরবদি ফংসন অসিনা মরুম লৈতবা এরে অমা হল্লকই।ৱাহৈশিং অসি স্ত্রিং s দা য়াওবগী মথং-মনাওদা, কন্সোনেন্ত n।চপ মান্ননা য়াওবা স্ত্রিং s দগী ৱাহৈ পুম্নমক্কী এরে অমা হল্লকপা ফংসন স্ত্রিং s অমসুং নেচরেল নম্বর n অমা পীরবদি, অদোম্না # >>> select_words.call(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words.call(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words.call(""simple white space"", 2)
# []
# >>> select_words.call(""Hello world"", 4)
# [""world""]
# >>> select_words.call(""Uncle sam"", 3)
# [""Uncle""]
def select_words(s, n)
","def select_words(s, n)
  vowels = ""aeiouAEIOU""
  words = s.split
  words.select do |word|
    consonant_count = word.chars.count { |char| !vowels.include?(char) }
    consonant_count == n
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_select_words
    candidate = method(:select_words)
    assert_equal([""little""], candidate.call(""Mary had a little lamb"", 4))
    assert_equal([""Mary"", ""lamb""], candidate.call(""Mary had a little lamb"", 3))
    assert_equal([], candidate.call(""simple white space"", 2))
    assert_equal([""world""], candidate.call(""Hello world"", 4))
    assert_equal([""Uncle""], candidate.call(""Uncle sam"", 3))
    assert_equal([], candidate.call("""", 4))
    assert_equal([""b"", ""c"", ""d"", ""f""], candidate.call(""a b c d e f"", 1))
  end
end
"
HumanEval_118,mni_Beng,rb,"খুদম: অদোম্না পীরিবা স্ত্রিং অসিদা ইংলিশকী ময়েক খক্তমক য়াওরি হায়না লৌবা য়াই।মথক্তা পনখ্রিবা কন্দিসন অসিগা লোয়নবা ভোকেল অমা ফংবিয়ু।অহৌবা অমসুং অরোইবা ভোকেলশিং অসি মশীং থীদে। করিগুম্বা অদোম্না ভোকেলশিং অসি য়াওদ্রবদি, অহাংবা স্ত্রিং অমা হল্লকপীয়ু।ৱাহৈগী অচৌবা কেস সেন্সিতিব ওইবা (অচৌবা অমসুং অচৌবা) দগী কোন্সোনেন্ত অনি।অদোমদা ৱাহৈ অমা পীরি। অদোমগী থবকদি য়েক্নবগী মরক্তা লৈরিবা খ্বাইদগী নকপা ভোকেল অদু ফংবনি।# >>> get_closest_vowel.call(""yogurt"")
# ""u""
# >>> get_closest_vowel.call(""FULL"")
# ""U""
# >>> get_closest_vowel.call(""quick"")
# """"
# >>> get_closest_vowel.call(""ab"")
# """"
def get_closest_vowel(word)
","def get_closest_vowel(word)
  vowels = ""aeiouAEIOU""
  (1...word.length - 1).reverse_each do |i|
    if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])
      return word[i]
    end
  end
  return """"
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_closest_vowel
    candidate = method(:get_closest_vowel)
    assert_equal(""u"", candidate.call(""yogurt""))
    assert_equal(""u"", candidate.call(""full""))
    assert_equal("""", candidate.call(""easy""))
    assert_equal("""", candidate.call(""eAsy""))
    assert_equal("""", candidate.call(""ali""))
    assert_equal(""a"", candidate.call(""bad""))
    assert_equal(""o"", candidate.call(""most""))
    assert_equal("""", candidate.call(""ab""))
    assert_equal("""", candidate.call(""ba""))
    assert_equal("""", candidate.call(""quick""))
    assert_equal(""i"", candidate.call(""anime""))
    assert_equal("""", candidate.call(""Asia""))
    assert_equal(""o"", candidate.call(""Above""))
  end
end
"
HumanEval_119,mni_Beng,rb,"খুদমশিং: অফবা স্ত্রিং অমা শেম্বা য়াবা লম্বী অমা লৈরবদি 'ই' হল্লকপা, অমসুং অতোপ্পা লম্বীদা 'নো' হল্লকপা।"" (()) "" অসি নত্তে. খুদম ওইনা, '(((() ' স্ত্রিং অসি অফবনি, অদুগা  স্ত্রিং অসি অফবনি।স্ত্রিং S অমবু করিগুম্বা অমসুং মদুগী পেরান্সেজ পুম্নমক S দা লৈবা তারবদি  অফবা হায়না লৌগনি।মদুগী ফল ওইনা ফংগদবা স্ত্রিং অদু অফবা ওইগনি।অদোমগী থবক অসি স্ত্রিং অনি অসি শম্নহনবা য়াব্রা হায়বদু য়েংবনি ।ক্রেন্তেস ""("" নত্ত্রগা ক্রেন্তেস "") "" খক্তদা থাগৎপা।অদোম্না স্ত্রিং অনিগী এরে অমা ফংলে, স্ত্রিং অনিমক ওপন # >>> match_parens.call([""()("", "")""])
# ""Yes""
# >>> match_parens.call(["")"", "")""])
# ""No""
def match_parens(lst)
","def match_parens(lst)
  a, b = lst

  # Define a helper method to check if a string is balanced
  def balanced?(s)
    count = 0
    s.each_char do |c|
      count += 1 if c == '('
      count -= 1 if c == ')'
      return false if count < 0
    end
    count == 0
  end

  # Check if either concatenation forms a good string
  if balanced?(a + b) || balanced?(b + a)
    ""Yes""
  else
    ""No""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_match_parens
    candidate = method(:match_parens)
    assert_equal(""Yes"", candidate.call([""()("", "")""]))
    assert_equal(""No"", candidate.call(["")"", "")""]))
    assert_equal(""No"", candidate.call([""(()(())"", ""())())""]))
    assert_equal(""Yes"", candidate.call(["")())"", ""(()()(""]))
    assert_equal(""Yes"", candidate.call([""(())))"", ""(()())((""]))
    assert_equal(""No"", candidate.call([""()"", ""())""]))
    assert_equal(""Yes"", candidate.call([""(()("", ""()))()""]))
    assert_equal(""No"", candidate.call([""(((("", ""((())""]))
    assert_equal(""No"", candidate.call(["")(()"", ""(()(""]))
    assert_equal(""No"", candidate.call(["")("", "")(""]))
    assert_equal(""Yes"", candidate.call([""("", "")""]))
    assert_equal(""Yes"", candidate.call(["")"", ""(""]))
  end
end
"
HumanEval_120,mni_Beng,rb,"খুদম 1:অরদা খ্বাইদগী য়াম্বা কে মশীং লৈবা অশাং k গী।ইন্তিজরশিংগী এরে অমা অমসুং পোজিতিব ইন্তিজর k অমা পীরদুনা, মথং-মনাও নাইরবা এরে অমা হল্লকই # >>> maximum.call([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum.call([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
def maximum(arr, k)
","def maximum(arr, k)
  arr.sort.last(k).sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_maximum
    candidate = method(:maximum)
    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))
    assert_equal([4, 4], candidate.call([4, -4, 4], 2))
    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))
    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))
    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))
    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))
    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))
    assert_equal([5], candidate.call([1, 0, 5, -7], 1))
    assert_equal([-4, 4], candidate.call([4, -4], 2))
    assert_equal([-10, 10], candidate.call([-10, 10], 2))
    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))
  end
end
"
HumanEval_121,mni_Beng,rb,"খুদমশিং ইন্তিজরশিংগী নোন-ইচিক ওইবা এরে অমা পীরবদি, মান্নবা পোজিসনশিংদা লৈবা অপাম্বা ইলিমেন্তশিংগী অপুনবাদু হল্লকই. # >>> solution.call([5, 8, 7, 1])
# 12
# >>> solution.call([3, 3, 3, 3, 3])
# 9
# >>> solution.call([30, 13, 24, 321])
# 0
def solution(lst)
","def solution(lst)
  lst.each_with_index.reduce(0) do |sum, (val, idx)|
    (idx.even? && val.odd?) ? sum + val : sum
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solution
    candidate = method(:solution)
    assert_equal(12, candidate.call([5, 8, 7, 1]))
    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))
    assert_equal(0, candidate.call([30, 13, 24, 321]))
    assert_equal(5, candidate.call([5, 9]))
    assert_equal(0, candidate.call([2, 4, 8]))
    assert_equal(23, candidate.call([30, 13, 23, 32]))
    assert_equal(3, candidate.call([3, 13, 2, 9]))
  end
end
"
HumanEval_122,mni_Beng,rb,"খুদম: অরগী অহানবা k ইলিমেন্তশিংগী মরক্তগী দিজিত অনিদগী হেন্দবা ইলিমেন্তশিংগী অপুনবা।ইন্তিজরশিং আর আর অমসুং ইন্তিজর কেগী নোন-এম্পোইত এরে অমা পীরদুনা, রিটর্ন # >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
def add_elements(arr, k)
","def add_elements(arr, k)
  arr.first(k).select { |num| num.abs.to_s.length <= 2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add_elements
    candidate = method(:add_elements)
    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))
    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))
    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))
    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))
    assert_equal(1, candidate.call([1], 1))
  end
end
"
HumanEval_123,mni_Beng,rb,"get_odd_collatz(5) না [1, 5] হল্লকই। # কোলাতজ সিক্বেন্স 5 অসি [5, 16, 8, 4, 2, 1] ওইবনা মরম ওইদুনা ওদ্দ নম্বরশিং অসি 1 অমসুং 5 খক্তনি।খুদম ওইনা: 2. রিদর্স এরে অসি হেনগৎলক্লিবা ওর্দরদা সেয়র তৌই।1. কোলাতজ ((1) অসি [1]নি।খঙজিনগদবা:তর্ম প্লাস 1গী কঞ্জেকচর অসিদি nকী ভেল্যু করিনো হায়বগী মগুন লৈতনা, সিক্বেন্স অসি 1 য়ৌগনি হায়বসিনি।করিগুম্বা মমাংগী তর্ম অদু পোরগ ওইরবদি, মথংগী তর্ম অদু মমাংগী তর্ম অদুগী 3গী মশীং ওইগনি।মমাংগী তর্ম অসি মখাদা পীরিবা অসুম্না ওইগনি: করিগুম্বা মমাংগী তর্ম অসি পয়র ওইরবদি, মথংগী তর্ম অসি গী তর্ম অমগী শরুক অমা ওইগনি।মখাদা পীরিবা অসুম্না: পোজিতিব ইন্তিজর n অমহেক্তদগী হৌবা। তুংদা তর্ম খুদিংমক দগী ফংই।কোলাৎজ কনজেকচর অসি মেথমেতিক্ শিংদা তাকপা সিক্বেন্স অমা লৈনবা কঞ্জেকচর অমনি ।পোজিতিব ইন্তিজর n অমা পীরবদি, কোলাৎজ সিক্বেন্সতা অপিকপা মশীংশিং য়াওবা সোর্টেদ এরে অমা হল্লকই।# >>> get_odd_collatz.call(5)
# [1, 5]
def get_odd_collatz(n)
","def get_odd_collatz(n)
  collatz_sequence = []
  while n != 1
    collatz_sequence << n if n.odd?
    if n.even?
      n = n / 2
    else
      n = 3 * n + 1
    end
  end
  collatz_sequence << 1 if n == 1

  collatz_sequence.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_odd_collatz
    candidate = method(:get_odd_collatz)
    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))
    assert_equal([1, 5], candidate.call(5))
    assert_equal([1, 3, 5], candidate.call(12))
    assert_equal([1], candidate.call(1))
  end
end
"
HumanEval_124,mni_Beng,rb,"৪. তাং অসি ফোর্মেৎ অসিদা ওইগদবনি: এম.এম.-দি.দি.-য়য়য়ী।থাশিং অসি ১দগী তাবা নত্ত্রগা ১২দগী হেন্না লৈবা ওইরোইদবনি।থা 1,3,5,7,8,10,12গী ওইনা নুমিৎ মশীং অসি 1দগী হন্থবা নত্ত্রগা 31দগী হেনবা ওইগদবনি। অমসুং থা 4,6,9,11গী ওইনা নুমিৎ মশীং অসি 1দগী হন্থবা নত্ত্রগা 30দগী হেনবা ওইগদবনি। অমসুং থা 2গী ওইনা নুমিৎ মশীং অসি 1দগী হন্থবা নত্ত্রগা 29দগী হেনবা ওইগদবনি।1. তাং স্ত্রিং অসি শূন্য নত্তে।মখাদা পীরিবা কাংলোন পুম্নমক অসি ঙাক্লবদি তাং অসি চৎনবা য়াগনি: তারিখ অদু চৎনবা য়াবদি চুম্মি, করিগুম্বা চৎনদ্রবদি অরানবনি হায়বা রিটর্ন তৌই।অদোম্না পীরিবা তাং স্ত্রিং অমবু ভেলিদেত তৌবা ফংসন অমা ইগদবনি অমসুং # >>> valid_date.call(""03-11-2000"")
# true
# >>> valid_date.call(""15-01-2012"")
# false
# >>> valid_date.call(""04-0-2040"")
# false
# >>> valid_date.call(""06-04-2020"")
# true
# >>> valid_date.call(""06/04/2020"")
# false
def valid_date(date)
","def valid_date(date)
  return false if date.nil? || date.empty?
  
  # Check if the date format is correct
  match = date.match(/^(\d{2})-(\d{2})-(\d{4})$/)
  return false unless match
  
  month, day, year = match.captures.map(&:to_i)
  
  # Check if month is valid
  return false if month < 1 || month > 12
  
  # Check if day is valid according to the month
  case month
  when 1, 3, 5, 7, 8, 10, 12
    return day >= 1 && day <= 31
  when 4, 6, 9, 11
    return day >= 1 && day <= 30
  when 2
    return day >= 1 && day <= 29
  else
    return false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_valid_date
    candidate = method(:valid_date)
    assert_equal(true, candidate.call(""03-11-2000""))
    assert_equal(false, candidate.call(""15-01-2012""))
    assert_equal(false, candidate.call(""04-0-2040""))
    assert_equal(true, candidate.call(""06-04-2020""))
    assert_equal(true, candidate.call(""01-01-2007""))
    assert_equal(false, candidate.call(""03-32-2011""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""04-31-3000""))
    assert_equal(true, candidate.call(""06-06-2005""))
    assert_equal(false, candidate.call(""21-31-2000""))
    assert_equal(true, candidate.call(""04-12-2003""))
    assert_equal(false, candidate.call(""04122003""))
    assert_equal(false, candidate.call(""20030412""))
    assert_equal(false, candidate.call(""2003-04""))
    assert_equal(false, candidate.call(""2003-04-12""))
    assert_equal(false, candidate.call(""04-2003""))
  end
end
"
HumanEval_125,mni_Beng,rb,"খুদমশিং অলফাবেৎ, ওর্দ (a) = 0, ওর্দ (b) = 1, ... ওর্দ (z) = 25করিগুম্বা কম্মা অমত্তা লৈত্রবদি, অদোম্না দা অপদেৎ ওইবা মথং মনাওদা লৈবা অপীকপা ময়েকশিংগী মশিংদু হল্লক্কদবনি.ৱাহৈগী স্ত্রিং অমা পীদুনা, করিগুম্বা অদোম্না পাম্লিবা তেক্সতা হৱাইতস্পেস অমত্তা লৈত্রবদি, হৱাইতস্পেসতা খায়দোক্লবা ৱাহৈগী এরে অমা হল্লকপা # >>> split_words.call(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""abcdef"")
# 3
def split_words(txt)
","def split_words(txt)
  if txt.include?(' ')
    return txt.split(' ')
  elsif txt.include?(',')
    return txt.split(',')
  else
    odd_count = txt.chars.count { |char| ('a'..'z').include?(char) && (char.ord - 'a'.ord).odd? }
    return odd_count
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_split_words
    candidate = method(:split_words)
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello world!""))
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello,world!""))
    assert_equal([""Hello"", ""world,!""], candidate.call(""Hello world,!""))
    assert_equal([""Hello,Hello,world"", ""!""], candidate.call(""Hello,Hello,world !""))
    assert_equal(3, candidate.call(""abcdef""))
    assert_equal(2, candidate.call(""aaabb""))
    assert_equal(1, candidate.call(""aaaBb""))
    assert_equal(0, candidate.call(""""))
  end
end
"
HumanEval_126,mni_Beng,rb,"খুদমশিং মশীং, ফোলস হল্লকই। নেগেতিব মশীং অমত্তা লৌরোই অমসুং ইন্তিজরখক্তমক লৌরোই।করিগুম্বা এরে অসিদা চপ মান্নবা দুপ্লিকেত 1দগী হেন্না লৈরবদি,মশীংগী এরে অমা পীরবদি, মখোয়দু মথং-মনাও নাইদ্রবসু হল্লকই.# >>> is_sorted.call([5])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5])
# false
# >>> is_sorted.call([1, 2, 3, 4, 5, 6])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])
# false
# >>> is_sorted.call([1, 2, 2, 3, 3, 4])
# true
# >>> is_sorted.call([1, 2, 2, 2, 3, 4])
# false
def is_sorted(lst)
","def is_sorted(lst)
  lst.each_cons(2).with_index do |(a, b), index|
    return false if a > b
    return false if index < lst.length - 2 && a == b && lst[index + 2] == b
  end
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_sorted
    candidate = method(:is_sorted)
    assert_equal(true, candidate.call([5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))
    assert_equal(true, candidate.call([]))
    assert_equal(true, candidate.call([1]))
    assert_equal(false, candidate.call([3, 2, 1]))
    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))
    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 3, 4]))
  end
end
"
HumanEval_127,mni_Beng,rb,"[ইনপুত/আউটপুত] সেম্পলশিং: করিগুম্বা ইন্তরবেল অনি অসি ইন্তরসেৎ তৌদ্রবদি, ""NO"" হল্লকপা.করিগুম্বা ওইদ্রবদি, ""NO"" অমুক হন্না পী।করিগুম্বা ইন্তর্সেক্সনগী অশাং অসি প্রাইম নম্বর অমা ওইরবদি, ""YES"" হল্লকপা, মসিগী অশাং অসি 1 ওই, মসি প্রাইম নম্বর নত্তে।খুদম ওইনা, ইন্তরবেলশিং (1, 3), (2, 4) গী ইন্তরসেক্সন অসি (2, 3) ইন্তরবেলশিং অসি প্রাইম নম্বর অমনি।অদোমগী থবক অসি, হায়রিবা অনি অসিগী মরক্তা লৈরিবা মরীগী অশাংবদু পীরিবা ইন্তরবেল খুদিংমক্কী ওইনা, মসিগী হৌরকফম অসি মসিগী অরোইবা অদুদগী পীকই নত্ত্রগা মান্নৈ হায়না লৌনৈ।হৌরকফম অমসুং অরোইবা অনিমক য়াওরি।পীরিবা ইন্তরবেলশিং অসি ক্লোজ তৌই, মসিনা তাক্লিবদি ইন্তরবেল (অহৌবা, অরোইবা) মফম খুদিংমক্তা ইন্তিরেল অমমম অসি ইন্তিজরশিংগী জুরা অমনি। খুদম ওইনা, ইন্তিরেল = (হৌরকফম, অরোইবা) = (1, 2) ।অদোম্না ইন্তরবেল অনি ফংলি,# >>> intersection.call([1, 2], [2, 3])
# ""NO""
# >>> intersection.call([-1, 1], [0, 4])
# ""NO""
# >>> intersection.call([-3, -1], [-5, 5])
# ""YES""
def intersection(interval1, interval2)
","def intersection(interval1, interval2)
  start1, end1 = interval1
  start2, end2 = interval2

  intersection_start = [start1, start2].max
  intersection_end = [end1, end2].min

  if intersection_start > intersection_end
    return ""NO""
  end

  intersection_length = intersection_end - intersection_start + 1

  return ""YES"" if prime?(intersection_length)

  ""NO""
end

def prime?(n)
  return false if n <= 1
  return true if n == 2 || n == 3

  (2..Math.sqrt(n).to_i).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersection
    candidate = method(:intersection)
    assert_equal(""NO"", candidate.call([1, 2], [2, 3]))
    assert_equal(""NO"", candidate.call([-1, 1], [0, 4]))
    assert_equal(""YES"", candidate.call([-3, -1], [-5, 5]))
    assert_equal(""YES"", candidate.call([-2, 2], [-4, 0]))
    assert_equal(""NO"", candidate.call([-11, 2], [-1, -1]))
    assert_equal(""NO"", candidate.call([1, 2], [3, 5]))
    assert_equal(""NO"", candidate.call([1, 2], [1, 2]))
    assert_equal(""NO"", candidate.call([-2, -2], [-3, -2]))
  end
end
"
HumanEval_128,mni_Beng,rb,"খুদম: খঙজিনগদবা: অহাংবা আর.আর.গীদমক রিটর্ন নিল।এরেদা লৈরিবা নম্বর খুদিংমক্কী মমীং অসি 1, -1 নত্ত্রগা 0 দা মহুৎ শিনগনি।ইন্তিজরশিংগী মগনিতীশিংগী অপুনবা অদু সাইন খুদিংমক্কী প্রদক্তনা হেক মপুং ফাহনবা অদোম্না ইন্তিজরশিংগী এরে অমা পীরে অমসুং অদোম্না মদুগী রিতোর্ন তৌগদবনি # >>> prod_signs.call([1, 2, 2, -4])
# 9
# >>> prod_signs.call([0, 1])
# 0
# >>> prod_signs.call([])
# nil
def prod_signs(arr)
","def prod_signs(arr)
  return nil if arr.empty?
  
  product_signs = arr.reduce(1) { |prod, num| prod * num <=> 0 }
  sum_magnitudes = arr.map(&:abs).sum
  
  product_signs * sum_magnitudes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prod_signs
    candidate = method(:prod_signs)
    assert_equal(-9, candidate.call([1, 2, 2, -4]))
    assert_equal(0, candidate.call([0, 1]))
    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))
    assert_equal(nil, candidate.call([]))
    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))
    assert_equal(4, candidate.call([-1, 1, -1, 1]))
    assert_equal(-4, candidate.call([-1, 1, 1, 1]))
    assert_equal(0, candidate.call([-1, 1, 1, 0]))
  end
end
"
HumanEval_129,mni_Beng,rb,"খুদমশিং: মিনমম ওইবা লম্বীনা চৎলিবা সেলশিংদা লৈবা ভেল্যুশিংগী ওর্দর তৌরবা এরে অমা হল্লকই. পাউখুম অদু অমত্তা ওইগনি হায়না গেরেন্তী পীরি।ইস্ত_এ[য়] = ইস্ত_বি[য়] ।অসুম্না lst_A[i] < lst_B[i] অমসুং j অমহেক্তগীদমক (1 <= j < i) ঐখোয়না অতোপ্পা ৱাহৈদা হায়রবদা, lst_Bদগী হেন্না, ইন্তিজর ইন্দেক্স i (1 <= i <= k) লৈ।(ঐখোয়না মখোয়শিং অসি ইস্ত_এ অমসুং ইস্ত_বি হায়না কৌরসি), ইস্ত_এ অসি লেক্সিকোগ্রাফিক ওইনা হন্থৈ ।সেলশিং অদুগী ভেল্যুশিং অদুগী ওর্দর তৌরবা এরেশিং অদু শেম্লবা মতুংদা A অমসুং B চৎকনি লম্বী A (শাংথানা k) অসি লম্বী B (শাংথানা k) দগী পীকই হায়না লৌই, করিগুম্বা নহাক্না গ্রিদতগী লাপ্না চৎপা ঙম্লোই।তঙাইফদনা তোঙানবা ওইগদবনি) ।পুক্নিং চঙবীয়ু মদুদি অশাংবা kগী লম্বী হায়বসিনা চপ চানা k সেল (নত্তে ংবদা) চৎপদু তাকই।সেল. অতোপ্পা ৱাহৈদা হায়রবদা, অদোম্না হৌজিক লৈরিবা ঊৎ অদুগা নাকল অমগা য়েংনরিবা সেলশিংদা চৎপা য়াই।সেল অমহেক্তদগী, অমসুং খোঙথাং খুদিংদা নহাক্না য়ুম্লোন্নরিবা সেল অমহেক্তদা চৎপা য়াই,গ্রিদ অদুদা লৈরিবা অশাংবা kগী মিনিমম ওইবা লম্বী অদু খংদোকপা তাই। অদোম্না হৌবা য়াই।গ্রিদকী সেলশিংদা চপ মান্ননা অমুক্তি ইনক্লুসিব ওইনা উবা ফংই।গ্রিদকী সেল খুদিংমক্তা ভেল্যু অমা য়াউই। রেঞ্জ [1, N * N] দা লৈবা ইন্তিজর খুদিংমক।N পরেং অমসুং N কলম (N >= 2) লৈবা গ্রিদ অমা অমসুং পোজিতিব ওইবা ইন্তিজর k অমা পীরবদি, # >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
def minPath(grid, k)
","def minPath(grid, k)
  n = grid.size
  directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
  min_path = nil

  n.times do |i|
    n.times do |j|
      queue = [[[i, j], [grid[i][j]]]]
      until queue.empty?
        position, path = queue.shift
        if path.size == k
          min_path = path if min_path.nil? || path < min_path
          next
        end
        directions.each do |dx, dy|
          x, y = position[0] + dx, position[1] + dy
          if x.between?(0, n-1) && y.between?(0, n-1)
            queue.push([[x, y], path + [grid[x][y]]])
          end
        end
      end
    end
  end
  min_path
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minPath
    candidate = method(:minPath)
    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))
    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))
    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))
    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))
    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))
    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))
    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))
  end
end
"
HumanEval_130,mni_Beng,rb,"খুদমশিং: ত্রিবোনাক্সি সিক্বেন্সকী অহানবা n + 1 নম্বরশিং।নহাক্না নেগেতিব ওইদবা ইন্তিজর নম্বর n অমা পীগনি, নহাক্না গী এরে অমা হল্লকপা তাই।= 2 + 3 + 3 = 8 ত্রাই (ত্রি) = ত্রাই (ত্রি) + ত্রাই (ত্রি) + ত্রাই (ত্রি)ত্রাই ((4) = 3 ত্রাই ((2) = 1 + (2 / 2) = 2 খুদম ওইনা: করিগুম্বা n অসি পোর ওইবদি, tri(n - 1) + tri(n - 2) + tri(n + 1) ।ত্রাই (n) = 1 + এন / 2, করিগুম্বা এন অসি পের ওইবদি।ত্রাই ((1) = 3 ত্রিবোনাক্কি সিক্বেন্স অসি রিক্যুরিন্সনা তাকই: অদুম ওইনমক, মীশিংনা খঙদ্রিবা অসি ত্রিবোনাক্সি সিক্বেন্সনি।মীপুম খুদিংমক্না ফিবোনাক্সি সিক্বেন্স খঙই, মসিদা অঙ্কগী মীওইশিংনা কুপ্না নৈনখি।# >>> tri.call(3)
# [1, 3, 2, 8]
def tri(n)
","def tri(n)
  sequence = [1, 3]
  
  (2..n).each do |i|
    if i.even?
      sequence[i] = 1 + i / 2
    else
      sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] rescue 0
    end
  end
  
  sequence[0..n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_tri
    candidate = method(:tri)
    assert_equal([1, 3, 2, 8], candidate.call(3))
    assert_equal([1, 3, 2, 8, 3], candidate.call(4))
    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))
    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))
    assert_equal([1], candidate.call(0))
    assert_equal([1, 3], candidate.call(1))
  end
end
"
HumanEval_131,mni_Beng,rb,"খুদম ওইনা: দিজিত খুদিংমক মান্নরবদি 0 হল্লকই. পোজিতিব ওইবা ইন্তিজর n অমা পীরবদি, ইপ্যদ দিজিতশিংগী প্রদক্তদু হল্লকপীয়ু।# >>> digits.call(1)
# 1
# >>> digits.call(4)
# 0
# >>> digits.call(235)
# 15
def digits(n)
","def digits(n)
  odd_digits = n.to_s.chars.map(&:to_i).select { |digit| digit.odd? }
  return 0 if odd_digits.empty?
  odd_digits.reduce(:*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digits
    candidate = method(:digits)
    assert_equal(5, candidate.call(5))
    assert_equal(5, candidate.call(54))
    assert_equal(1, candidate.call(120))
    assert_equal(5, candidate.call(5014))
    assert_equal(315, candidate.call(98765))
    assert_equal(2625, candidate.call(5576543))
    assert_equal(0, candidate.call(2468))
  end
end
"
HumanEval_132,mni_Beng,rb,"মসিগী মনুংদা য়ামদ্রবদা সবক্বেন্স অমগী ব্রেকেত অমা নেস্ত তৌই।করিগুম্বা অমসুং করিগুম্বা ব্রেকেতশিংগী ভেলিদ সবসক্বেন্স অমা লৈরবদি ফংসন অসিনা ত্রেৎ হন্দোক্কদবনি ।স্ক্বার ব্রেকেত খক্তমক য়াওবা স্ত্রিং অমবু ইনপুৎ ওইনা লৌবা ফংসন অমা শেম্মু. # >>> is_nested.call(""[[]]"")
# true
# >>> is_nested.call(""[]]]]]]][[[[[]"")
# false
# >>> is_nested.call(""[][]"")
# false
# >>> is_nested.call(""[]"")
# false
# >>> is_nested.call(""[[][]]"")
# true
# >>> is_nested.call(""[[]][["")
# true
def is_nested(string)
","def is_nested(string)
  stack = []
  has_nested = false

  string.each_char do |char|
    if char == '['
      stack.push(char)
    elsif char == ']'
      if stack.empty?
        return false
      end
      stack.pop
      has_nested = true if stack.any?
    end
  end

  has_nested
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_nested
    candidate = method(:is_nested)
    assert_equal(true, candidate.call(""[[]]""))
    assert_equal(false, candidate.call(""[]]]]]]][[[[[]""))
    assert_equal(false, candidate.call(""[][]""))
    assert_equal(false, candidate.call(""[]""))
    assert_equal(true, candidate.call(""[[[[]]]]""))
    assert_equal(false, candidate.call(""[]]]]]]]]]]""))
    assert_equal(true, candidate.call(""[][][[]]""))
    assert_equal(false, candidate.call(""[[]""))
    assert_equal(false, candidate.call(""[]]""))
    assert_equal(true, candidate.call(""[[]][[""))
    assert_equal(true, candidate.call(""[[][]]""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""[[[[[[[[""))
    assert_equal(false, candidate.call(""]]]]]]]]""))
  end
end
"
HumanEval_133,mni_Beng,rb,"খুদমশিং: এরে অদুগী এলিমেন্ত খুদিংমক অহানবদা মথক থংবা int (মতম) দা রাউন্দ তৌ।অদোম্না পীরিবা এরে অদুদা স্ক্বারদ নম্বরশিংগী অপুনবা অদু হল্লকপা মথৌ তাই, অদোম্না নম্বরশিংগী এরে অমা পীরি।# >>> lst.call([1.0, 2.0, 3.0])
# 14
# >>> lst.call([1.0, 4.0, 9.0])
# 98
# >>> lst.call([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst.call([1.4, 4.2, 0.0])
# 29
# >>> lst.call([-2.4, 1.0, 1.0])
# 6
def sum_squares(lst)
","def sum_squares(lst)
  lst.map { |num| (num.ceil)**2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))
    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))
    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))
    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))
    assert_equal(200000000, candidate.call([10000.0, 10000.0]))
    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))
    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))
    assert_equal(0, candidate.call([0.0]))
    assert_equal(1, candidate.call([-1.0]))
    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))
  end
end
"
HumanEval_134,mni_Beng,rb,"খুদমশিং: খঙজিনগদবা: ""ৱর্দ"" হায়বসি স্পেসনা খায়দোকপা কেরেক্তরশিংগী কাংলুপ অমনি।ৱাহৈ অমগী শরুক অমা, অমসুং অতোপ্পা মওংদনা অরানবনি।অখন্নবা স্ত্রিং অমগী মিংথোন অসি এলেফ্বেতিক্কী ময়েক অমনি অমসুং মসি  নত্তে।অরোইবা ময়েক  অসি য়াওরবদি ত্রেৎ রিদর তৌগদবা ফংসন অমা শেম্মু# >>> check_if_last_char_is_a_letter.call(""apple pie"")
# false
# >>> check_if_last_char_is_a_letter.call(""apple pi e"")
# true
# >>> check_if_last_char_is_a_letter.call(""apple pi e "")
# false
# >>> check_if_last_char_is_a_letter.call("""")
# false
def check_if_last_char_is_a_letter(txt)
","check_if_last_char_is_a_letter = ->(txt) {
  return false if txt.strip.empty?
  words = txt.strip.split(' ')
  last_word = words.last
  return false if last_word.empty?
  last_char = last_word[-1]

  last_char =~ /[a-zA-Z]/ && (words.size == 1 || txt[txt.rindex(last_char) - 1] == ' ')
}","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_if_last_char_is_a_letter
    candidate = method(:check_if_last_char_is_a_letter)
    assert_equal(false, candidate.call(""apple""))
    assert_equal(true, candidate.call(""apple pi e""))
    assert_equal(false, candidate.call(""eeeee""))
    assert_equal(true, candidate.call(""A""))
    assert_equal(false, candidate.call(""Pumpkin pie ""))
    assert_equal(false, candidate.call(""Pumpkin pie 1""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""eeeee e ""))
    assert_equal(false, candidate.call(""apple pie""))
    assert_equal(false, candidate.call(""apple pi e ""))
  end
end
"
HumanEval_135,mni_Beng,rb,"খুদমশিং: দুপ্লিক ভেল্যুশিং।অসিগুম্বা ইলিমেন্ত অমত্তা লৈত্রবদি -1 হল্লকই। পীরিবা এরে অসিদা  য়াওরররোইমসিদগী হেক হেক মমাংথংবা ইলিমেন্ত অদুদগী হেন্না চাওবা নত্ত্রগা মান্নবা ওইদে। করিগুম্বা ্যমান অমদগী খ্বাইদগী চাউবা ইন্দেক্স হল্লকপা ফংসন অমা শেম্মু# >>> can_arrange.call([1, 2, 4, 3, 5])
# 3
# >>> can_arrange.call([1, 2, 3])
# -1
def can_arrange(arr)
","def can_arrange(arr)
  (1...arr.length).reverse_each do |i|
    return i if arr[i] < arr[i - 1]
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_can_arrange
    candidate = method(:can_arrange)
    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))
    assert_equal(-1, candidate.call([1, 2, 4, 5]))
    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))
    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))
    assert_equal(-1, candidate.call([]))
  end
end
"
HumanEval_136,mni_Beng,rb,"খুদমশিং: করিগুম্বা নেগেতিব নৎত্রগা পোজিতিব ইন্তিজর অমত্তা লৈত্রবদি, মখোয়দু শোয়দনা হল্লকই.এরে অমদা পোজিতিব ইন্তিজরশিংগী মশিং য়াওবা।নেগেতিব ইন্তিজরশিংগী খ্বাইদগী চাউবা, অমসুং 'b' খ্বাইদগী পীকপা 'a' অসি  ওইরিবা এরে (a, b) অমা হল্লক্লিবা ফংসন অমা শেম্মু# >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])
# [nil, 1]
# >>> largest_smallest_integers.call([])
# [nil, nil]
# >>> largest_smallest_integers.call([0])
# [nil, nil]
def largest_smallest_integers(lst)
","def largest_smallest_integers(lst)
  largest_negative = nil
  smallest_positive = nil
  
  lst.each do |num|
    if num < 0
      largest_negative = num if largest_negative.nil? || num > largest_negative
    elsif num > 0
      smallest_positive = num if smallest_positive.nil? || num < smallest_positive
    end
  end
  
  [largest_negative, smallest_positive]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_smallest_integers
    candidate = method(:largest_smallest_integers)
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))
    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))
    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))
    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))
    assert_equal([nil, nil], candidate.call([]))
    assert_equal([nil, nil], candidate.call([0]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))
  end
end
"
HumanEval_137,mni_Beng,rb,"খঙজিনগদবা: করিগুম্বা রিএল নম্বর অমবু স্ত্রিং অমা ওইনা উৎলবদি, ফ্লোতিং পোইন্ত অদু . নৎত্রগা ,  ওইবা য়াই।ভেল্যুশিং অসি মান্নরবদি nil হল্লকই. রিএল নম্বরশিং, অমসুং মসিগী পীরবা ভেরিএবলগী মখলদা অচৌবা ভেরিএবলদু হল্লকই. ইন্তিজরশিং, ফ্লোৎশিং, নৎত্রগা স্ত্রিংশিংবু মহুৎ শিনবা ফংসন অমা শেম্মু# >>> compare_one.call(1, 2.5)
# 2.5
# >>> compare_one.call(1, ""2,3"")
# ""2,3""
# >>> compare_one.call(""5,1"", ""6"")
# ""6""
# >>> compare_one.call(""1"", 1)
# nil
def compare_one(a, b)
","def compare_one(a, b)
  a = a.to_s.tr(',', '.').to_f if a.is_a?(String) && a.include?(',')
  b = b.to_s.tr(',', '.').to_f if b.is_a?(String) && b.include?(',')

  if a.is_a?(String) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Float)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Float)
    a = a.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Integer)
    b = b.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Float)
    b = b.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(String)
    a = a.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  else
    return nil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare_one
    candidate = method(:compare_one)
    assert_equal(2, candidate.call(1, 2))
    assert_equal(2.5, candidate.call(1, 2.5))
    assert_equal(3, candidate.call(2, 3))
    assert_equal(6, candidate.call(5, 6))
    assert_equal(""2,3"", candidate.call(1, ""2,3""))
    assert_equal(""6"", candidate.call(""5,1"", ""6""))
    assert_equal(""2"", candidate.call(""1"", ""2""))
    assert_equal(nil, candidate.call(""1"", 1))
  end
end
"
HumanEval_138,mni_Beng,rb,"খুদম পীরিবা নম্বর n অসি পোজিতিব ওইবা মশীং মরিগী অপুনবা ওইনা ইবা য়াব্রা হায়না য়েংসি # >>> is_equal_to_sum_even.call(4)
# false
# >>> is_equal_to_sum_even.call(6)
# false
# >>> is_equal_to_sum_even.call(8)
# true
def is_equal_to_sum_even(n)
","def is_equal_to_sum_even(n)
  return false if n < 8
  n.even?
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_equal_to_sum_even
    candidate = method(:is_equal_to_sum_even)
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(8))
    assert_equal(true, candidate.call(10))
    assert_equal(false, candidate.call(11))
    assert_equal(true, candidate.call(12))
    assert_equal(false, candidate.call(13))
    assert_equal(true, candidate.call(16))
  end
end
"
HumanEval_139,mni_Beng,rb,"খুদম ওইনা: মফমসিদা n > 0 ব্রাজিলিয়ন_ফেক্তোরিএল (n) = n! * (n-1)! * (n-2)! * ... * 1! ব্রাজিলিয়ন ফেক্টরিএল অসি মখাদা পীরিবা অসুম্না ৱাহন্থোক পীরি: # >>> special_factorial.call(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
def special_factorial(n)
","def special_factorial(n)
  return 1 if n <= 1
  (1..n).inject(1) { |product, i| product * factorial(i) }
end

def factorial(num)
  return 1 if num <= 1
  (2..num).inject(1, :*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_special_factorial
    candidate = method(:special_factorial)
    assert_equal(288, candidate.call(4))
    assert_equal(34560, candidate.call(5))
    assert_equal(125411328000, candidate.call(7))
    assert_equal(1, candidate.call(1))
  end
end
"
HumanEval_140,mni_Beng,rb,"মথং-মনাও নাইদবা অহাংবা মফম পুম্নমক - গা মহুৎ শিন্দোক্কনিঅমসুং করিগুম্বা স্ত্রিং অমদা মথং-মনাও নাইদবা স্পেস 2দগী হেন্না লৈরবদি, স্ত্রিং তেক্স অমা পীরবদি, মদুদা লৈরিবা স্পেস খুদিংমক অন্দরস্কোরশিংগা মহুৎ শিন্দোকউ, # >>> fix_spaces.call("" Example"")
# ""Example""
# >>> fix_spaces.call("" Example 1"")
# ""Example_1""
# >>> fix_spaces.call("" Example 2"")
# ""_Example_2""
# >>> fix_spaces.call("" Example 3"")
# ""_Example-3""
def fix_spaces(text)
","def fix_spaces(text)
  text.strip.gsub(/\s{3,}/, '-').gsub(' ', '_')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fix_spaces
    candidate = method(:fix_spaces)
    assert_equal(""Example"", candidate.call(""Example""))
    assert_equal(""Mudasir_Hanif_"", candidate.call(""Mudasir Hanif ""))
    assert_equal(""Yellow_Yellow__Dirty__Fellow"", candidate.call(""Yellow Yellow  Dirty  Fellow""))
    assert_equal(""Exa-mple"", candidate.call(""Exa   mple""))
    assert_equal(""-Exa_1_2_2_mple"", candidate.call(""   Exa 1 2 2 mple""))
  end
end
"
HumanEval_141,mni_Beng,rb,"খুদমশিং: - দোটকী মতুংদা লৈবা সবস্ত্রিং অসি মখাগীশিংসিগী মনুংদা অমা ওইগদবনি: ['txt', 'exe', 'dll'] লেতিন অলফেপ্তে ('a'-'z' অমসুং 'A'-'Z') ।- দোটকী মমাংদা লৈবা সবস্ত্রিং অসি খূৎলাই ওইগদবনি, অমসুং মসিদগী গী অয়েক অমগা লোয়ননা হৌগদবনিফাইলগী মমিংদা দোত অমা চপ চানা য়াওরি.'ফাইলগী মমিংদা দিজিৎ অহুমদগী হেন্না ('0'-'9') লৈরোইদবনি।ফংলে: ফাইল অমগী মমিং অসি মখাদা পীরিবা কন্দিসন পুম্নমক অসি ফংবা তারবদি অমসুং ফংবা তারবদি চৎনবা য়াগনি হায়না লৌগনি ফাইলগী মমিং অসি চৎনবা য়াবদি 'য়ে' অমসুং করিগুম্বা নত্ত্রবদি 'নো' হল্লকই.ফাইল অমগী মমিং তাকপা স্ত্রিং অমা লৌদুনা  ফংগদবা ফংসন অমা শেম্মু# >>> file_name_check.call(""example.txt"")
# ""Yes""
# >>> file_name_check.call(""1example.dll"")
# ""No""
def file_name_check(file_name)
","def file_name_check(file_name)
  # Check if there's exactly one dot in the filename
  return 'No' unless file_name.count('.') == 1
  
  # Split the filename into the name and extension
  name, extension = file_name.split('.')
  
  # Check if the name part starts with a letter
  return 'No' if name.empty? || !name[0].match?(/[a-zA-Z]/)
  
  # Check if the extension is valid
  return 'No' unless ['txt', 'exe', 'dll'].include?(extension)
  
  # Count digits in the file name
  digit_count = file_name.count(""0-9"")
  
  # Check if digits are more than three
  return 'No' if digit_count > 3
  
  'Yes'
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_file_name_check
    candidate = method(:file_name_check)
    assert_equal(""Yes"", candidate.call(""example.txt""))
    assert_equal(""No"", candidate.call(""1example.dll""))
    assert_equal(""No"", candidate.call(""s1sdf3.asd""))
    assert_equal(""Yes"", candidate.call(""K.dll""))
    assert_equal(""Yes"", candidate.call(""MY16FILE3.exe""))
    assert_equal(""No"", candidate.call(""His12FILE94.exe""))
    assert_equal(""No"", candidate.call(""_Y.txt""))
    assert_equal(""No"", candidate.call(""?aREYA.exe""))
    assert_equal(""No"", candidate.call(""/this_is_valid.dll""))
    assert_equal(""No"", candidate.call(""this_is_valid.wow""))
    assert_equal(""Yes"", candidate.call(""this_is_valid.txt""))
    assert_equal(""No"", candidate.call(""this_is_valid.txtexe""))
    assert_equal(""No"", candidate.call(""#this2_i4s_5valid.ten""))
    assert_equal(""No"", candidate.call(""@this1_is6_valid.exe""))
    assert_equal(""No"", candidate.call(""this_is_12valid.6exe4.txt""))
    assert_equal(""No"", candidate.call(""all.exe.txt""))
    assert_equal(""Yes"", candidate.call(""I563_No.exe""))
    assert_equal(""Yes"", candidate.call(""Is3youfault.txt""))
    assert_equal(""Yes"", candidate.call(""no_one#knows.dll""))
    assert_equal(""No"", candidate.call(""1I563_Yes3.exe""))
    assert_equal(""No"", candidate.call(""I563_Yes3.txtt""))
    assert_equal(""No"", candidate.call(""final..txt""))
    assert_equal(""No"", candidate.call(""final132""))
    assert_equal(""No"", candidate.call(""_f4indsartal132.""))
    assert_equal(""No"", candidate.call("".txt""))
    assert_equal(""No"", candidate.call(""s.""))
  end
end
"
HumanEval_142,mni_Beng,rb,"খুদমশিং: এরে অদুদা লৈরিবা এন্ত্রিশিং অদু ইন্দেক্সশিং অদু 3 নত্রগা 4 গী মলতিপল ওইদবা মওংদা হোংদোকপা। মসিগী মতুংদা ফংসন অসিনা এন্ত্রি পুম্নমক্কী অপুনবা অদু হল্লকই.মলতিপল ওফ 3 অমসুং ইন্তিজর এন্ত্রি অদু ইন্দেক্স অদু 4গী মলতিপল ওইরবদি মদু ক্যুব তৌগনি।ফঙ্কসন অসিনা ইন্তিজরশিংগী এরে অমা লৌগনি। এরে অদুদা য়াওরিবা এন্ত্রি খুদিংমক্কীদমক্তা, ফঙ্কসন্না ইন্তিজর এন্ত্রি অদুগী স্ক্বার তৌগনি করিগুম্বা মসিগী ইন্দেক্স অদু a ওইরবদি।"" # >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
def sum_squares(lst)
","def sum_squares(lst)
  lst.map.with_index do |num, index|
    if index % 3 == 0
      num ** 2
    elsif index % 4 == 0
      num ** 3
    else
      num
    end
  end.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(6, candidate.call([1, 2, 3]))
    assert_equal(14, candidate.call([1, 4, 9]))
    assert_equal(0, candidate.call([]))
    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))
    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))
    assert_equal(0, candidate.call([0]))
    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))
    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))
    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))
    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))
    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))
  end
end
"
HumanEval_143,mni_Beng,rb,"খুদম 1:অনৌবা স্ত্রিংদা য়াওরিবা ৱাহৈশিংগী মথং মনাও অসি অহানবা স্ত্রিং অদুগা মান্নগদবনি।মসিগী অশাংবা অসি প্রাইম নম্বরশিংনি, অমসুং অদোম্না অহানবা ৱাহৈ পরেং অদুগী ৱাহৈশিং য়াওবা স্ত্রিং অমা হল্লকপা তাই, ৱাহৈ পরেং অসিদা স্পেস অমনা খায়দোকপা ৱাহৈ খর য়াওই, ৱাহৈ পরেং অমগী মহুৎ শিনবা স্ত্রিং অমা পীরি, # >>> words_in_sentence.call(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence.call(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
def words_in_sentence(sentence)
","def words_in_sentence(sentence)
  def is_prime?(num)
    return false if num <= 1
    (2..Math.sqrt(num)).none? { |i| num % i == 0 }
  end
  
  words = sentence.split("" "")
  prime_length_words = words.select { |word| is_prime?(word.length) }
  prime_length_words.join("" "")
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_in_sentence
    candidate = method(:words_in_sentence)
    assert_equal(""is"", candidate.call(""This is a test""))
    assert_equal(""go for"", candidate.call(""lets go for swimming""))
    assert_equal(""there is no place"", candidate.call(""there is no place available here""))
    assert_equal(""Hi am Hussein"", candidate.call(""Hi I am Hussein""))
    assert_equal(""go for it"", candidate.call(""go for it""))
    assert_equal("""", candidate.call(""here""))
    assert_equal(""is"", candidate.call(""here is""))
  end
end
"
HumanEval_144,mni_Beng,rb,"x, অমসুং n অসি ভেলিদ ফ্রেক্সনশিংনি হায়না লৌবা য়াই, অমসুং মখোয়গী দাইনোমিনেটর অসি জেরো নত্তে।ন্যুমরেতর অমসুং ন্যুমরেতর অনিমক পোজিতিব ওইবা অপুনবা মশীংশিং ওইরবদি, < ন্যুমরেতর>/< ন্যুমরেতর>।x অমসুং n অনিমক অসি ফ্রেক্সন অমগী স্ত্রিং রিপ্রজেন্তেসননি, অমসুং মখাগী ফোর্মেৎ অসি লৈ,x * n. করিগুম্বা x * n অসি মশীং মপুং ফারবদি অমসুং false  ওইরবদি ফংসন অসিনা ত্রেৎ রিটর্ন তৌইনহাক্কী থবক অসি এক্সপ্রেসন অসিবু লায়থোকহনগদবা ফংসন অমা ইমপ্লিমেন্ত তৌবা অসিনি ।# >>> simplify.call(""1/5"", ""5/1"")
# true
# >>> simplify.call(""1/6"", ""2/1"")
# false
# >>> simplify.call(""7/10"", ""10/2"")
# false
def simplify(x, n)
","def simplify(x, n)
  # Convert x and n to numerators and denominators
  num_x, den_x = x.split('/').map(&:to_i)
  num_n, den_n = n.split('/').map(&:to_i)

  # Multiply fractions: (num_x * num_n) / (den_x * den_n)
  numerator = num_x * num_n
  denominator = den_x * den_n

  # Check if the result is a whole number
  numerator % denominator == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_simplify
    candidate = method(:simplify)
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/6"", ""2/1""))
    assert_equal(true, candidate.call(""5/1"", ""3/1""))
    assert_equal(false, candidate.call(""7/10"", ""10/2""))
    assert_equal(true, candidate.call(""2/10"", ""50/10""))
    assert_equal(true, candidate.call(""7/2"", ""4/2""))
    assert_equal(true, candidate.call(""11/6"", ""6/1""))
    assert_equal(false, candidate.call(""2/3"", ""5/2""))
    assert_equal(false, candidate.call(""5/2"", ""3/5""))
    assert_equal(true, candidate.call(""2/4"", ""8/4""))
    assert_equal(true, candidate.call(""2/4"", ""4/2""))
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/5"", ""1/5""))
  end
end
"
HumanEval_145,mni_Beng,rb,"খুদম ওইনা: মখোয়শিং অসি মখোয়গী ওরিজিনেল এরেদা লৈরিবা ইন্দেক্সতা য়ুম্ফম ওইদুনা ওর্দর তৌ।খঙজিনগদবা: করিগুম্বা মখোয়গী দিজিতশিংগী মান্নবা সুম লৈবা পোৎলম কয়া অমা লৈরবদি,মখোয়গী দিজিতশিংগী অপুনবা মতুং ইন্না মথং-মনাও নাইনা।পীরিবা ইন্তিজরশিংগী এরে অসি সেয়র তৌগদবা ফংসন অমা ইশিনবিয়ু # >>> order_by_points.call([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points.call([])
# []
def order_by_points(nums)
","def order_by_points(nums)
  nums.sort_by.with_index do |num, index|
    [num.to_s.chars.map(&:to_i).sum.abs, index]
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_order_by_points
    candidate = method(:order_by_points)
    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))
    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))
    assert_equal([], candidate.call([]))
    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))
    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))
    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))
  end
end
"
HumanEval_146,mni_Beng,rb,"খুদম ওইনা: মশীং অমগী অহানবা অমসুং অরোইবা দিজিত অসি অপাম্বা ওই (1, 3, 5, 7, 9) ।এরেদা লৈরিবা 10দগী হেন্না চাওবা এলিমেন্তশিংগী মশিং অমসুং অনিমক ইনপুত ওইনা মশীংগী এরে অমা লৌদুনা হল্লকপা ফংসন অমা ইগনি ।# >>> specialFilter.call([15, -73, 14, -15])
# 1
# >>> specialFilter.call([33, -2, -3, 45, 21, 109])
# 2
def specialFilter(nums)
","def specialFilter(nums)
  nums.count do |num|
    num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_specialFilter
    candidate = method(:specialFilter)
    assert_equal(0, candidate.call([5, -2, 1, -5]))
    assert_equal(1, candidate.call([15, -73, 14, -15]))
    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))
    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))
    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))
    assert_equal(0, candidate.call([1]))
    assert_equal(0, candidate.call([]))
  end
end
"
HumanEval_147,mni_Beng,rb,"খুদম: অমসুং a[i] + a[j] + a[k] অসি 3গী মলতিপল ওই।i < j < k,  অসি লৈবা aগী ত্রিপলশিংগী মশীং (a[i], a[j], a[k]) হল্লকইi খুদিংমক্কী (1 ≤ i ≤ n) a[i] = i * i - i + 1গী ভেল্যু।অদোম্না পোজিতিব ওইবা ইন্তিজর n অমা পীরি। অদোম্না অশাংবা nগী ইন্তিজর এরে অমা শেমগদবনি।# >>> get_max_triples.call(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
def get_max_triples(n)
","def get_max_triples(n)
  a = Array.new(n) { |i| (i + 1) * (i + 1) - (i + 1) + 1 }
  count = 0
  
  (0...n).each do |i|
    (i+1...n).each do |j|
      (j+1...n).each do |k|
        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0
      end
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_max_triples
    candidate = method(:get_max_triples)
    assert_equal(1, candidate.call(5))
    assert_equal(4, candidate.call(6))
    assert_equal(36, candidate.call(10))
    assert_equal(53361, candidate.call(100))
  end
end
"
HumanEval_148,mni_Beng,rb,"খুদমশিং অসি গ্রহশিংগী অচুম্বা মমিং নত্তে।ফঙ্কসন্না করিগুম্বা plan1 নত্ত্রগা plan2  ওইরবদি অহাংবা এরে অমা হল্লকইনুমিৎকা নক্নবগী চাং।গ্রহ 1গী ওর্বিট অমসুং গ্রহ 2গী ওর্বিটকী মরক্তা লৈবা, গী মতুং ইন্না মখল খায়দোকপাফংসন অসিনা গ্রহ 1 অমসুং গ্রহ 2গী মিং অনীবু স্ত্রিং ওইনা লৌবা ফংসন অমা ইগনি।য়ুরানস, নেপচুন।মর্কুরীনি, মথংগী অসি ভেনাসনি, অদুদগী পৃথিবী, মার্স, জুপিটর, সেতুর্ন,ঐখোয়গী সোলার সিস্তেমদা গ্রহ ৮ লৈ: নুমিৎতা খ্বাইদগী নক্নবা গ্রহশিং# >>> bf.call(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf.call(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf.call(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
def bf(planet1, planet2)
","def bf(planet1, planet2)
  planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
  
  idx1 = planets.index(planet1)
  idx2 = planets.index(planet2)
  
  return [] if idx1.nil? || idx2.nil?

  start_idx, end_idx = [idx1, idx2].sort
  
  planets[(start_idx + 1)...end_idx]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_bf
    candidate = method(:bf)
    assert_equal([""Saturn"", ""Uranus""], candidate.call(""Jupiter"", ""Neptune""))
    assert_equal([""Venus""], candidate.call(""Earth"", ""Mercury""))
    assert_equal([""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""], candidate.call(""Mercury"", ""Uranus""))
    assert_equal([""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""], candidate.call(""Neptune"", ""Venus""))
    assert_equal([], candidate.call(""Earth"", ""Earth""))
    assert_equal([], candidate.call(""Mars"", ""Earth""))
    assert_equal([], candidate.call(""Jupiter"", ""Makemake""))
  end
end
"
HumanEval_149,mni_Beng,rb,"খুদম ওইনা: ৱাহৈ খুদিংমক চপ মান্ননা শাংগনি হায়না অদোম্না লৌবা য়াই।ফংসন অসিনা স্ত্রিংশিংগী এরে অমা মথং-মনাও নাইনা হল্লকপা তাই.করিগুম্বা ৱাহৈ অনিগী অশাং মান্নরবদি, এরে অদু এলেফাবেতিকেল্লি সেয়র তৌ।রুল অদুনা মখল খায়দোকপা এরেদু হল্লক্কদবনি.এরেগী মথং-মনাও অসি ৱাহৈ খুদিংমক্কী অশাংবদগী হেনগৎলকপা ওইগদবনি, অমসুং অদোম্না অমসুং মসিদা দুপ্লিকেতশিং য়াওবা য়াই।এরে অসি মতম পুম্বদা স্ত্রিংশিংগী এরে অমা ওই, মশীংশিংগী এরে অমত্তা ওইদে,অমসুং ফল ফংলকপা এরে অদু মথং-মনাও নাইনা পীগনি, মসিদগী অখন্নবা অশাংবা স্ত্রিংশিং লৌথোকই, স্ত্রিংশিংগী এরে অমা পরামিতর অমা ওইনা য়াবা ফংসন অমা ই, # >>> list_sort.call([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort.call([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
def sorted_list_sum(lst)
","def list_sort(arr)
  arr.select { |s| s.length.even? }
     .sort_by { |s| [s.length, s] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sorted_list_sum
    candidate = method(:sorted_list_sum)
    assert_equal([""aa""], candidate.call([""aa"", ""a"", ""aaa""]))
    assert_equal([""AI"", ""asdf"", ""school""], candidate.call([""school"", ""AI"", ""asdf"", ""b""]))
    assert_equal([], candidate.call([""d"", ""b"", ""c"", ""a""]))
    assert_equal([""abcd"", ""dcba""], candidate.call([""d"", ""dcba"", ""abcd"", ""a""]))
    assert_equal([""AI"", ""ai"", ""au""], candidate.call([""AI"", ""ai"", ""au""]))
    assert_equal([], candidate.call([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]))
    assert_equal([""cc"", ""dd"", ""aaaa"", ""bbbb""], candidate.call([""aaaa"", ""bbbb"", ""dd"", ""cc""]))
  end
end
"
HumanEval_150,mni_Beng,rb,"খুদমশিং: প্রাইম নম্বর অমা ওইগনি অমসুং করিগুম্বা ওইদ্রবদি yগী ভেল্যুদু হল্লক্কদবনি।করিগুম্বা n অসি  ওইরবদি x গী ভেল্যুদু হল্লকপা য়াবা অচম্বা প্রোগ্রাম অমনি# >>> x_or_y.call(7, 34, 12)
# 34
# >>> x_or_y.call(15, 8, 5)
# 5
def x_or_y(n, x, y)
","def x_or_y(n, x, y)
  require 'prime'
  n.prime? ? x : y
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_x_or_y
    candidate = method(:x_or_y)
    assert_equal(34, candidate.call(7, 34, 12))
    assert_equal(5, candidate.call(15, 8, 5))
    assert_equal(33, candidate.call(3, 33, 5212))
    assert_equal(3, candidate.call(1259, 3, 52))
    assert_equal(-1, candidate.call(7919, -1, 12))
    assert_equal(583, candidate.call(3609, 1245, 583))
    assert_equal(129, candidate.call(91, 56, 129))
    assert_equal(1234, candidate.call(6, 34, 1234))
    assert_equal(0, candidate.call(1, 2, 0))
    assert_equal(2, candidate.call(2, 2, 0))
  end
end
"
HumanEval_151,mni_Beng,rb,"ময়েক শেংনা তাকপা য়াবা মশিংশিংশিং অসি ময়েক শেংনা তাকপা য়াবা মশিংশিংশিংনি। ময়েক শেংনা তাকপা য়াবা মশিংশিংশিং অসি ময়েক শেংনা তাকপা য়াবা মশিংশিংশিংনি।মশীংগী এরে অমা পীরবদি, মশীংশিংগী স্ক্বারশিংগী অপুনবা অদু হল্লকপা # >>> double_the_difference.call([1, 3, 2, 0])
# 10
# >>> double_the_difference.call([-1, -2, 0])
# 0
# >>> double_the_difference.call([9, -2])
# 81
# >>> double_the_difference.call([0])
# 0
# If the input array is empty, return 0.
def double_the_difference(lst)
","def double_the_difference(lst)
  lst.select { |n| n.is_a?(Integer) && n.odd? && n >= 0 }
     .map { |n| n ** 2 }
     .sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_double_the_difference
    candidate = method(:double_the_difference)
    assert_equal(0, candidate.call([]))
    assert_equal(25, candidate.call([5.0, 4.0]))
    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))
    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))
    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))
    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))
    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))
  end
end
"
HumanEval_152,mni_Beng,rb,"খুদম: ভেল্যু অদু 0 ওইগনি, অমসুং করিগুম্বা ওইদ্রবদি ভেল্যু অদু গেৎ অমসুং স্কোরগী মরক্তা লৈবা এবসোলুত দিফরেন্স ওইগনি।মখোয়না চুম্না খল্লবদি, ইন্দেক্স খুদিংমক্না মেটচ অমা উৎলিবা, অদোম্না স্কোর অমসুং গেজ অনিগী এরে অমা মান্নবা অশাং লৈনা পীরি।অদোমগী থবক অসি মীওই অমনা মেচ কয়াগী ফল চুম্না মাংজৌননা খঙলব্রা হায়বদু খঙদোকপা অদুনি।ইদুনা য়েংবদা অমসুং চাংদম্নবদা তশেংনা কান্নবা লৈ।থৌদোক অদুগী অরোইবদা খঙলে। মতম অদুদা নহাক্কী ৱাখল অমসুং ৱাখল্লোন অদুমতম শাংনা ঙাইদুনা লাক্লবা করিগুম্বা অমগী মহৈ অদু ঐখোয়না খংজিনবা ঙমগনি হায়না ঐনা থাজৈ ।# >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
def compare(game, guess)
","def compare(game, guess)
  game.zip(guess).map { |score, prediction| (score - prediction).abs }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare
    candidate = method(:compare)
    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))
    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))
    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))
    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))
  end
end
"
HumanEval_153,mni_Beng,rb,"খুদম: (মসিগী মপাঙ্গল অসি -1) ।'Slices.SErviNGSliCes' হায়বসি খ্বাইদগী মপাঙ্গল লৈবা এক্সতেন্সন ওইবনা 'Slices.SErviNGSliCes' হায়না হল্লকই।এক্সতেন্সন: ['SErviNGSliCes', 'Cheese', 'StuFfed'] অদোম্না খুদম ওইনা, করিগুম্বা অদোম্না ক্লাস অমসুং এরে অমা ওইনা ""স্লাইসেস"" পীবা তারবদি,এরেদা অহানবা ওইনা লাকপা অমা খনবিয়ু.করিগুম্বা মপাঙ্গল মান্নবা এক্সতেন্সন অনি নত্ত্রগা অমদগী হেনবদি, অদোম্না ফোর্মেত: ক্লাসনাম. ষ্ট্রোঙ্গস্তেন্তনাম. নহাক্না খ্বাইদগী মপাঙ্গল লৈবা এক্সতেন্সন অদু ফংগদবনি অমসুং মসিগী মনুংদা এক্সতেন্সনগী মমিংদা, মপাঙ্গল অসি CAP - SM ফ্রেক্সন অদুনা পী। এক্সতেন্সনগী মমিংদা ময়েকশিং য়াওগনি, অমসুং SM অসি লিক্সেস ময়েকশিংগী মশিং ওইগনি এক্সতেন্সন অসিগী মপাঙ্গল অসি মখাদা পীরি: CAP অসি অচৌবা কেসতগী মশীং ওইহল্লু এক্সতেন্সনশিং অসি ক্লাস অদুদা অহেনবা ক্লাসশিং লোদ তৌনবগীদমক শিজিন্নগনি।ক্লাস অমগী মমিং (স্ত্রিং) অমসুং এক্সতেন্সনশিংগী এরে অমা পীগনি।# >>> Strongest_Extension.call(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
def Strongest_Extension(class_name, extensions)
","def Strongest_Extension(class_name, extensions)
  strongest_extension = extensions.max_by do |extension|
    cap_count = extension.count('A-Z')
    sm_count = extension.count('a-z')
    cap_count - sm_count
  end
  ""#{class_name}.#{strongest_extension}""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_Strongest_Extension
    candidate = method(:Strongest_Extension)
    assert_equal(""Watashi.eIGHt8OKe"", candidate.call(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]))
    assert_equal(""Boku123.YEs.WeCaNe"", candidate.call(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]))
    assert_equal(""__YESIMHERE.NuLl__"", candidate.call(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]))
    assert_equal(""K.TAR"", candidate.call(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]))
    assert_equal(""__HAHA.123"", candidate.call(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]))
    assert_equal(""YameRore.okIWILL123"", candidate.call(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]))
    assert_equal(""finNNalLLly.WoW"", candidate.call(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]))
    assert_equal(""_.Bb"", candidate.call(""_"", [""Bb"", ""91245""]))
    assert_equal(""Sp.671235"", candidate.call(""Sp"", [""671235"", ""Bb""]))
  end
end
"
HumanEval_154,mni_Beng,rb,"অদোম্না ৱাহৈ অনি পীরি। করিগুম্বা অনিশুবা ৱাহৈদু নৎত্রগা মদুগী রোটেশন অমহেক্তনা অহানবা ৱাহৈদুগী সবষ্ট্রিং অমা ওইরবদি অদোম্না trত হল্লকপা মথৌ তাই।# >>> cycpattern_check.call(""abcd"", ""abd"")
# false
# >>> cycpattern_check.call(""hello"", ""ell"")
# true
# >>> cycpattern_check.call(""whassup"", ""psus"")
# false
# >>> cycpattern_check.call(""abab"", ""baa"")
# true
# >>> cycpattern_check.call(""efef"", ""eeff"")
# false
# >>> cycpattern_check.call(""himenss"", ""simen"")
# true
def cycpattern_check(a, b)
","def cycpattern_check(a, b)
  (0...b.length).each do |i|
    rotated_b = b[i..-1] + b[0...i]
    return true if a.include?(rotated_b)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_cycpattern_check
    candidate = method(:cycpattern_check)
    assert_equal(false, candidate.call(""xyzw"", ""xyw""))
    assert_equal(true, candidate.call(""yello"", ""ell""))
    assert_equal(false, candidate.call(""whattup"", ""ptut""))
    assert_equal(true, candidate.call(""efef"", ""fee""))
    assert_equal(false, candidate.call(""abab"", ""aabb""))
    assert_equal(true, candidate.call(""winemtt"", ""tinem""))
  end
end
"
HumanEval_155,mni_Beng,rb,"খুদম: ইন্তিজর অমা পীরবদি, মথংশিৎনা জুতো অমসুং পদে দিজিতশিংগী মশীং লৈবা এরে অমা হল্লকই।# >>> even_odd_count.call(-12)
# [1, 1]
# >>> even_odd_count.call(123)
# [1, 2]
def even_odd_count(num)
","def even_odd_count(num)
  num.to_s.chars.map(&:to_i).select { |digit| digit != 0 }.partition(&:even?).map(&:count)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_count
    candidate = method(:even_odd_count)
    assert_equal([0, 1], candidate.call(7))
    assert_equal([1, 1], candidate.call(-78))
    assert_equal([2, 2], candidate.call(3452))
    assert_equal([3, 3], candidate.call(346211))
    assert_equal([3, 3], candidate.call(-345821))
    assert_equal([1, 0], candidate.call(-2))
    assert_equal([2, 3], candidate.call(-45347))
    assert_equal([1, 0], candidate.call(0))
  end
end
"
HumanEval_156,mni_Beng,rb,"খুদমশিং: অথিংবা: 1 <= নুম <= 1000 অমসুং মসি লিক্সেল ওইনা হন্দোক্লু. পোজিতিব ইন্তিজর অমা পীরবদি, মসিগী রোমান ন্যুমরেলগী মান্নবা স্ত্রিং অমা ওইনা লৌ, # >>> int_to_mini_roman.call(19)
# ""xix""
# >>> int_to_mini_roman.call(152)
# ""clii""
# >>> int_to_mini_roman.call(426)
# ""cdxxvi""
def int_to_mini_roman(number)
","def int_to_mini_roman(number)
  values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
  numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']

  result = ''
  values.each_with_index do |value, index|
    while number >= value
      number -= value
      result += numerals[index]
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_int_to_mini_roman
    candidate = method(:int_to_mini_roman)
    assert_equal(""xix"", candidate.call(19))
    assert_equal(""clii"", candidate.call(152))
    assert_equal(""ccli"", candidate.call(251))
    assert_equal(""cdxxvi"", candidate.call(426))
    assert_equal(""d"", candidate.call(500))
    assert_equal(""i"", candidate.call(1))
    assert_equal(""iv"", candidate.call(4))
    assert_equal(""xliii"", candidate.call(43))
    assert_equal(""xc"", candidate.call(90))
    assert_equal(""xciv"", candidate.call(94))
    assert_equal(""dxxxii"", candidate.call(532))
    assert_equal(""cm"", candidate.call(900))
    assert_equal(""cmxciv"", candidate.call(994))
    assert_equal(""m"", candidate.call(1000))
  end
end
"
HumanEval_157,mni_Beng,rb,"খুদম: 90 দিগ্রী।রাইট এঙ্গেল ত্রিএঙ্গেল অমা হায়বসি এঙ্গেল অমবু রাইট এঙ্গেল অমা ওইহনবা ত্রিএঙ্গেল অমনি, নত্রগানাকলশিংনা রাইট এঙ্গেল ত্রিএঙ্গল অমা শেম্মি, মদু নত্ত্রবদি চুমদে।ত্রাইএঙ্গল অমগী নাকল অহুমগী অশাং অদু পীবীয়ু। করিগুম্বা অহুম # >>> right_angle_triangle.call(3, 4, 5)
# true
# >>> right_angle_triangle.call(1, 2, 3)
# false
def right_angle_triangle(a, b, c)
","def right_angle_triangle(a, b, c)
  sides = [a, b, c].sort
  sides[0]**2 + sides[1]**2 == sides[2]**2
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_right_angle_triangle
    candidate = method(:right_angle_triangle)
    assert_equal(true, candidate.call(3, 4, 5))
    assert_equal(false, candidate.call(1, 2, 3))
    assert_equal(true, candidate.call(10, 6, 8))
    assert_equal(false, candidate.call(2, 2, 2))
    assert_equal(true, candidate.call(7, 24, 25))
    assert_equal(false, candidate.call(10, 5, 7))
    assert_equal(true, candidate.call(5, 12, 13))
    assert_equal(true, candidate.call(15, 8, 17))
    assert_equal(true, candidate.call(48, 55, 73))
    assert_equal(false, candidate.call(1, 1, 1))
    assert_equal(false, candidate.call(2, 2, 10))
  end
end
"
HumanEval_158,mni_Beng,rb,"লেক্সিকোগ্রাফিক ওর্দরদা অহানবা লাকপা কেরেক্তরদু হল্লকই।করিগুম্বা মল্তিপল স্ত্রিংশিংদা য়ুনিক কেরেক্তরশিংগী মেক্সিমম ওইবা মশিং লৈরবদিএরে অসিদা তোঙান তোঙানবা ৱাহৈশিং য়াওই। খ্বাইদগী য়াম্বা মশিং য়াওবা ৱাহৈদু হল্লকই.স্ত্রিংশিংগী এরে অমা য়াবা ফংসন অমা ইশিনবা.# >>> find_max.call([""name"", ""of"", ""string""])
# ""string""
# >>> find_max.call([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max.call([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
def find_max(words)
","def find_max(words)
  # Helper function to count unique characters
  def unique_char_count(word)
    word.chars.uniq.size
  end

  words.max_by { |word| [unique_char_count(word), -word] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_max
    candidate = method(:find_max)
    assert_equal(""string"", candidate.call([""name"", ""of"", ""string""]))
    assert_equal(""enam"", candidate.call([""name"", ""enam"", ""game""]))
    assert_equal(""aaaaaaa"", candidate.call([""aaaaaaa"", ""bb"", ""cc""]))
    assert_equal(""abc"", candidate.call([""abc"", ""cba""]))
    assert_equal(""footbott"", candidate.call([""play"", ""this"", ""game"", ""of"", ""footbott""]))
    assert_equal(""gonna"", candidate.call([""we"", ""are"", ""gonna"", ""rock""]))
    assert_equal(""nation"", candidate.call([""we"", ""are"", ""a"", ""mad"", ""nation""]))
    assert_equal(""this"", candidate.call([""this"", ""is"", ""a"", ""prrk""]))
    assert_equal(""b"", candidate.call([""b""]))
    assert_equal(""play"", candidate.call([""play"", ""play"", ""play""]))
  end
end
"
HumanEval_159,mni_Beng,rb,"খুদম: করিগুম্বা কান্নবা কারোটশীং লৈত্রবদি, নহাক্না কান্নবা কারোট পুম্নমক চানগনি, অদুবু নহাক্না চোকথবা লৈরোই।নহাক্কী চিঞ্জাক্কী মতুংদা লৈখিবা কারোট মশীং] নহাক্না চানবা চিঞ্জাক্কী মতুংদা খোম্লাং থক্লবা গেরেৎকী অপুনবা মশিং,অদুবু হৌজিক্তি নুমিৎ অদুগী চিঞ্জাক মপুং ফাহনবগীদমক্তা নহাক্না কারোট হেন্না চানবা মথৌ তাই।নহাক অসি চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা চঙনা# >>> eat.call(5, 6, 10)
# [11, 4]
# >>> eat.call(4, 8, 9)
# [12, 1]
# >>> eat.call(1, 10, 10)
# [11, 0]
# >>> eat.call(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
def eat(number, need, remaining)
","def eat(number, need, remaining)
  total_eaten = number + [need, remaining].min
  carrots_left = [remaining - need, 0].max
  [total_eaten, carrots_left]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_eat
    candidate = method(:eat)
    assert_equal([11, 4], candidate.call(5, 6, 10))
    assert_equal([12, 1], candidate.call(4, 8, 9))
    assert_equal([11, 0], candidate.call(1, 10, 10))
    assert_equal([7, 0], candidate.call(2, 11, 5))
    assert_equal([9, 2], candidate.call(4, 5, 7))
    assert_equal([5, 0], candidate.call(4, 5, 1))
  end
end
"
HumanEval_160,mni_Beng,rb,"ওপরেতর এরে অমদা য়ামদ্রবদা ওপরেতর অমা অমসুং ওপরেন্দ এরে অমদা য়ামদ্রবদা ওপরেন্দ অনি লৈ।ওপরেন্দ অসি নেগেতিব ওইদবা ইন্তিজরশিংগী এরে অমনি।ওপরেতর এরেগী অশাং অসি ওপরেন্দ এরেগী অশাং মাইনাস ওন অমদা মান্নৈ।খঙজিনগদবা:=> ফল = 9 ফল = 2 + 3 * 4 - 5 ।এরে = [২, ৩, ৪, ৫] ওপরেতর['+', '*', '-'] খুদম: এক্সপোনেন্সিয়েসন (**) লৈমাইগী দিভিজন ( // ) মলতিপ্লিকেসন (*) হন্থবা (- ) তিনশিন্নবা (+) বেসিক অলজেব্রা ওপরেসনশিং:এক্সপ্রেসন অমা অমসুং এক্সপ্রেসন অসিগী ইভাল্যুএসনদু হল্লকই.অনিশুবা এরে অসি ইন্তিজরশিংগী এরে অমনি। অলজেব্রিক শেম্নবগীদমক্তা পীরিবা এরে অনি অসি শিজিন্নৌ।এরে অনিগী ওপরেতর, অমসুং ওপরেন্দ পীরি। অহানবা এরেদা বেসিক অলজেব্রা ওপরেসনশিং লৈ, অমসুং def do_algebra(operator, operand)
","def do_algebra(operator, operand)
  expression = operand[0].to_s
  operator.each_with_index do |op, index|
    if op == '//'
      expression += ' / ' + operand[index + 1].to_s
    else
      expression += ' ' + op + ' ' + operand[index + 1].to_s
    end
  end
  eval(expression)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_do_algebra
    candidate = method(:do_algebra)
    assert_equal(37, candidate.call([""**"", ""*"", ""+""], [2, 3, 4, 5]))
    assert_equal(9, candidate.call([""+"", ""*"", ""-""], [2, 3, 4, 5]))
    assert_equal(8, candidate.call([""//"", ""*""], [7, 3, 4]))
  end
end
"
HumanEval_161,mni_Beng,rb,"খুদমশিং ফংসন অসিনা ফংলকপা স্ত্রিংদু হল্লক্কদবনি.করিগুম্বা স্ত্রিং অদুদা ময়েক অমত্তা য়াওদ্রবদি, স্ত্রিং অদু ওন্ন-তৈনহনবা।মদু নৎত্রবদি মসি অসুম্না লেপকদবনি।করিগুম্বা s[i] অসি লেতর অমা ওইরবদি, মসিগী কেস অদু মখাদগী মথক্তা নত্ত্রগা মথক-মনাওদগী মখাদা ওন্থোকউ, অদোম্না স্ত্রিং s অমা পীরি।# >>> solve.call(""1234"")
# ""4321""
# >>> solve.call(""ab"")
# ""AB""
# >>> solve.call(""#a@C"")
# ""#A@c""
def solve(s)
","def solve(s)
  if s =~ /[a-zA-Z]/
    s.chars.map { |char| char =~ /[a-zA-Z]/ ? char.swapcase : char }.join
  else
    s.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""aSdF"", candidate.call(""AsDf""))
    assert_equal(""4321"", candidate.call(""1234""))
    assert_equal(""AB"", candidate.call(""ab""))
    assert_equal(""#A@c"", candidate.call(""#a@C""))
    assert_equal(""#aSDFw^45"", candidate.call(""#AsdfW^45""))
    assert_equal(""2@6#"", candidate.call(""#6@2""))
    assert_equal(""#$A^d"", candidate.call(""#$a^D""))
    assert_equal(""#CCC"", candidate.call(""#ccc""))
  end
end
"
HumanEval_162,mni_Beng,rb,"করিগুম্বা 'তেক্স' অসি অহাংবা স্ত্রিং অমা ওইরবদি, nil হল্লকই. 'text' স্ত্রিং অমা পীরবদি, মসিগী md5 হেশ মান্নবা স্ত্রিংদু হল্লকপা।# >>> string_to_md5.call(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
def string_to_md5(text)
","require 'digest'

def string_to_md5(text)
  return nil if text.empty?
  Digest::MD5.hexdigest(text)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_to_md5
    candidate = method(:string_to_md5)
    assert_equal(""3e25960a79dbc69b674cd4ec67a72c62"", candidate.call(""Hello world""))
    assert_equal(nil, candidate.call(""""))
    assert_equal(""0ef78513b0cb8cef12743f5aeb35f888"", candidate.call(""A B C""))
    assert_equal(""5f4dcc3b5aa765d61d8327deb882cf99"", candidate.call(""password""))
  end
end
"
HumanEval_163,mni_Beng,rb,"খুদম ওইনা: অমসুং b, মথং মথং হেনগৎলকপা ওইনা।পোজিতিব ওইবা ইন্তিজর a অমসুং b অনি পীরবদি, a গী মরক্তা লৈবা মান্নবা দিজিতশিংদু হল্লকউ.# >>> generate_integers.call(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers.call(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers.call(10, 14)
# []
def generate_integers(a, b)
","def generate_integers(a, b)
  (a..b).to_a.concat((b..a).to_a).select { |num| num.even? }.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_generate_integers
    candidate = method(:generate_integers)
    assert_equal([2, 4, 6, 8], candidate.call(2, 10))
    assert_equal([2, 4, 6, 8], candidate.call(10, 2))
    assert_equal([2, 4, 6, 8], candidate.call(132, 2))
    assert_equal([], candidate.call(17, 89))
  end
end
"
